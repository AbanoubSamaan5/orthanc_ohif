{"version":3,"file":"4113.bundle.70bd048c4c643f229a62.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-sr/src/enums.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/getRenderableData.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/toolNames.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/addSRAnnotation.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/isRehydratable.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/id.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/getFilteredCornerstoneToolState.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/getLabelFromDCMJSImportedToolData.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/hydrateStructuredReport.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/DICOMSRDisplayTool.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/SCOORD3DPointTool.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/SRSCOOR3DProbeMapper.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/addToolInstance.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/init.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-sr/src/onModeEnter.tsx","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/modules/dicomSRModule.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/createReferencedImageDisplaySet.ts"],"sourcesContent":["import { adaptersSR } from '@cornerstonejs/adapters';\r\n\r\nconst { CodeScheme: Cornerstone3DCodeScheme } = adaptersSR.Cornerstone3D;\r\n\r\nexport const SCOORDTypes = {\r\n  POINT: 'POINT',\r\n  MULTIPOINT: 'MULTIPOINT',\r\n  POLYLINE: 'POLYLINE',\r\n  CIRCLE: 'CIRCLE',\r\n  ELLIPSE: 'ELLIPSE',\r\n};\r\n\r\nexport const CodeNameCodeSequenceValues = {\r\n  ImagingMeasurementReport: '126000',\r\n  ImageLibrary: '111028',\r\n  ImagingMeasurements: '126010',\r\n  MeasurementGroup: '125007',\r\n  ImageLibraryGroup: '126200',\r\n  TrackingUniqueIdentifier: '112040',\r\n  TrackingIdentifier: '112039',\r\n  Finding: '121071',\r\n  FindingSite: 'G-C0E3', // SRT\r\n  FindingSiteSCT: '363698007', // SCT\r\n};\r\n\r\nexport const CodingSchemeDesignators = {\r\n  SRT: 'SRT',\r\n  SCT: 'SCT',\r\n  CornerstoneCodeSchemes: [Cornerstone3DCodeScheme.CodingSchemeDesignator, 'CST4'],\r\n};\r\n\r\nexport const RelationshipType = {\r\n  INFERRED_FROM: 'INFERRED FROM',\r\n  CONTAINS: 'CONTAINS',\r\n};\r\n\r\nconst enums = {\r\n  CodeNameCodeSequenceValues,\r\n  CodingSchemeDesignators,\r\n  RelationshipType,\r\n  SCOORDTypes,\r\n};\r\n\r\nexport default enums;\r\n","import { vec3 } from 'gl-matrix';\r\nimport { metaData, utilities, Types as csTypes } from '@cornerstonejs/core';\r\n\r\nimport { SCOORDTypes } from '../enums';\r\n\r\nconst EPSILON = 1e-4;\r\n\r\nconst getRenderableCoords = ({ GraphicData, ValueType, imageId }) => {\r\n  const renderableData = [];\r\n  if (ValueType === 'SCOORD3D') {\r\n    for (let i = 0; i < GraphicData.length; i += 3) {\r\n      renderableData.push([GraphicData[i], GraphicData[i + 1], GraphicData[i + 2]]);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < GraphicData.length; i += 2) {\r\n      const worldPos = utilities.imageToWorldCoords(imageId, [GraphicData[i], GraphicData[i + 1]]);\r\n      renderableData.push(worldPos);\r\n    }\r\n  }\r\n  return renderableData;\r\n};\r\n\r\nfunction getRenderableData({ GraphicType, GraphicData, ValueType, imageId }) {\r\n  let renderableData = [];\r\n\r\n  switch (GraphicType) {\r\n    case SCOORDTypes.POINT:\r\n    case SCOORDTypes.MULTIPOINT:\r\n    case SCOORDTypes.POLYLINE: {\r\n      renderableData = getRenderableCoords({ GraphicData, ValueType, imageId });\r\n      break;\r\n    }\r\n    case SCOORDTypes.CIRCLE: {\r\n      const pointsWorld: csTypes.Point3[] = getRenderableCoords({\r\n        GraphicData,\r\n        ValueType,\r\n        imageId,\r\n      });\r\n      // We do not have an explicit draw circle svg helper in Cornerstone3D at\r\n      // this time, but we can use the ellipse svg helper to draw a circle, so\r\n      // here we reshape the data for that purpose.\r\n      const center = pointsWorld[0];\r\n      const onPerimeter = pointsWorld[1];\r\n      const radius = vec3.distance(center, onPerimeter);\r\n\r\n      const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\r\n      if (!imagePlaneModule) {\r\n        throw new Error('No imagePlaneModule found');\r\n      }\r\n\r\n      const {\r\n        columnCosines,\r\n        rowCosines,\r\n      }: {\r\n        columnCosines: csTypes.Point3;\r\n        rowCosines: csTypes.Point3;\r\n      } = imagePlaneModule;\r\n\r\n      // we need to get major/minor axis (which are both the same size major = minor)\r\n\r\n      const firstAxisStart = vec3.create();\r\n      vec3.scaleAndAdd(firstAxisStart, center, columnCosines, radius);\r\n\r\n      const firstAxisEnd = vec3.create();\r\n      vec3.scaleAndAdd(firstAxisEnd, center, columnCosines, -radius);\r\n\r\n      const secondAxisStart = vec3.create();\r\n      vec3.scaleAndAdd(secondAxisStart, center, rowCosines, radius);\r\n\r\n      const secondAxisEnd = vec3.create();\r\n      vec3.scaleAndAdd(secondAxisEnd, center, rowCosines, -radius);\r\n\r\n      renderableData = [\r\n        firstAxisStart as csTypes.Point3,\r\n        firstAxisEnd as csTypes.Point3,\r\n        secondAxisStart as csTypes.Point3,\r\n        secondAxisEnd as csTypes.Point3,\r\n      ];\r\n\r\n      break;\r\n    }\r\n    case SCOORDTypes.ELLIPSE: {\r\n      // GraphicData is ordered as [majorAxisStartX, majorAxisStartY, majorAxisEndX, majorAxisEndY, minorAxisStartX, minorAxisStartY, minorAxisEndX, minorAxisEndY]\r\n      // But Cornerstone3D points are ordered as top, bottom, left, right for the\r\n      // ellipse so we need to identify if the majorAxis is horizontal or vertical\r\n      // and then choose the correct points to use for the ellipse.\r\n      const pointsWorld: csTypes.Point3[] = getRenderableCoords({\r\n        GraphicData,\r\n        ValueType,\r\n        imageId,\r\n      });\r\n\r\n      const majorAxisStart = vec3.fromValues(...pointsWorld[0]);\r\n      const majorAxisEnd = vec3.fromValues(...pointsWorld[1]);\r\n      const minorAxisStart = vec3.fromValues(...pointsWorld[2]);\r\n      const minorAxisEnd = vec3.fromValues(...pointsWorld[3]);\r\n\r\n      const majorAxisVec = vec3.create();\r\n      vec3.sub(majorAxisVec, majorAxisEnd, majorAxisStart);\r\n\r\n      // normalize majorAxisVec to avoid scaling issues\r\n      vec3.normalize(majorAxisVec, majorAxisVec);\r\n\r\n      const minorAxisVec = vec3.create();\r\n      vec3.sub(minorAxisVec, minorAxisEnd, minorAxisStart);\r\n      vec3.normalize(minorAxisVec, minorAxisVec);\r\n\r\n      const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\r\n\r\n      if (!imagePlaneModule) {\r\n        throw new Error('imageId does not have imagePlaneModule metadata');\r\n      }\r\n\r\n      const { columnCosines }: { columnCosines: csTypes.Point3 } = imagePlaneModule;\r\n\r\n      // find which axis is parallel to the columnCosines\r\n      const columnCosinesVec = vec3.fromValues(...columnCosines);\r\n\r\n      const projectedMajorAxisOnColVec = Math.abs(vec3.dot(columnCosinesVec, majorAxisVec));\r\n      const projectedMinorAxisOnColVec = Math.abs(vec3.dot(columnCosinesVec, minorAxisVec));\r\n\r\n      const absoluteOfMajorDotProduct = Math.abs(projectedMajorAxisOnColVec);\r\n      const absoluteOfMinorDotProduct = Math.abs(projectedMinorAxisOnColVec);\r\n\r\n      renderableData = [];\r\n      if (Math.abs(absoluteOfMajorDotProduct - 1) < EPSILON) {\r\n        renderableData = [pointsWorld[0], pointsWorld[1], pointsWorld[2], pointsWorld[3]];\r\n      } else if (Math.abs(absoluteOfMinorDotProduct - 1) < EPSILON) {\r\n        renderableData = [pointsWorld[2], pointsWorld[3], pointsWorld[0], pointsWorld[1]];\r\n      } else {\r\n        console.warn('OBLIQUE ELLIPSE NOT YET SUPPORTED');\r\n      }\r\n      break;\r\n    }\r\n    default:\r\n      console.warn('Unsupported GraphicType:', GraphicType);\r\n  }\r\n\r\n  return renderableData;\r\n}\r\n\r\nexport default getRenderableData;\r\n","const toolNames = {\r\n  DICOMSRDisplay: 'DICOMSRDisplay',\r\n  SRLength: 'SRLength',\r\n  SRBidirectional: 'SRBidirectional',\r\n  SREllipticalROI: 'SREllipticalROI',\r\n  SRCircleROI: 'SRCircleROI',\r\n  SRArrowAnnotate: 'SRArrowAnnotate',\r\n  SRAngle: 'SRAngle',\r\n  SRCobbAngle: 'SRCobbAngle',\r\n  SRRectangleROI: 'SRRectangleROI',\r\n  SRPlanarFreehandROI: 'SRPlanarFreehandROI',\r\n  SRSCOORD3DPoint: 'SRSCOORD3DPoint',\r\n};\r\n\r\nexport default toolNames;\r\n","import { Types, annotation } from '@cornerstonejs/tools';\r\nimport { metaData } from '@cornerstonejs/core';\r\n\r\nimport getRenderableData from './getRenderableData';\r\nimport toolNames from '../tools/toolNames';\r\n\r\nexport default function addSRAnnotation(measurement, imageId, frameNumber) {\r\n  let toolName = toolNames.DICOMSRDisplay;\r\n  const renderableData = measurement.coords.reduce((acc, coordProps) => {\r\n    acc[coordProps.GraphicType] = acc[coordProps.GraphicType] || [];\r\n    acc[coordProps.GraphicType].push(getRenderableData({ ...coordProps, imageId }));\r\n    return acc;\r\n  }, {});\r\n\r\n  const { TrackingUniqueIdentifier } = measurement;\r\n  const { ValueType: valueType, GraphicType: graphicType } = measurement.coords[0];\r\n  const graphicTypePoints = renderableData[graphicType];\r\n\r\n  /** TODO: Read the tool name from the DICOM SR identification type in the future. */\r\n  let frameOfReferenceUID = null;\r\n\r\n  if (imageId) {\r\n    const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\r\n    frameOfReferenceUID = imagePlaneModule?.frameOfReferenceUID;\r\n  }\r\n\r\n  if (valueType === 'SCOORD3D') {\r\n    toolName = toolNames.SRSCOORD3DPoint;\r\n\r\n    // get the ReferencedFrameOfReferenceUID from the measurement\r\n    frameOfReferenceUID = measurement.coords[0].ReferencedFrameOfReferenceSequence;\r\n  }\r\n\r\n  const SRAnnotation: Types.Annotation = {\r\n    annotationUID: TrackingUniqueIdentifier,\r\n    highlighted: false,\r\n    isLocked: false,\r\n    invalidated: false,\r\n    metadata: {\r\n      toolName,\r\n      valueType,\r\n      graphicType,\r\n      FrameOfReferenceUID: frameOfReferenceUID,\r\n      referencedImageId: imageId,\r\n    },\r\n    data: {\r\n      label: measurement.labels?.[0]?.value || undefined,\r\n      displayText: measurement.displayText || undefined,\r\n      handles: {\r\n        textBox: measurement.textBox ?? {},\r\n        points: graphicTypePoints[0],\r\n      },\r\n      cachedStats: {},\r\n      frameNumber,\r\n      renderableData,\r\n      TrackingUniqueIdentifier,\r\n      labels: measurement.labels,\r\n    },\r\n  };\r\n\r\n  /**\r\n   * const annotationManager = annotation.annotationState.getAnnotationManager();\r\n   * was not triggering annotation_added events.\r\n   */\r\n  annotation.state.addAnnotation(SRAnnotation);\r\n  console.debug('Adding SR annotation:', SRAnnotation);\r\n}\r\n","import { adaptersSR } from '@cornerstonejs/adapters';\r\n\r\nconst { MeasurementReport } = adaptersSR.Cornerstone3D;\r\n\r\n/**\r\n * Checks if the given `displaySet`can be rehydrated into the `measurementService`.\r\n *\r\n * @param {object} displaySet The SR `displaySet` to check.\r\n * @param {object[]} mappings The CornerstoneTools 4 mappings to the `measurementService`.\r\n * @returns {boolean} True if the SR can be rehydrated into the `measurementService`.\r\n */\r\nexport default function isRehydratable(displaySet, mappings) {\r\n  if (!mappings || !mappings.length) {\r\n    return false;\r\n  }\r\n\r\n  const mappingDefinitions = new Set<string>();\r\n  for (const m of mappings) {\r\n    mappingDefinitions.add(m.annotationType);\r\n  }\r\n\r\n  const { measurements } = displaySet;\r\n\r\n  for (let i = 0; i < measurements.length; i++) {\r\n    const { TrackingIdentifier } = measurements[i] || {};\r\n    if (!TrackingIdentifier) {\r\n      console.warn('No tracking identifier for measurement ', measurements[i]);\r\n      continue;\r\n    }\r\n    const adapter = MeasurementReport.getAdapterForTrackingIdentifier(TrackingIdentifier);\r\n    const hydratable = adapter && mappingDefinitions.has(adapter.toolType);\r\n\r\n    if (hydratable) {\r\n      return true;\r\n    }\r\n    console.log('Measurement is not rehydratable', TrackingIdentifier, measurements[i]);\r\n  }\r\n\r\n  console.log('No measurements found which were rehydratable');\r\n  return false;\r\n}\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nconst SOPClassHandlerName = 'dicom-sr';\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\r\n\r\nconst SOPClassHandlerName3D = 'dicom-sr-3d';\r\nconst SOPClassHandlerId3D = `${id}.sopClassHandlerModule.${SOPClassHandlerName3D}`;\r\n\r\nexport { SOPClassHandlerName, SOPClassHandlerId, SOPClassHandlerName3D, SOPClassHandlerId3D, id };\r\n","import { utils, classes, DisplaySetService, Types } from '@ohif/core';\r\nimport { Enums as CSExtensionEnums } from '@ohif/extension-cornerstone';\r\nimport { adaptersSR } from '@cornerstonejs/adapters';\r\n\r\nimport addSRAnnotation from './utils/addSRAnnotation';\r\nimport isRehydratable from './utils/isRehydratable';\r\nimport {\r\n  SOPClassHandlerName,\r\n  SOPClassHandlerId,\r\n  SOPClassHandlerId3D,\r\n  SOPClassHandlerName3D,\r\n} from './id';\r\nimport { CodeNameCodeSequenceValues, CodingSchemeDesignators } from './enums';\r\n\r\nconst { sopClassDictionary } = utils;\r\nconst { CORNERSTONE_3D_TOOLS_SOURCE_NAME, CORNERSTONE_3D_TOOLS_SOURCE_VERSION } = CSExtensionEnums;\r\nconst { ImageSet, MetadataProvider: metadataProvider } = classes;\r\nconst { CodeScheme: Cornerstone3DCodeScheme } = adaptersSR.Cornerstone3D;\r\n\r\ntype InstanceMetadata = Types.InstanceMetadata;\r\n\r\n/**\r\n * TODO\r\n * - [ ] Add SR thumbnail\r\n * - [ ] Make viewport\r\n * - [ ] Get stacks from referenced displayInstanceUID and load into wrapped CornerStone viewport\r\n */\r\n\r\nconst sopClassUids = [\r\n  sopClassDictionary.BasicTextSR,\r\n  sopClassDictionary.EnhancedSR,\r\n  sopClassDictionary.ComprehensiveSR,\r\n];\r\n\r\nconst validateSameStudyUID = (uid: string, instances): void => {\r\n  instances.forEach(it => {\r\n    if (it.StudyInstanceUID !== uid) {\r\n      console.warn('Not all instances have the same UID', uid, it);\r\n      throw new Error(`Instances ${it.SOPInstanceUID} does not belong to ${uid}`);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Adds instances to the DICOM SR series, rather than creating a new\r\n * series, so that as SR's are saved, they append to the series, and the\r\n * key image display set gets updated as well, containing just the new series.\r\n * @param instances is a list of instances from THIS series that are not\r\n *     in this DICOM SR Display Set already.\r\n */\r\nfunction addInstances(instances: InstanceMetadata[], displaySetService: DisplaySetService) {\r\n  this.instances.push(...instances);\r\n  utils.sortStudyInstances(this.instances);\r\n  // The last instance is the newest one, so is the one most interesting.\r\n  // Eventually, the SR viewer should have the ability to choose which SR\r\n  // gets loaded, and to navigate among them.\r\n  this.instance = this.instances[this.instances.length - 1];\r\n  this.isLoaded = false;\r\n  return this;\r\n}\r\n\r\n/**\r\n * DICOM SR SOP Class Handler\r\n * For all referenced images in the TID 1500/300 sections, add an image to the\r\n * display.\r\n * @param instances is a set of instances all from the same series\r\n * @param servicesManager is the services that can be used for creating\r\n * @returns The list of display sets created for the given instances object\r\n */\r\nfunction _getDisplaySetsFromSeries(\r\n  instances,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager\r\n) {\r\n  // If the series has no instances, stop here\r\n  if (!instances || !instances.length) {\r\n    throw new Error('No instances were provided');\r\n  }\r\n\r\n  utils.sortStudyInstances(instances);\r\n  // The last instance is the newest one, so is the one most interesting.\r\n  // Eventually, the SR viewer should have the ability to choose which SR\r\n  // gets loaded, and to navigate among them.\r\n  const instance = instances[instances.length - 1];\r\n\r\n  const {\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    ConceptNameCodeSequence,\r\n    SOPClassUID,\r\n  } = instance;\r\n  validateSameStudyUID(instance.StudyInstanceUID, instances);\r\n\r\n  const is3DSR = SOPClassUID === sopClassDictionary.Comprehensive3DSR;\r\n\r\n  const isImagingMeasurementReport =\r\n    ConceptNameCodeSequence?.CodeValue === CodeNameCodeSequenceValues.ImagingMeasurementReport;\r\n\r\n  const displaySet = {\r\n    Modality: 'SR',\r\n    displaySetInstanceUID: utils.guid(),\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    SOPClassHandlerId: is3DSR ? SOPClassHandlerId3D : SOPClassHandlerId,\r\n    SOPClassUID,\r\n    instances,\r\n    referencedImages: null,\r\n    measurements: null,\r\n    isDerivedDisplaySet: true,\r\n    isLoaded: false,\r\n    isImagingMeasurementReport,\r\n    sopClassUids,\r\n    instance,\r\n    addInstances,\r\n  };\r\n\r\n  displaySet.load = () => _load(displaySet, servicesManager, extensionManager);\r\n\r\n  return [displaySet];\r\n}\r\n\r\n/**\r\n * Loads the display set with the given services and extension manager.\r\n * @param srDisplaySet - The display set to load.\r\n * @param servicesManager - The services manager containing displaySetService and measurementService.\r\n * @param extensionManager - The extension manager containing data sources.\r\n */\r\nasync function _load(\r\n  srDisplaySet: Types.DisplaySet,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager: AppTypes.ExtensionManager\r\n) {\r\n  const { displaySetService, measurementService } = servicesManager.services;\r\n  const dataSources = extensionManager.getDataSources();\r\n  const dataSource = dataSources[0];\r\n  const { ContentSequence } = srDisplaySet.instance;\r\n\r\n  async function retrieveBulkData(obj, parentObj = null, key = null) {\r\n    for (const prop in obj) {\r\n      if (typeof obj[prop] === 'object' && obj[prop] !== null) {\r\n        await retrieveBulkData(obj[prop], obj, prop);\r\n      } else if (Array.isArray(obj[prop])) {\r\n        await Promise.all(obj[prop].map(item => retrieveBulkData(item, obj, prop)));\r\n      } else if (prop === 'BulkDataURI') {\r\n        const value = await dataSource.retrieve.bulkDataURI({\r\n          BulkDataURI: obj[prop],\r\n          StudyInstanceUID: srDisplaySet.instance.StudyInstanceUID,\r\n          SeriesInstanceUID: srDisplaySet.instance.SeriesInstanceUID,\r\n          SOPInstanceUID: srDisplaySet.instance.SOPInstanceUID,\r\n        });\r\n        if (parentObj && key) {\r\n          parentObj[key] = new Float32Array(value);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (srDisplaySet.isLoaded !== true) {\r\n    await retrieveBulkData(ContentSequence);\r\n  }\r\n\r\n  if (srDisplaySet.isImagingMeasurementReport) {\r\n    srDisplaySet.referencedImages = _getReferencedImagesList(ContentSequence);\r\n    srDisplaySet.measurements = _getMeasurements(ContentSequence);\r\n  } else {\r\n    srDisplaySet.referencedImages = [];\r\n    srDisplaySet.measurements = [];\r\n  }\r\n\r\n  const mappings = measurementService.getSourceMappings(\r\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\r\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\r\n  );\r\n\r\n  srDisplaySet.isHydrated = false;\r\n  srDisplaySet.isRehydratable = isRehydratable(srDisplaySet, mappings);\r\n  srDisplaySet.isLoaded = true;\r\n\r\n  /** Check currently added displaySets and add measurements if the sources exist */\r\n  displaySetService.activeDisplaySets.forEach(activeDisplaySet => {\r\n    _checkIfCanAddMeasurementsToDisplaySet(\r\n      srDisplaySet,\r\n      activeDisplaySet,\r\n      dataSource,\r\n      servicesManager\r\n    );\r\n  });\r\n\r\n  /** Subscribe to new displaySets as the source may come in after */\r\n  displaySetService.subscribe(displaySetService.EVENTS.DISPLAY_SETS_ADDED, data => {\r\n    const { displaySetsAdded } = data;\r\n    /**\r\n     * If there are still some measurements that have not yet been loaded into cornerstone,\r\n     * See if we can load them onto any of the new displaySets.\r\n     */\r\n    displaySetsAdded.forEach(newDisplaySet => {\r\n      _checkIfCanAddMeasurementsToDisplaySet(\r\n        srDisplaySet,\r\n        newDisplaySet,\r\n        dataSource,\r\n        servicesManager\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Checks if measurements can be added to a display set.\r\n *\r\n * @param srDisplaySet - The source display set containing measurements.\r\n * @param newDisplaySet - The new display set to check if measurements can be added.\r\n * @param dataSource - The data source used to retrieve image IDs.\r\n * @param servicesManager - The services manager.\r\n */\r\nfunction _checkIfCanAddMeasurementsToDisplaySet(\r\n  srDisplaySet,\r\n  newDisplaySet,\r\n  dataSource,\r\n  servicesManager: AppTypes.ServicesManager\r\n) {\r\n  const { customizationService } = servicesManager.services;\r\n\r\n  const unloadedMeasurements = srDisplaySet.measurements.filter(\r\n    measurement => measurement.loaded === false\r\n  );\r\n\r\n  if (\r\n    unloadedMeasurements.length === 0 ||\r\n    !(newDisplaySet instanceof ImageSet) ||\r\n    newDisplaySet.unsupported\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  // const { sopClassUids } = newDisplaySet;\r\n  // Create a Set for faster lookups\r\n  // const sopClassUidSet = new Set(sopClassUids);\r\n\r\n  // Create a Map to efficiently look up ImageIds by SOPInstanceUID and frame number\r\n  const imageIdMap = new Map<string, string>();\r\n  const imageIds = dataSource.getImageIdsForDisplaySet(newDisplaySet);\r\n\r\n  for (const imageId of imageIds) {\r\n    const { SOPInstanceUID, frameNumber } = metadataProvider.getUIDsFromImageID(imageId);\r\n    const key = `${SOPInstanceUID}:${frameNumber || 1}`;\r\n    imageIdMap.set(key, imageId);\r\n  }\r\n\r\n  if (!unloadedMeasurements?.length) {\r\n    return;\r\n  }\r\n\r\n  const is3DSR = srDisplaySet.SOPClassUID === sopClassDictionary.Comprehensive3DSR;\r\n\r\n  for (let j = unloadedMeasurements.length - 1; j >= 0; j--) {\r\n    let measurement = unloadedMeasurements[j];\r\n\r\n    const onBeforeSRAddMeasurement = customizationService.getCustomization(\r\n      'onBeforeSRAddMeasurement'\r\n    );\r\n\r\n    if (typeof onBeforeSRAddMeasurement === 'function') {\r\n      measurement = onBeforeSRAddMeasurement({\r\n        measurement,\r\n        StudyInstanceUID: srDisplaySet.StudyInstanceUID,\r\n        SeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      });\r\n    }\r\n\r\n    // if it is 3d SR we can just add the SR annotation\r\n    if (is3DSR) {\r\n      addSRAnnotation(measurement, null, null);\r\n      measurement.loaded = true;\r\n      continue;\r\n    }\r\n\r\n    const referencedSOPSequence = measurement.coords[0].ReferencedSOPSequence;\r\n    if (!referencedSOPSequence) {\r\n      continue;\r\n    }\r\n\r\n    const { ReferencedSOPInstanceUID } = referencedSOPSequence;\r\n    const frame = referencedSOPSequence.ReferencedFrameNumber || 1;\r\n    const key = `${ReferencedSOPInstanceUID}:${frame}`;\r\n    const imageId = imageIdMap.get(key);\r\n\r\n    if (\r\n      imageId &&\r\n      _measurementReferencesSOPInstanceUID(measurement, ReferencedSOPInstanceUID, frame)\r\n    ) {\r\n      addSRAnnotation(measurement, imageId, frame);\r\n\r\n      // Update measurement properties\r\n      measurement.loaded = true;\r\n      measurement.imageId = imageId;\r\n      measurement.displaySetInstanceUID = newDisplaySet.displaySetInstanceUID;\r\n      measurement.ReferencedSOPInstanceUID = ReferencedSOPInstanceUID;\r\n      measurement.frameNumber = frame;\r\n\r\n      unloadedMeasurements.splice(j, 1);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if a measurement references a specific SOP Instance UID.\r\n * @param measurement - The measurement object.\r\n * @param SOPInstanceUID - The SOP Instance UID to check against.\r\n * @param frameNumber - The frame number to check against (optional).\r\n * @returns True if the measurement references the specified SOP Instance UID, false otherwise.\r\n */\r\nfunction _measurementReferencesSOPInstanceUID(measurement, SOPInstanceUID, frameNumber) {\r\n  const { coords } = measurement;\r\n\r\n  /**\r\n   * NOTE: The ReferencedFrameNumber can be multiple values according to the DICOM\r\n   * Standard. But for now, we will support only one ReferenceFrameNumber.\r\n   */\r\n  const ReferencedFrameNumber =\r\n    (measurement.coords[0].ReferencedSOPSequence &&\r\n      measurement.coords[0].ReferencedSOPSequence?.ReferencedFrameNumber) ||\r\n    1;\r\n\r\n  if (frameNumber && Number(frameNumber) !== Number(ReferencedFrameNumber)) {\r\n    return false;\r\n  }\r\n\r\n  for (let j = 0; j < coords.length; j++) {\r\n    const coord = coords[j];\r\n    const { ReferencedSOPInstanceUID } = coord.ReferencedSOPSequence;\r\n    if (ReferencedSOPInstanceUID === SOPInstanceUID) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Retrieves the SOP class handler module.\r\n *\r\n * @param {Object} options - The options for retrieving the SOP class handler module.\r\n * @param {Object} options.servicesManager - The services manager.\r\n * @param {Object} options.extensionManager - The extension manager.\r\n * @returns {Array} An array containing the SOP class handler module.\r\n */\r\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n  return [\r\n    {\r\n      name: SOPClassHandlerName,\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries,\r\n    },\r\n    {\r\n      name: SOPClassHandlerName3D,\r\n      sopClassUids: [sopClassDictionary.Comprehensive3DSR],\r\n      getDisplaySetsFromSeries,\r\n    },\r\n  ];\r\n}\r\n\r\n/**\r\n * Retrieves the measurements from the ImagingMeasurementReportContentSequence.\r\n *\r\n * @param {Array} ImagingMeasurementReportContentSequence - The ImagingMeasurementReportContentSequence array.\r\n * @returns {Array} - The array of measurements.\r\n */\r\nfunction _getMeasurements(ImagingMeasurementReportContentSequence) {\r\n  const ImagingMeasurements = ImagingMeasurementReportContentSequence.find(\r\n    item =>\r\n      item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.ImagingMeasurements\r\n  );\r\n\r\n  if (!ImagingMeasurements) {\r\n    return [];\r\n  }\r\n\r\n  const MeasurementGroups = _getSequenceAsArray(ImagingMeasurements.ContentSequence).filter(\r\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.MeasurementGroup\r\n  );\r\n\r\n  const mergedContentSequencesByTrackingUniqueIdentifiers =\r\n    _getMergedContentSequencesByTrackingUniqueIdentifiers(MeasurementGroups);\r\n  const measurements = [];\r\n\r\n  Object.keys(mergedContentSequencesByTrackingUniqueIdentifiers).forEach(\r\n    trackingUniqueIdentifier => {\r\n      const mergedContentSequence =\r\n        mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier];\r\n\r\n      const measurement = _processMeasurement(mergedContentSequence);\r\n      if (measurement) {\r\n        measurements.push(measurement);\r\n      }\r\n    }\r\n  );\r\n\r\n  return measurements;\r\n}\r\n\r\n/**\r\n * Retrieves merged content sequences by tracking unique identifiers.\r\n *\r\n * @param {Array} MeasurementGroups - The measurement groups.\r\n * @returns {Object} - The merged content sequences by tracking unique identifiers.\r\n */\r\nfunction _getMergedContentSequencesByTrackingUniqueIdentifiers(MeasurementGroups) {\r\n  const mergedContentSequencesByTrackingUniqueIdentifiers = {};\r\n\r\n  MeasurementGroups.forEach(MeasurementGroup => {\r\n    const ContentSequence = _getSequenceAsArray(MeasurementGroup.ContentSequence);\r\n\r\n    const TrackingUniqueIdentifierItem = ContentSequence.find(\r\n      item =>\r\n        item.ConceptNameCodeSequence.CodeValue ===\r\n        CodeNameCodeSequenceValues.TrackingUniqueIdentifier\r\n    );\r\n    if (!TrackingUniqueIdentifierItem) {\r\n      console.warn('No Tracking Unique Identifier, skipping ambiguous measurement.');\r\n    }\r\n\r\n    const trackingUniqueIdentifier = TrackingUniqueIdentifierItem.UID;\r\n\r\n    if (mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier] === undefined) {\r\n      // Add the full ContentSequence\r\n      mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier] = [\r\n        ...ContentSequence,\r\n      ];\r\n    } else {\r\n      // Add the ContentSequence minus the tracking identifier, as we have this\r\n      // Information in the merged ContentSequence anyway.\r\n      ContentSequence.forEach(item => {\r\n        if (\r\n          item.ConceptNameCodeSequence.CodeValue !==\r\n          CodeNameCodeSequenceValues.TrackingUniqueIdentifier\r\n        ) {\r\n          mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier].push(item);\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return mergedContentSequencesByTrackingUniqueIdentifiers;\r\n}\r\n\r\n/**\r\n * Processes the measurement based on the merged content sequence.\r\n * If the merged content sequence contains SCOORD or SCOORD3D value types,\r\n * it calls the _processTID1410Measurement function.\r\n * Otherwise, it calls the _processNonGeometricallyDefinedMeasurement function.\r\n *\r\n * @param {Array<Object>} mergedContentSequence - The merged content sequence to process.\r\n * @returns {any} - The processed measurement result.\r\n */\r\nfunction _processMeasurement(mergedContentSequence) {\r\n  if (\r\n    mergedContentSequence.some(\r\n      group => group.ValueType === 'SCOORD' || group.ValueType === 'SCOORD3D'\r\n    )\r\n  ) {\r\n    return _processTID1410Measurement(mergedContentSequence);\r\n  }\r\n\r\n  return _processNonGeometricallyDefinedMeasurement(mergedContentSequence);\r\n}\r\n\r\n/**\r\n * Processes TID 1410 style measurements from the mergedContentSequence.\r\n * TID 1410 style measurements have a SCOORD or SCOORD3D at the top level,\r\n * and non-geometric representations where each NUM has \"INFERRED FROM\" SCOORD/SCOORD3D.\r\n *\r\n * @param mergedContentSequence - The merged content sequence containing the measurements.\r\n * @returns The measurement object containing the loaded status, labels, coordinates, tracking unique identifier, and tracking identifier.\r\n */\r\nfunction _processTID1410Measurement(mergedContentSequence) {\r\n  // Need to deal with TID 1410 style measurements, which will have a SCOORD or SCOORD3D at the top level,\r\n  // And non-geometric representations where each NUM has \"INFERRED FROM\" SCOORD/SCOORD3D\r\n\r\n  const graphicItem = mergedContentSequence.find(\r\n    group => group.ValueType === 'SCOORD' || group.ValueType === 'SCOORD3D'\r\n  );\r\n\r\n  const UIDREFContentItem = mergedContentSequence.find(group => group.ValueType === 'UIDREF');\r\n\r\n  const TrackingIdentifierContentItem = mergedContentSequence.find(\r\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.TrackingIdentifier\r\n  );\r\n\r\n  if (!graphicItem) {\r\n    console.warn(\r\n      `graphic ValueType ${graphicItem.ValueType} not currently supported, skipping annotation.`\r\n    );\r\n    return;\r\n  }\r\n\r\n  const NUMContentItems = mergedContentSequence.filter(group => group.ValueType === 'NUM');\r\n\r\n  const measurement = {\r\n    loaded: false,\r\n    labels: [],\r\n    coords: [_getCoordsFromSCOORDOrSCOORD3D(graphicItem)],\r\n    TrackingUniqueIdentifier: UIDREFContentItem.UID,\r\n    TrackingIdentifier: TrackingIdentifierContentItem.TextValue,\r\n  };\r\n\r\n  NUMContentItems.forEach(item => {\r\n    const { ConceptNameCodeSequence, MeasuredValueSequence } = item;\r\n    if (MeasuredValueSequence) {\r\n      measurement.labels.push(\r\n        _getLabelFromMeasuredValueSequence(ConceptNameCodeSequence, MeasuredValueSequence)\r\n      );\r\n    }\r\n  });\r\n\r\n  const findingSites = mergedContentSequence.filter(\r\n    item =>\r\n      item.ConceptNameCodeSequence.CodingSchemeDesignator === CodingSchemeDesignators.SCT &&\r\n      item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.FindingSiteSCT\r\n  );\r\n  if (findingSites.length) {\r\n    measurement.labels.push({\r\n      label: CodeNameCodeSequenceValues.FindingSiteSCT,\r\n      value: findingSites[0].ConceptCodeSequence.CodeMeaning,\r\n    });\r\n  }\r\n\r\n  return measurement;\r\n}\r\n\r\n/**\r\n * Processes the non-geometrically defined measurement from the merged content sequence.\r\n *\r\n * @param mergedContentSequence The merged content sequence containing the measurement data.\r\n * @returns The processed measurement object.\r\n */\r\nfunction _processNonGeometricallyDefinedMeasurement(mergedContentSequence) {\r\n  const NUMContentItems = mergedContentSequence.filter(group => group.ValueType === 'NUM');\r\n  const UIDREFContentItem = mergedContentSequence.find(group => group.ValueType === 'UIDREF');\r\n\r\n  const TrackingIdentifierContentItem = mergedContentSequence.find(\r\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.TrackingIdentifier\r\n  );\r\n\r\n  const finding = mergedContentSequence.find(\r\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.Finding\r\n  );\r\n\r\n  const findingSites = mergedContentSequence.filter(\r\n    item =>\r\n      item.ConceptNameCodeSequence.CodingSchemeDesignator === CodingSchemeDesignators.SRT &&\r\n      item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.FindingSite\r\n  );\r\n\r\n  const measurement = {\r\n    loaded: false,\r\n    labels: [],\r\n    coords: [],\r\n    TrackingUniqueIdentifier: UIDREFContentItem.UID,\r\n    TrackingIdentifier: TrackingIdentifierContentItem.TextValue,\r\n  };\r\n\r\n  if (\r\n    finding &&\r\n    CodingSchemeDesignators.CornerstoneCodeSchemes.includes(\r\n      finding.ConceptCodeSequence.CodingSchemeDesignator\r\n    ) &&\r\n    finding.ConceptCodeSequence.CodeValue === Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT\r\n  ) {\r\n    measurement.labels.push({\r\n      label: Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT,\r\n      value: finding.ConceptCodeSequence.CodeMeaning,\r\n    });\r\n  }\r\n\r\n  // TODO -> Eventually hopefully support SNOMED or some proper code library, just free text for now.\r\n  if (findingSites.length) {\r\n    const cornerstoneFreeTextFindingSite = findingSites.find(\r\n      FindingSite =>\r\n        CodingSchemeDesignators.CornerstoneCodeSchemes.includes(\r\n          FindingSite.ConceptCodeSequence.CodingSchemeDesignator\r\n        ) &&\r\n        FindingSite.ConceptCodeSequence.CodeValue ===\r\n          Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT\r\n    );\r\n\r\n    if (cornerstoneFreeTextFindingSite) {\r\n      measurement.labels.push({\r\n        label: Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT,\r\n        value: cornerstoneFreeTextFindingSite.ConceptCodeSequence.CodeMeaning,\r\n      });\r\n    }\r\n  }\r\n\r\n  NUMContentItems.forEach(item => {\r\n    const { ConceptNameCodeSequence, ContentSequence, MeasuredValueSequence } = item;\r\n\r\n    const { ValueType } = ContentSequence;\r\n    if (!ValueType === 'SCOORD') {\r\n      console.warn(`Graphic ${ValueType} not currently supported, skipping annotation.`);\r\n      return;\r\n    }\r\n\r\n    const coords = _getCoordsFromSCOORDOrSCOORD3D(ContentSequence);\r\n    if (coords) {\r\n      measurement.coords.push(coords);\r\n    }\r\n\r\n    if (MeasuredValueSequence) {\r\n      measurement.labels.push(\r\n        _getLabelFromMeasuredValueSequence(ConceptNameCodeSequence, MeasuredValueSequence)\r\n      );\r\n    }\r\n  });\r\n\r\n  return measurement;\r\n}\r\n\r\n/**\r\n * Extracts coordinates from a graphic item of type SCOORD or SCOORD3D.\r\n * @param {object} graphicItem - The graphic item containing the coordinates.\r\n * @returns {object} - The extracted coordinates.\r\n */\r\nconst _getCoordsFromSCOORDOrSCOORD3D = graphicItem => {\r\n  const { ValueType, GraphicType, GraphicData } = graphicItem;\r\n  const coords = { ValueType, GraphicType, GraphicData };\r\n  coords.ReferencedSOPSequence = graphicItem.ContentSequence?.ReferencedSOPSequence;\r\n  coords.ReferencedFrameOfReferenceSequence =\r\n    graphicItem.ReferencedFrameOfReferenceUID ||\r\n    graphicItem.ContentSequence?.ReferencedFrameOfReferenceSequence;\r\n  return coords;\r\n};\r\n\r\n/**\r\n * Retrieves the label and value from the provided ConceptNameCodeSequence and MeasuredValueSequence.\r\n * @param {Object} ConceptNameCodeSequence - The ConceptNameCodeSequence object.\r\n * @param {Object} MeasuredValueSequence - The MeasuredValueSequence object.\r\n * @returns {Object} - An object containing the label and value.\r\n *                    The label represents the CodeMeaning from the ConceptNameCodeSequence.\r\n *                    The value represents the formatted NumericValue and CodeValue from the MeasuredValueSequence.\r\n *                    Example: { label: 'Long Axis', value: '31.00 mm' }\r\n */\r\nfunction _getLabelFromMeasuredValueSequence(ConceptNameCodeSequence, MeasuredValueSequence) {\r\n  const { CodeMeaning } = ConceptNameCodeSequence;\r\n  const { NumericValue, MeasurementUnitsCodeSequence } = MeasuredValueSequence;\r\n  const { CodeValue } = MeasurementUnitsCodeSequence;\r\n  const formatedNumericValue = NumericValue ? Number(NumericValue).toFixed(2) : '';\r\n  return {\r\n    label: CodeMeaning,\r\n    value: `${formatedNumericValue} ${CodeValue}`,\r\n  }; // E.g. Long Axis: 31.0 mm\r\n}\r\n\r\n/**\r\n * Retrieves a list of referenced images from the Imaging Measurement Report Content Sequence.\r\n *\r\n * @param {Array} ImagingMeasurementReportContentSequence - The Imaging Measurement Report Content Sequence.\r\n * @returns {Array} - The list of referenced images.\r\n */\r\nfunction _getReferencedImagesList(ImagingMeasurementReportContentSequence) {\r\n  const ImageLibrary = ImagingMeasurementReportContentSequence.find(\r\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.ImageLibrary\r\n  );\r\n\r\n  if (!ImageLibrary) {\r\n    return [];\r\n  }\r\n\r\n  const ImageLibraryGroup = _getSequenceAsArray(ImageLibrary.ContentSequence).find(\r\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.ImageLibraryGroup\r\n  );\r\n  if (!ImageLibraryGroup) {\r\n    return [];\r\n  }\r\n\r\n  const referencedImages = [];\r\n\r\n  _getSequenceAsArray(ImageLibraryGroup.ContentSequence).forEach(item => {\r\n    const { ReferencedSOPSequence } = item;\r\n    if (!ReferencedSOPSequence) {\r\n      return;\r\n    }\r\n    for (const ref of _getSequenceAsArray(ReferencedSOPSequence)) {\r\n      if (ref.ReferencedSOPClassUID) {\r\n        const { ReferencedSOPClassUID, ReferencedSOPInstanceUID } = ref;\r\n\r\n        referencedImages.push({\r\n          ReferencedSOPClassUID,\r\n          ReferencedSOPInstanceUID,\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  return referencedImages;\r\n}\r\n\r\n/**\r\n * Converts a DICOM sequence to an array.\r\n * If the sequence is null or undefined, an empty array is returned.\r\n * If the sequence is already an array, it is returned as is.\r\n * Otherwise, the sequence is wrapped in an array and returned.\r\n *\r\n * @param {any} sequence - The DICOM sequence to convert.\r\n * @returns {any[]} - The converted array.\r\n */\r\nfunction _getSequenceAsArray(sequence) {\r\n  if (!sequence) {\r\n    return [];\r\n  }\r\n  return Array.isArray(sequence) ? sequence : [sequence];\r\n}\r\n\r\nexport default getSopClassHandlerModule;\r\n","import { Types } from '@ohif/core';\r\n\r\nconst srProtocol: Types.HangingProtocol.Protocol = {\r\n  id: '@ohif/sr',\r\n  // Don't store this hanging protocol as it applies to the currently active\r\n  // display set by default\r\n  // cacheId: null,\r\n  name: 'SR Key Images',\r\n  // Just apply this one when specifically listed\r\n  protocolMatchingRules: [],\r\n  toolGroupIds: ['default'],\r\n  // -1 would be used to indicate active only, whereas other values are\r\n  // the number of required priors referenced - so 0 means active with\r\n  // 0 or more priors.\r\n  numberOfPriorsReferenced: 0,\r\n  // Default viewport is used to define the viewport when\r\n  // additional viewports are added using the layout tool\r\n  defaultViewport: {\r\n    viewportOptions: {\r\n      viewportType: 'stack',\r\n      toolGroupId: 'default',\r\n      allowUnmatchedView: true,\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'srDisplaySetId',\r\n        matchedDisplaySetsIndex: -1,\r\n      },\r\n    ],\r\n  },\r\n  displaySetSelectors: {\r\n    srDisplaySetId: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'SR',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [\r\n    {\r\n      name: 'SR Key Images',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 1,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: { allowUnmatchedView: true },\r\n          displaySets: [\r\n            {\r\n              id: 'srDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: srProtocol.id,\r\n      protocol: srProtocol,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\nexport { srProtocol };\r\n","import OHIF from '@ohif/core';\r\nimport { annotation } from '@cornerstonejs/tools';\r\nconst { log } = OHIF;\r\n\r\nfunction getFilteredCornerstoneToolState(measurementData, additionalFindingTypes) {\r\n  const filteredToolState = {};\r\n\r\n  function addToFilteredToolState(annotation, toolType) {\r\n    if (!annotation.metadata?.referencedImageId) {\r\n      log.warn(`[DICOMSR] No referencedImageId found for ${toolType} ${annotation.id}`);\r\n      return;\r\n    }\r\n\r\n    const imageId = annotation.metadata.referencedImageId;\r\n\r\n    if (!filteredToolState[imageId]) {\r\n      filteredToolState[imageId] = {};\r\n    }\r\n\r\n    const imageIdSpecificToolState = filteredToolState[imageId];\r\n\r\n    if (!imageIdSpecificToolState[toolType]) {\r\n      imageIdSpecificToolState[toolType] = {\r\n        data: [],\r\n      };\r\n    }\r\n\r\n    const measurementDataI = measurementData.find(md => md.uid === annotation.annotationUID);\r\n    const toolData = imageIdSpecificToolState[toolType].data;\r\n\r\n    let { finding } = measurementDataI;\r\n    const findingSites = [];\r\n\r\n    // NOTE -> We use the CORNERSTONEJS coding schemeDesignator which we have\r\n    // defined in the @cornerstonejs/adapters\r\n    if (measurementDataI.label) {\r\n      if (additionalFindingTypes.includes(toolType)) {\r\n        finding = {\r\n          CodeValue: 'CORNERSTONEFREETEXT',\r\n          CodingSchemeDesignator: 'CORNERSTONEJS',\r\n          CodeMeaning: measurementDataI.label,\r\n        };\r\n      } else {\r\n        findingSites.push({\r\n          CodeValue: 'CORNERSTONEFREETEXT',\r\n          CodingSchemeDesignator: 'CORNERSTONEJS',\r\n          CodeMeaning: measurementDataI.label,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (measurementDataI.findingSites) {\r\n      findingSites.push(...measurementDataI.findingSites);\r\n    }\r\n\r\n    const measurement = Object.assign({}, annotation, {\r\n      finding,\r\n      findingSites,\r\n    });\r\n\r\n    toolData.push(measurement);\r\n  }\r\n\r\n  const uidFilter = measurementData.map(md => md.uid);\r\n  const uids = uidFilter.slice();\r\n\r\n  const annotationManager = annotation.state.getAnnotationManager();\r\n  const framesOfReference = annotationManager.getFramesOfReference();\r\n\r\n  for (let i = 0; i < framesOfReference.length; i++) {\r\n    const frameOfReference = framesOfReference[i];\r\n\r\n    const frameOfReferenceAnnotations = annotationManager.getAnnotations(frameOfReference);\r\n\r\n    const toolTypes = Object.keys(frameOfReferenceAnnotations);\r\n\r\n    for (let j = 0; j < toolTypes.length; j++) {\r\n      const toolType = toolTypes[j];\r\n\r\n      const annotations = frameOfReferenceAnnotations[toolType];\r\n\r\n      if (annotations) {\r\n        for (let k = 0; k < annotations.length; k++) {\r\n          const annotation = annotations[k];\r\n          const uidIndex = uids.findIndex(uid => uid === annotation.annotationUID);\r\n\r\n          if (uidIndex !== -1) {\r\n            addToFilteredToolState(annotation, toolType);\r\n            uids.splice(uidIndex, 1);\r\n\r\n            if (!uids.length) {\r\n              return filteredToolState;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return filteredToolState;\r\n}\r\n\r\nexport default getFilteredCornerstoneToolState;\r\n","import { adaptersSR } from '@cornerstonejs/adapters';\r\n\r\nconst { CodeScheme: Cornerstone3DCodeScheme } = adaptersSR.Cornerstone3D;\r\n\r\n/**\r\n * Extracts the label from the toolData imported from dcmjs. We need to do this\r\n * as dcmjs does not depeend on OHIF/the measurementService, it just produces data for cornestoneTools.\r\n * This optional data is available for the consumer to process if they wish to.\r\n * @param {object} toolData The tooldata relating to the\r\n *\r\n * @returns {string} The extracted label.\r\n */\r\nexport default function getLabelFromDCMJSImportedToolData(toolData) {\r\n  const { findingSites = [], finding } = toolData;\r\n\r\n  let freeTextLabel = findingSites.find(\r\n    fs => fs.CodeValue === Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT\r\n  );\r\n\r\n  if (freeTextLabel) {\r\n    return freeTextLabel.CodeMeaning;\r\n  }\r\n\r\n  if (finding && finding.CodeValue === Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT) {\r\n    return finding.CodeMeaning;\r\n  }\r\n}\r\n","import { utilities, metaData } from '@cornerstonejs/core';\r\nimport OHIF, { DicomMetadataStore } from '@ohif/core';\r\nimport getLabelFromDCMJSImportedToolData from './getLabelFromDCMJSImportedToolData';\r\nimport { adaptersSR } from '@cornerstonejs/adapters';\r\nimport { annotation as CsAnnotation } from '@cornerstonejs/tools';\r\nimport { Enums as CSExtensionEnums } from '@ohif/extension-cornerstone';\r\n\r\nconst { locking } = CsAnnotation;\r\nconst { guid } = OHIF.utils;\r\nconst { MeasurementReport, CORNERSTONE_3D_TAG } = adaptersSR.Cornerstone3D;\r\nconst { CORNERSTONE_3D_TOOLS_SOURCE_NAME, CORNERSTONE_3D_TOOLS_SOURCE_VERSION } = CSExtensionEnums;\r\nconst supportedLegacyCornerstoneTags = ['cornerstoneTools@^4.0.0'];\r\n\r\nconst convertCode = (codingValues, code) => {\r\n  if (!code || code.CodingSchemeDesignator === 'CORNERSTONEJS') {\r\n    return;\r\n  }\r\n  const ref = `${code.CodingSchemeDesignator}:${code.CodeValue}`;\r\n  const ret = { ...codingValues[ref], ref, ...code, text: code.CodeMeaning };\r\n  return ret;\r\n};\r\n\r\nconst convertSites = (codingValues, sites) => {\r\n  if (!sites || !sites.length) {\r\n    return;\r\n  }\r\n  const ret = [];\r\n  // Do as a loop to convert away from Proxy instances\r\n  for (let i = 0; i < sites.length; i++) {\r\n    // Deal with irregular conversion from dcmjs\r\n    const site = convertCode(codingValues, sites[i][0] || sites[i]);\r\n    if (site) {\r\n      ret.push(site);\r\n    }\r\n  }\r\n  return (ret.length && ret) || undefined;\r\n};\r\n\r\n/**\r\n * Hydrates a structured report, for default viewports.\r\n *\r\n */\r\nexport default function hydrateStructuredReport(\r\n  { servicesManager, extensionManager, commandsManager }: withAppTypes,\r\n  displaySetInstanceUID\r\n) {\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n  const { measurementService, displaySetService, customizationService } = servicesManager.services;\r\n\r\n  const codingValues = customizationService.getCustomization('codingValues');\r\n  const disableEditing = customizationService.getCustomization('panelMeasurement.disableEditing');\r\n\r\n  const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  // TODO -> We should define a strict versioning somewhere.\r\n  const mappings = measurementService.getSourceMappings(\r\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\r\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\r\n  );\r\n\r\n  if (!mappings || !mappings.length) {\r\n    throw new Error(\r\n      `Attempting to hydrate measurements service when no mappings present. This shouldn't be reached.`\r\n    );\r\n  }\r\n\r\n  const instance = DicomMetadataStore.getInstance(\r\n    displaySet.StudyInstanceUID,\r\n    displaySet.SeriesInstanceUID,\r\n    displaySet.SOPInstanceUID\r\n  );\r\n\r\n  const sopInstanceUIDToImageId = {};\r\n  const imageIdsForToolState = {};\r\n\r\n  displaySet.measurements.forEach(measurement => {\r\n    const { ReferencedSOPInstanceUID, imageId, frameNumber } = measurement;\r\n\r\n    if (!sopInstanceUIDToImageId[ReferencedSOPInstanceUID]) {\r\n      sopInstanceUIDToImageId[ReferencedSOPInstanceUID] = imageId;\r\n      imageIdsForToolState[ReferencedSOPInstanceUID] = [];\r\n    }\r\n    if (!imageIdsForToolState[ReferencedSOPInstanceUID][frameNumber]) {\r\n      imageIdsForToolState[ReferencedSOPInstanceUID][frameNumber] = imageId;\r\n    }\r\n  });\r\n\r\n  // Mapping of legacy datasets is now directly handled by adapters module\r\n  const datasetToUse = instance;\r\n\r\n  // Use dcmjs to generate toolState.\r\n  let storedMeasurementByAnnotationType = MeasurementReport.generateToolState(\r\n    datasetToUse,\r\n    // NOTE: we need to pass in the imageIds to dcmjs since the we use them\r\n    // for the imageToWorld transformation. The following assumes that the order\r\n    // that measurements were added to the display set are the same order as\r\n    // the measurementGroups in the instance.\r\n    sopInstanceUIDToImageId,\r\n    utilities.imageToWorldCoords,\r\n    metaData\r\n  );\r\n\r\n  const onBeforeSRHydration = customizationService.getCustomization('onBeforeSRHydration')?.value;\r\n\r\n  if (typeof onBeforeSRHydration === 'function') {\r\n    storedMeasurementByAnnotationType = onBeforeSRHydration({\r\n      storedMeasurementByAnnotationType,\r\n      displaySet,\r\n    });\r\n  }\r\n\r\n  // Filter what is found by DICOM SR to measurements we support.\r\n  const mappingDefinitions = mappings.map(m => m.annotationType);\r\n  const hydratableMeasurementsInSR = {};\r\n\r\n  Object.keys(storedMeasurementByAnnotationType).forEach(key => {\r\n    if (mappingDefinitions.includes(key)) {\r\n      hydratableMeasurementsInSR[key] = storedMeasurementByAnnotationType[key];\r\n    }\r\n  });\r\n\r\n  // Set the series touched as tracked.\r\n  const imageIds = [];\r\n\r\n  // TODO: notification if no hydratable?\r\n  Object.keys(hydratableMeasurementsInSR).forEach(annotationType => {\r\n    const toolDataForAnnotationType = hydratableMeasurementsInSR[annotationType];\r\n\r\n    toolDataForAnnotationType.forEach(toolData => {\r\n      // Add the measurement to toolState\r\n      // dcmjs and Cornerstone3D has structural defect in supporting multi-frame\r\n      // files, and looking up the imageId from sopInstanceUIDToImageId results\r\n      // in the wrong value.\r\n      const frameNumber = (toolData.annotation.data && toolData.annotation.data.frameNumber) || 1;\r\n      const imageId =\r\n        imageIdsForToolState[toolData.sopInstanceUid][frameNumber] ||\r\n        sopInstanceUIDToImageId[toolData.sopInstanceUid];\r\n\r\n      if (!imageIds.includes(imageId)) {\r\n        imageIds.push(imageId);\r\n      }\r\n    });\r\n  });\r\n\r\n  let targetStudyInstanceUID;\r\n  const SeriesInstanceUIDs = [];\r\n\r\n  for (let i = 0; i < imageIds.length; i++) {\r\n    const imageId = imageIds[i];\r\n    const { SeriesInstanceUID, StudyInstanceUID } = metaData.get('instance', imageId);\r\n\r\n    if (!SeriesInstanceUIDs.includes(SeriesInstanceUID)) {\r\n      SeriesInstanceUIDs.push(SeriesInstanceUID);\r\n    }\r\n\r\n    if (!targetStudyInstanceUID) {\r\n      targetStudyInstanceUID = StudyInstanceUID;\r\n    } else if (targetStudyInstanceUID !== StudyInstanceUID) {\r\n      console.warn('NO SUPPORT FOR SRs THAT HAVE MEASUREMENTS FROM MULTIPLE STUDIES.');\r\n    }\r\n  }\r\n\r\n  Object.keys(hydratableMeasurementsInSR).forEach(annotationType => {\r\n    const toolDataForAnnotationType = hydratableMeasurementsInSR[annotationType];\r\n\r\n    toolDataForAnnotationType.forEach(toolData => {\r\n      // Add the measurement to toolState\r\n      // dcmjs and Cornerstone3D has structural defect in supporting multi-frame\r\n      // files, and looking up the imageId from sopInstanceUIDToImageId results\r\n      // in the wrong value.\r\n      const frameNumber = (toolData.annotation.data && toolData.annotation.data.frameNumber) || 1;\r\n      const imageId =\r\n        imageIdsForToolState[toolData.sopInstanceUid][frameNumber] ||\r\n        sopInstanceUIDToImageId[toolData.sopInstanceUid];\r\n\r\n      toolData.uid = guid();\r\n\r\n      const instance = metaData.get('instance', imageId);\r\n      const {\r\n        FrameOfReferenceUID,\r\n        // SOPInstanceUID,\r\n        // SeriesInstanceUID,\r\n        // StudyInstanceUID,\r\n      } = instance;\r\n\r\n      const annotation = {\r\n        annotationUID: toolData.annotation.annotationUID,\r\n        data: toolData.annotation.data,\r\n        metadata: {\r\n          toolName: annotationType,\r\n          referencedImageId: imageId,\r\n          FrameOfReferenceUID,\r\n        },\r\n      };\r\n\r\n      const source = measurementService.getSource(\r\n        CORNERSTONE_3D_TOOLS_SOURCE_NAME,\r\n        CORNERSTONE_3D_TOOLS_SOURCE_VERSION\r\n      );\r\n      annotation.data.label = getLabelFromDCMJSImportedToolData(toolData);\r\n      annotation.data.finding = convertCode(codingValues, toolData.finding?.[0]);\r\n      annotation.data.findingSites = convertSites(codingValues, toolData.findingSites);\r\n      annotation.data.findingSites?.forEach(site => {\r\n        if (site.type) {\r\n          annotation.data[site.type] = site;\r\n        }\r\n      });\r\n\r\n      const matchingMapping = mappings.find(m => m.annotationType === annotationType);\r\n\r\n      const newAnnotationUID = measurementService.addRawMeasurement(\r\n        source,\r\n        annotationType,\r\n        { annotation },\r\n        matchingMapping.toMeasurementSchema,\r\n        dataSource\r\n      );\r\n\r\n      commandsManager.runCommand('updateMeasurement', {\r\n        uid: newAnnotationUID,\r\n        code: annotation.data.finding,\r\n      });\r\n\r\n      if (disableEditing) {\r\n        locking.setAnnotationLocked(newAnnotationUID, true);\r\n      }\r\n\r\n      if (!imageIds.includes(imageId)) {\r\n        imageIds.push(imageId);\r\n      }\r\n    });\r\n  });\r\n\r\n  displaySet.isHydrated = true;\r\n\r\n  return {\r\n    StudyInstanceUID: targetStudyInstanceUID,\r\n    SeriesInstanceUIDs,\r\n  };\r\n}\r\n","import { metaData, utilities } from '@cornerstonejs/core';\r\n\r\nimport OHIF, { DicomMetadataStore } from '@ohif/core';\r\nimport dcmjs from 'dcmjs';\r\nimport { adaptersSR } from '@cornerstonejs/adapters';\r\n\r\nimport getFilteredCornerstoneToolState from './utils/getFilteredCornerstoneToolState';\r\nimport hydrateStructuredReport from './utils/hydrateStructuredReport';\r\n\r\nconst { MeasurementReport } = adaptersSR.Cornerstone3D;\r\nconst { log } = OHIF;\r\n\r\n/**\r\n * @param measurementData An array of measurements from the measurements service\r\n * that you wish to serialize.\r\n * @param additionalFindingTypes toolTypes that should be stored with labels as Findings\r\n * @param options Naturalized DICOM JSON headers to merge into the displaySet.\r\n *\r\n */\r\nconst _generateReport = (measurementData, additionalFindingTypes, options = {}) => {\r\n  const filteredToolState = getFilteredCornerstoneToolState(\r\n    measurementData,\r\n    additionalFindingTypes\r\n  );\r\n\r\n  const report = MeasurementReport.generateReport(\r\n    filteredToolState,\r\n    metaData,\r\n    utilities.worldToImageCoords,\r\n    options\r\n  );\r\n\r\n  const { dataset } = report;\r\n\r\n  // Set the default character set as UTF-8\r\n  // https://dicom.innolitics.com/ciods/nm-image/sop-common/00080005\r\n  if (typeof dataset.SpecificCharacterSet === 'undefined') {\r\n    dataset.SpecificCharacterSet = 'ISO_IR 192';\r\n  }\r\n  return dataset;\r\n};\r\n\r\nconst commandsModule = (props: withAppTypes) => {\r\n  const { servicesManager, extensionManager } = props;\r\n  const { customizationService, viewportGridService, displaySetService } = servicesManager.services;\r\n\r\n  const actions = {\r\n    changeColorMeasurement: ({ uid }) => {\r\n      // When this gets supported, it probably belongs in cornerstone, not sr\r\n      throw new Error('Unsupported operation: changeColorMeasurement');\r\n      // const { color } = measurementService.getMeasurement(uid);\r\n      // const rgbaColor = {\r\n      //   r: color[0],\r\n      //   g: color[1],\r\n      //   b: color[2],\r\n      //   a: color[3] / 255.0,\r\n      // };\r\n      // colorPickerDialog(uiDialogService, rgbaColor, (newRgbaColor, actionId) => {\r\n      //   if (actionId === 'cancel') {\r\n      //     return;\r\n      //   }\r\n\r\n      //   const color = [newRgbaColor.r, newRgbaColor.g, newRgbaColor.b, newRgbaColor.a * 255.0];\r\n      // segmentationService.setSegmentColor(viewportId, segmentationId, segmentIndex, color);\r\n      // });\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param measurementData An array of measurements from the measurements service\r\n     * @param additionalFindingTypes toolTypes that should be stored with labels as Findings\r\n     * @param options Naturalized DICOM JSON headers to merge into the displaySet.\r\n     * as opposed to Finding Sites.\r\n     * that you wish to serialize.\r\n     */\r\n    downloadReport: ({ measurementData, additionalFindingTypes, options = {} }) => {\r\n      const srDataset = _generateReport(measurementData, additionalFindingTypes, options);\r\n      const reportBlob = dcmjs.data.datasetToBlob(srDataset);\r\n\r\n      //Create a URL for the binary.\r\n      const objectUrl = URL.createObjectURL(reportBlob);\r\n      window.location.assign(objectUrl);\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param measurementData An array of measurements from the measurements service\r\n     * that you wish to serialize.\r\n     * @param dataSource The dataSource that you wish to use to persist the data.\r\n     * @param additionalFindingTypes toolTypes that should be stored with labels as Findings\r\n     * @param options Naturalized DICOM JSON headers to merge into the displaySet.\r\n     * @return The naturalized report\r\n     */\r\n    storeMeasurements: async ({\r\n      measurementData,\r\n      dataSource,\r\n      additionalFindingTypes,\r\n      options = {},\r\n    }) => {\r\n      // Use the @cornerstonejs adapter for converting to/from DICOM\r\n      // But it is good enough for now whilst we only have cornerstone as a datasource.\r\n      log.info('[DICOMSR] storeMeasurements');\r\n\r\n      if (!dataSource || !dataSource.store || !dataSource.store.dicom) {\r\n        log.error('[DICOMSR] datasource has no dataSource.store.dicom endpoint!');\r\n        return Promise.reject({});\r\n      }\r\n\r\n      try {\r\n        const naturalizedReport = _generateReport(measurementData, additionalFindingTypes, options);\r\n\r\n        const { StudyInstanceUID, ContentSequence } = naturalizedReport;\r\n        // The content sequence has 5 or more elements, of which\r\n        // the `[4]` element contains the annotation data, so this is\r\n        // checking that there is some annotation data present.\r\n        if (!ContentSequence?.[4].ContentSequence?.length) {\r\n          console.log('naturalizedReport missing imaging content', naturalizedReport);\r\n          throw new Error('Invalid report, no content');\r\n        }\r\n\r\n        const onBeforeDicomStore = customizationService.getCustomization('onBeforeDicomStore');\r\n\r\n        let dicomDict;\r\n        if (typeof onBeforeDicomStore === 'function') {\r\n          dicomDict = onBeforeDicomStore({ dicomDict, measurementData, naturalizedReport });\r\n        }\r\n\r\n        await dataSource.store.dicom(naturalizedReport, null, dicomDict);\r\n\r\n        if (StudyInstanceUID) {\r\n          dataSource.deleteStudyMetadataPromise(StudyInstanceUID);\r\n        }\r\n\r\n        // The \"Mode\" route listens for DicomMetadataStore changes\r\n        // When a new instance is added, it listens and\r\n        // automatically calls makeDisplaySets\r\n        DicomMetadataStore.addInstances([naturalizedReport], true);\r\n\r\n        return naturalizedReport;\r\n      } catch (error) {\r\n        console.warn(error);\r\n        log.error(`[DICOMSR] Error while saving the measurements: ${error.message}`);\r\n        throw new Error(error.message || 'Error while saving the measurements.');\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Loads measurements by hydrating and loading the SR for the given display set instance UID\r\n     * and displays it in the active viewport.\r\n     */\r\n    loadSRMeasurements: ({ displaySetInstanceUID }) => {\r\n      const { SeriesInstanceUIDs } = hydrateStructuredReport(\r\n        { servicesManager, extensionManager, commandsManager },\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      const displaySets = displaySetService.getDisplaySetsForSeries(SeriesInstanceUIDs[0]);\r\n      if (displaySets.length) {\r\n        viewportGridService.setDisplaySetsForViewports([\r\n          {\r\n            viewportId: viewportGridService.getActiveViewportId(),\r\n            displaySetInstanceUIDs: [displaySets[0].displaySetInstanceUID],\r\n          },\r\n        ]);\r\n      }\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    downloadReport: {\r\n      commandFn: actions.downloadReport,\r\n    },\r\n    storeMeasurements: {\r\n      commandFn: actions.storeMeasurements,\r\n    },\r\n    loadSRMeasurements: {\r\n      commandFn: actions.loadSRMeasurements,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'CORNERSTONE_STRUCTURED_REPORT',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","import { Types, metaData, utilities as csUtils } from '@cornerstonejs/core';\r\nimport {\r\n  AnnotationTool,\r\n  annotation,\r\n  drawing,\r\n  utilities,\r\n  Types as cs3DToolsTypes,\r\n} from '@cornerstonejs/tools';\r\nimport { getTrackingUniqueIdentifiersForElement } from './modules/dicomSRModule';\r\nimport { SCOORDTypes } from '../enums';\r\nimport toolNames from './toolNames';\r\n\r\nexport default class DICOMSRDisplayTool extends AnnotationTool {\r\n  static toolName = toolNames.DICOMSRDisplay;\r\n\r\n  constructor(\r\n    toolProps = {},\r\n    defaultToolProps = {\r\n      configuration: {},\r\n    }\r\n  ) {\r\n    super(toolProps, defaultToolProps);\r\n  }\r\n\r\n  _getTextBoxLinesFromLabels(labels) {\r\n    // TODO -> max 5 for now (label + shortAxis + longAxis), need a generic solution for this!\r\n\r\n    const labelLength = Math.min(labels.length, 5);\r\n    const lines = [];\r\n\r\n    for (let i = 0; i < labelLength; i++) {\r\n      const labelEntry = labels[i];\r\n      lines.push(`${_labelToShorthand(labelEntry.label)}: ${labelEntry.value}`);\r\n    }\r\n\r\n    return lines;\r\n  }\r\n\r\n  // This tool should not inherit from AnnotationTool and we should not need\r\n  // to add the following lines.\r\n  isPointNearTool = () => null;\r\n  getHandleNearImagePoint = () => null;\r\n\r\n  renderAnnotation = (enabledElement: Types.IEnabledElement, svgDrawingHelper: any): void => {\r\n    const { viewport } = enabledElement;\r\n    const { element } = viewport;\r\n\r\n    let annotations = annotation.state.getAnnotations(this.getToolName(), element);\r\n\r\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\r\n    if (!annotations?.length) {\r\n      return;\r\n    }\r\n\r\n    annotations = this.filterInteractableAnnotationsForElement(element, annotations);\r\n\r\n    if (!annotations?.length) {\r\n      return;\r\n    }\r\n\r\n    const trackingUniqueIdentifiersForElement = getTrackingUniqueIdentifiersForElement(element);\r\n\r\n    const { activeIndex, trackingUniqueIdentifiers } = trackingUniqueIdentifiersForElement;\r\n\r\n    const activeTrackingUniqueIdentifier = trackingUniqueIdentifiers[activeIndex];\r\n\r\n    // Filter toolData to only render the data for the active SR.\r\n    const filteredAnnotations = annotations.filter(annotation =>\r\n      trackingUniqueIdentifiers.includes(annotation.data?.TrackingUniqueIdentifier)\r\n    );\r\n\r\n    if (!viewport._actors?.size) {\r\n      return;\r\n    }\r\n\r\n    const styleSpecifier: cs3DToolsTypes.AnnotationStyle.StyleSpecifier = {\r\n      toolGroupId: this.toolGroupId,\r\n      toolName: this.getToolName(),\r\n      viewportId: enabledElement.viewport.id,\r\n    };\r\n    const { style: annotationStyle } = annotation.config;\r\n\r\n    for (let i = 0; i < filteredAnnotations.length; i++) {\r\n      const annotation = filteredAnnotations[i];\r\n      const annotationUID = annotation.annotationUID;\r\n      const { renderableData, TrackingUniqueIdentifier } = annotation.data;\r\n      const { referencedImageId } = annotation.metadata;\r\n\r\n      styleSpecifier.annotationUID = annotationUID;\r\n\r\n      const groupStyle = annotationStyle.getToolGroupToolStyles(this.toolGroupId)[\r\n        this.getToolName()\r\n      ];\r\n\r\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\r\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\r\n      const color =\r\n        TrackingUniqueIdentifier === activeTrackingUniqueIdentifier\r\n          ? 'rgb(0, 255, 0)'\r\n          : this.getStyle('color', styleSpecifier, annotation);\r\n\r\n      const options = {\r\n        color,\r\n        lineDash,\r\n        lineWidth,\r\n        ...groupStyle,\r\n      };\r\n\r\n      Object.keys(renderableData).forEach(GraphicType => {\r\n        const renderableDataForGraphicType = renderableData[GraphicType];\r\n\r\n        let renderMethod;\r\n        let canvasCoordinatesAdapter;\r\n\r\n        switch (GraphicType) {\r\n          case SCOORDTypes.POINT:\r\n            renderMethod = this.renderPoint;\r\n            break;\r\n          case SCOORDTypes.MULTIPOINT:\r\n            renderMethod = this.renderMultipoint;\r\n            break;\r\n          case SCOORDTypes.POLYLINE:\r\n            renderMethod = this.renderPolyLine;\r\n            break;\r\n          case SCOORDTypes.CIRCLE:\r\n            renderMethod = this.renderEllipse;\r\n            break;\r\n          case SCOORDTypes.ELLIPSE:\r\n            renderMethod = this.renderEllipse;\r\n            canvasCoordinatesAdapter = utilities.math.ellipse.getCanvasEllipseCorners;\r\n            break;\r\n          default:\r\n            throw new Error(`Unsupported GraphicType: ${GraphicType}`);\r\n        }\r\n\r\n        const canvasCoordinates = renderMethod(\r\n          svgDrawingHelper,\r\n          viewport,\r\n          renderableDataForGraphicType,\r\n          annotationUID,\r\n          referencedImageId,\r\n          options\r\n        );\r\n\r\n        this.renderTextBox(\r\n          svgDrawingHelper,\r\n          viewport,\r\n          canvasCoordinates,\r\n          canvasCoordinatesAdapter,\r\n          annotation,\r\n          styleSpecifier,\r\n          options\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  renderPolyLine(\r\n    svgDrawingHelper,\r\n    viewport,\r\n    renderableData,\r\n    annotationUID,\r\n    referencedImageId,\r\n    options\r\n  ) {\r\n    const drawingOptions = {\r\n      color: options.color,\r\n      width: options.lineWidth,\r\n      lineDash: options.lineDash,\r\n    };\r\n    let allCanvasCoordinates = [];\r\n    renderableData.map((data, index) => {\r\n      const canvasCoordinates = data.map(p => viewport.worldToCanvas(p));\r\n      const lineUID = `${index}`;\r\n\r\n      if (canvasCoordinates.length === 2) {\r\n        drawing.drawLine(\r\n          svgDrawingHelper,\r\n          annotationUID,\r\n          lineUID,\r\n          canvasCoordinates[0],\r\n          canvasCoordinates[1],\r\n          drawingOptions\r\n        );\r\n      } else {\r\n        drawing.drawPolyline(\r\n          svgDrawingHelper,\r\n          annotationUID,\r\n          lineUID,\r\n          canvasCoordinates,\r\n          drawingOptions\r\n        );\r\n      }\r\n\r\n      allCanvasCoordinates = allCanvasCoordinates.concat(canvasCoordinates);\r\n    });\r\n\r\n    return allCanvasCoordinates; // used for drawing textBox\r\n  }\r\n\r\n  renderMultipoint(\r\n    svgDrawingHelper,\r\n    viewport,\r\n    renderableData,\r\n    annotationUID,\r\n    referencedImageId,\r\n    options\r\n  ) {\r\n    let canvasCoordinates;\r\n    renderableData.map((data, index) => {\r\n      canvasCoordinates = data.map(p => viewport.worldToCanvas(p));\r\n      const handleGroupUID = '0';\r\n      drawing.drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\r\n        color: options.color,\r\n      });\r\n    });\r\n  }\r\n\r\n  renderPoint(\r\n    svgDrawingHelper,\r\n    viewport,\r\n    renderableData,\r\n    annotationUID,\r\n    referencedImageId,\r\n    options\r\n  ) {\r\n    const canvasCoordinates = [];\r\n    renderableData.map((data, index) => {\r\n      const point = data[0];\r\n      // This gives us one point for arrow\r\n      canvasCoordinates.push(viewport.worldToCanvas(point));\r\n\r\n      if (data[1] !== undefined) {\r\n        canvasCoordinates.push(viewport.worldToCanvas(data[1]));\r\n      }\r\n      else{\r\n         // We get the other point for the arrow by using the image size\r\n      const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\r\n\r\n      let xOffset = 10;\r\n      let yOffset = 10;\r\n\r\n      if (imagePixelModule) {\r\n        const { columns, rows } = imagePixelModule;\r\n        xOffset = columns / 10;\r\n        yOffset = rows / 10;\r\n      }\r\n\r\n      const imagePoint = csUtils.worldToImageCoords(referencedImageId, point);\r\n      const arrowEnd = csUtils.imageToWorldCoords(referencedImageId, [\r\n        imagePoint[0] + xOffset,\r\n        imagePoint[1] + yOffset,\r\n      ]);\r\n\r\n      canvasCoordinates.push(viewport.worldToCanvas(arrowEnd));\r\n        \r\n      }\r\n     \r\n\r\n      const arrowUID = `${index}`;\r\n\r\n      // Todo: handle drawing probe as probe, currently we are drawing it as an arrow\r\n      drawing.drawArrow(\r\n        svgDrawingHelper,\r\n        annotationUID,\r\n        arrowUID,\r\n        canvasCoordinates[1],\r\n        canvasCoordinates[0],\r\n        {\r\n          color: options.color,\r\n          width: options.lineWidth,\r\n        }\r\n      );\r\n    });\r\n\r\n    return canvasCoordinates; // used for drawing textBox\r\n  }\r\n\r\n  renderEllipse(\r\n    svgDrawingHelper,\r\n    viewport,\r\n    renderableData,\r\n    annotationUID,\r\n    referencedImageId,\r\n    options\r\n  ) {\r\n    let canvasCoordinates;\r\n    renderableData.map((data, index) => {\r\n      if (data.length === 0) {\r\n        // since oblique ellipse is not supported for hydration right now\r\n        // we just return\r\n        return;\r\n      }\r\n\r\n      const ellipsePointsWorld = data;\r\n\r\n      const rotation = viewport.getRotation();\r\n\r\n      canvasCoordinates = ellipsePointsWorld.map(p => viewport.worldToCanvas(p));\r\n      let canvasCorners;\r\n      if (rotation == 90 || rotation == 270) {\r\n        canvasCorners = utilities.math.ellipse.getCanvasEllipseCorners([\r\n          canvasCoordinates[2],\r\n          canvasCoordinates[3],\r\n          canvasCoordinates[0],\r\n          canvasCoordinates[1],\r\n        ]) as Array<Types.Point2>;\r\n      } else {\r\n        canvasCorners = utilities.math.ellipse.getCanvasEllipseCorners(\r\n          canvasCoordinates\r\n        ) as Array<Types.Point2>;\r\n      }\r\n\r\n      const lineUID = `${index}`;\r\n      drawing.drawEllipse(\r\n        svgDrawingHelper,\r\n        annotationUID,\r\n        lineUID,\r\n        canvasCorners[0],\r\n        canvasCorners[1],\r\n        {\r\n          color: options.color,\r\n          width: options.lineWidth,\r\n          lineDash: options.lineDash,\r\n        }\r\n      );\r\n    });\r\n\r\n    return canvasCoordinates;\r\n  }\r\n\r\n  renderTextBox(\r\n    svgDrawingHelper,\r\n    viewport,\r\n    canvasCoordinates,\r\n    canvasCoordinatesAdapter,\r\n    annotation,\r\n    styleSpecifier,\r\n    options = {}\r\n  ) {\r\n    if (!canvasCoordinates || !annotation) {\r\n      return;\r\n    }\r\n\r\n    const { annotationUID, data = {} } = annotation;\r\n    const { labels } = data;\r\n    const { color } = options;\r\n\r\n    let adaptedCanvasCoordinates = canvasCoordinates;\r\n    // adapt coordinates if there is an adapter\r\n    if (typeof canvasCoordinatesAdapter === 'function') {\r\n      adaptedCanvasCoordinates = canvasCoordinatesAdapter(canvasCoordinates);\r\n    }\r\n    const textLines = this._getTextBoxLinesFromLabels(labels);\r\n    const canvasTextBoxCoords = utilities.drawing.getTextBoxCoordsCanvas(adaptedCanvasCoordinates);\r\n\r\n    if (!annotation.data?.handles?.textBox?.worldPosition) {\r\n      annotation.data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);\r\n    }\r\n\r\n    const textBoxPosition = viewport.worldToCanvas(annotation.data.handles.textBox.worldPosition);\r\n\r\n    const textBoxUID = '1';\r\n    const textBoxOptions = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\r\n\r\n    const boundingBox = drawing.drawLinkedTextBox(\r\n      svgDrawingHelper,\r\n      annotationUID,\r\n      textBoxUID,\r\n      textLines,\r\n      textBoxPosition,\r\n      canvasCoordinates,\r\n      {},\r\n      {\r\n        ...textBoxOptions,\r\n        color,\r\n      }\r\n    );\r\n\r\n    const { x: left, y: top, width, height } = boundingBox;\r\n\r\n    annotation.data.handles.textBox.worldBoundingBox = {\r\n      topLeft: viewport.canvasToWorld([left, top]),\r\n      topRight: viewport.canvasToWorld([left + width, top]),\r\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\r\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\r\n    };\r\n  }\r\n}\r\n\r\nconst SHORT_HAND_MAP = {\r\n  'Short Axis': 'W: ',\r\n  'Long Axis': 'L: ',\r\n  AREA: 'Area: ',\r\n  Length: '',\r\n  CORNERSTONEFREETEXT: '',\r\n};\r\n\r\nfunction _labelToShorthand(label) {\r\n  const shortHand = SHORT_HAND_MAP[label];\r\n\r\n  if (shortHand !== undefined) {\r\n    return shortHand;\r\n  }\r\n\r\n  return label;\r\n}\r\n","import { Types, metaData, utilities as csUtils } from '@cornerstonejs/core';\r\nimport {\r\n  annotation,\r\n  drawing,\r\n  utilities,\r\n  Types as cs3DToolsTypes,\r\n  AnnotationDisplayTool,\r\n} from '@cornerstonejs/tools';\r\nimport toolNames from './toolNames';\r\nimport { Annotation } from '@cornerstonejs/tools/dist/types/types';\r\n\r\nexport default class SCOORD3DPointTool extends AnnotationDisplayTool {\r\n  static toolName = toolNames.SRSCOORD3DPoint;\r\n\r\n  constructor(\r\n    toolProps = {},\r\n    defaultToolProps = {\r\n      configuration: {},\r\n    }\r\n  ) {\r\n    super(toolProps, defaultToolProps);\r\n  }\r\n\r\n  _getTextBoxLinesFromLabels(labels) {\r\n    // TODO -> max 5 for now (label + shortAxis + longAxis), need a generic solution for this!\r\n\r\n    const labelLength = Math.min(labels.length, 5);\r\n    const lines = [];\r\n\r\n    return lines;\r\n  }\r\n\r\n  // This tool should not inherit from AnnotationTool and we should not need\r\n  // to add the following lines.\r\n  isPointNearTool = () => null;\r\n  getHandleNearImagePoint = () => null;\r\n\r\n  renderAnnotation = (enabledElement: Types.IEnabledElement, svgDrawingHelper: any): void => {\r\n    const { viewport } = enabledElement;\r\n    const { element } = viewport;\r\n\r\n    const annotations = annotation.state.getAnnotations(this.getToolName(), element);\r\n\r\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\r\n    if (!annotations?.length) {\r\n      return;\r\n    }\r\n\r\n    // Filter toolData to only render the data for the active SR.\r\n    const filteredAnnotations = annotations;\r\n    if (!viewport._actors?.size) {\r\n      return;\r\n    }\r\n\r\n    const styleSpecifier: cs3DToolsTypes.AnnotationStyle.StyleSpecifier = {\r\n      toolGroupId: this.toolGroupId,\r\n      toolName: this.getToolName(),\r\n      viewportId: enabledElement.viewport.id,\r\n    };\r\n\r\n    for (let i = 0; i < filteredAnnotations.length; i++) {\r\n      const annotation = filteredAnnotations[i];\r\n\r\n      const annotationUID = annotation.annotationUID;\r\n      const { renderableData } = annotation.data;\r\n      const { POINT: points } = renderableData;\r\n\r\n      styleSpecifier.annotationUID = annotationUID;\r\n\r\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\r\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\r\n      const color = this.getStyle('color', styleSpecifier, annotation);\r\n\r\n      const options = {\r\n        color,\r\n        lineDash,\r\n        lineWidth,\r\n      };\r\n\r\n      const point = points[0][0];\r\n\r\n      // check if viewport can render it\r\n      const viewable = viewport.isReferenceViewable(\r\n        { FrameOfReferenceUID: annotation.metadata.FrameOfReferenceUID, cameraFocalPoint: point },\r\n        { asNearbyProjection: true }\r\n      );\r\n\r\n      if (!viewable) {\r\n        continue;\r\n      }\r\n\r\n      // render the point\r\n      const arrowPointCanvas = viewport.worldToCanvas(point);\r\n      // Todo: configure this\r\n      const arrowEndCanvas = [arrowPointCanvas[0] + 20, arrowPointCanvas[1] + 20];\r\n      const canvasCoordinates = [arrowPointCanvas, arrowEndCanvas];\r\n\r\n      drawing.drawArrow(\r\n        svgDrawingHelper,\r\n        annotationUID,\r\n        '1',\r\n        canvasCoordinates[1],\r\n        canvasCoordinates[0],\r\n        {\r\n          color: options.color,\r\n          width: options.lineWidth,\r\n        }\r\n      );\r\n\r\n      this.renderTextBox(\r\n        svgDrawingHelper,\r\n        viewport,\r\n        canvasCoordinates,\r\n        annotation,\r\n        styleSpecifier,\r\n        options\r\n      );\r\n    }\r\n  };\r\n\r\n  renderTextBox(\r\n    svgDrawingHelper,\r\n    viewport,\r\n    canvasCoordinates,\r\n    annotation,\r\n    styleSpecifier,\r\n    options = {}\r\n  ) {\r\n    if (!canvasCoordinates || !annotation) {\r\n      return;\r\n    }\r\n\r\n    const { annotationUID, data = {} } = annotation;\r\n    const { labels } = data;\r\n\r\n    const textLines = [];\r\n\r\n    for (const label of labels) {\r\n      // make this generic\r\n      // fix this\r\n      if (label.label === '363698007') {\r\n        textLines.push(`Finding Site: ${label.value}`);\r\n      }\r\n    }\r\n\r\n    const { color } = options;\r\n\r\n    const adaptedCanvasCoordinates = canvasCoordinates;\r\n    // adapt coordinates if there is an adapter\r\n    const canvasTextBoxCoords = utilities.drawing.getTextBoxCoordsCanvas(adaptedCanvasCoordinates);\r\n\r\n    if (!annotation.data?.handles?.textBox?.worldPosition) {\r\n      annotation.data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);\r\n    }\r\n\r\n    const textBoxPosition = viewport.worldToCanvas(annotation.data.handles.textBox.worldPosition);\r\n\r\n    const textBoxUID = '1';\r\n    const textBoxOptions = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\r\n\r\n    const boundingBox = drawing.drawLinkedTextBox(\r\n      svgDrawingHelper,\r\n      annotationUID,\r\n      textBoxUID,\r\n      textLines,\r\n      textBoxPosition,\r\n      canvasCoordinates,\r\n      {},\r\n      {\r\n        ...textBoxOptions,\r\n        color,\r\n      }\r\n    );\r\n\r\n    const { x: left, y: top, width, height } = boundingBox;\r\n\r\n    annotation.data.handles.textBox.worldBoundingBox = {\r\n      topLeft: viewport.canvasToWorld([left, top]),\r\n      topRight: viewport.canvasToWorld([left + width, top]),\r\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\r\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\r\n    };\r\n  }\r\n\r\n  public getLinkedTextBoxStyle(\r\n    specifications: cs3DToolsTypes.AnnotationStyle.StyleSpecifier,\r\n    annotation?: Annotation\r\n  ): Record<string, unknown> {\r\n    // Todo: this function can be used to set different styles for different toolMode\r\n    // for the textBox.\r\n\r\n    return {\r\n      visibility: this.getStyle('textBoxVisibility', specifications, annotation),\r\n      fontFamily: this.getStyle('textBoxFontFamily', specifications, annotation),\r\n      fontSize: this.getStyle('textBoxFontSize', specifications, annotation),\r\n      color: this.getStyle('textBoxColor', specifications, annotation),\r\n      shadow: this.getStyle('textBoxShadow', specifications, annotation),\r\n      background: this.getStyle('textBoxBackground', specifications, annotation),\r\n      lineWidth: this.getStyle('textBoxLinkLineWidth', specifications, annotation),\r\n      lineDash: this.getStyle('textBoxLinkLineDash', specifications, annotation),\r\n    };\r\n  }\r\n}\r\n","const SRSCOOR3DProbe = {\r\n  toAnnotation: measurement => {},\r\n\r\n  /**\r\n   * Maps cornerstone annotation event data to measurement service format.\r\n   *\r\n   * @param {Object} cornerstone Cornerstone event data\r\n   * @return {Measurement} Measurement instance\r\n   */\r\n  toMeasurement: (\r\n    csToolsEventDetail,\r\n    displaySetService,\r\n    CornerstoneViewportService,\r\n    getValueTypeFromToolType,\r\n    customizationService\r\n  ) => {\r\n    const { annotation } = csToolsEventDetail;\r\n    const { metadata, data, annotationUID } = annotation;\r\n\r\n    if (!metadata || !data) {\r\n      console.warn('Probe tool: Missing metadata or data');\r\n      return null;\r\n    }\r\n\r\n    const { toolName } = metadata;\r\n    const { points } = data.handles;\r\n\r\n    const displayText = getDisplayText(annotation);\r\n    return {\r\n      uid: annotationUID,\r\n      points,\r\n      metadata,\r\n      toolName: metadata.toolName,\r\n      label: data.label,\r\n      displayText: displayText,\r\n      data: data.cachedStats,\r\n      type: getValueTypeFromToolType?.(toolName) ?? null,\r\n    };\r\n  },\r\n};\r\n\r\nfunction getDisplayText(annotation) {\r\n  const { data } = annotation;\r\n\r\n  if (!data) {\r\n    return [''];\r\n  }\r\n  const { labels } = data;\r\n\r\n  const displayText = [];\r\n\r\n  for (const label of labels) {\r\n    // make this generic\r\n    if (label.label === '33636980076') {\r\n      displayText.push(`Finding Site: ${label.value}`);\r\n    }\r\n  }\r\n\r\n  return displayText;\r\n}\r\n\r\nexport default SRSCOOR3DProbe;\r\n","import { addTool } from '@cornerstonejs/tools';\r\n\r\nexport default function addToolInstance(name: string, toolClass, configuration = {}): void {\r\n  class InstanceClass extends toolClass {\r\n    static toolName = name;\r\n    constructor(toolProps, defaultToolProps) {\r\n      toolProps.configuration = toolProps.configuration\r\n        ? { ...toolProps.configuration, ...configuration }\r\n        : configuration;\r\n      super(toolProps, defaultToolProps);\r\n    }\r\n  }\r\n  addTool(InstanceClass);\r\n}\r\n","import {\r\n  AngleTool,\r\n  annotation,\r\n  ArrowAnnotateTool,\r\n  BidirectionalTool,\r\n  CobbAngleTool,\r\n  EllipticalROITool,\r\n  CircleROITool,\r\n  LengthTool,\r\n  PlanarFreehandROITool,\r\n  RectangleROITool,\r\n  utilities as csToolsUtils,\r\n} from '@cornerstonejs/tools';\r\nimport { Types, MeasurementService } from '@ohif/core';\r\nimport { StackViewport, utilities as csUtils } from '@cornerstonejs/core';\r\nimport { Enums as CSExtensionEnums } from '@ohif/extension-cornerstone';\r\nimport DICOMSRDisplayTool from './tools/DICOMSRDisplayTool';\r\nimport SCOORD3DPointTool from './tools/SCOORD3DPointTool';\r\nimport SRSCOOR3DProbeMapper from './utils/SRSCOOR3DProbeMapper';\r\nimport addToolInstance from './utils/addToolInstance';\r\nimport toolNames from './tools/toolNames';\r\n\r\nconst { CORNERSTONE_3D_TOOLS_SOURCE_NAME, CORNERSTONE_3D_TOOLS_SOURCE_VERSION } = CSExtensionEnums;\r\n\r\n/**\r\n * @param {object} configuration\r\n */\r\nexport default function init({\r\n  configuration = {},\r\n  servicesManager,\r\n}: Types.Extensions.ExtensionParams): void {\r\n  const { measurementService, cornerstoneViewportService } = servicesManager.services;\r\n\r\n  addToolInstance(toolNames.DICOMSRDisplay, DICOMSRDisplayTool);\r\n  addToolInstance(toolNames.SRLength, LengthTool);\r\n  addToolInstance(toolNames.SRBidirectional, BidirectionalTool);\r\n  addToolInstance(toolNames.SREllipticalROI, EllipticalROITool);\r\n  addToolInstance(toolNames.SRCircleROI, CircleROITool);\r\n  addToolInstance(toolNames.SRArrowAnnotate, ArrowAnnotateTool);\r\n  addToolInstance(toolNames.SRAngle, AngleTool);\r\n  addToolInstance(toolNames.SRPlanarFreehandROI, PlanarFreehandROITool);\r\n  addToolInstance(toolNames.SRRectangleROI, RectangleROITool);\r\n  addToolInstance(toolNames.SRSCOORD3DPoint, SCOORD3DPointTool);\r\n\r\n  // TODO - fix the SR display of Cobb Angle, as it joins the two lines\r\n  addToolInstance(toolNames.SRCobbAngle, CobbAngleTool);\r\n\r\n  const csTools3DVer1MeasurementSource = measurementService.getSource(\r\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\r\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\r\n  );\r\n\r\n  const { POINT } = measurementService.VALUE_TYPES;\r\n\r\n  measurementService.addMapping(\r\n    csTools3DVer1MeasurementSource,\r\n    'SRSCOORD3DPoint',\r\n    POINT,\r\n    SRSCOOR3DProbeMapper.toAnnotation,\r\n    SRSCOOR3DProbeMapper.toMeasurement\r\n  );\r\n\r\n  // Modify annotation tools to use dashed lines on SR\r\n  const dashedLine = {\r\n    lineDash: '4,4',\r\n  };\r\n  annotation.config.style.setToolGroupToolStyles('SRToolGroup', {\r\n    [toolNames.DICOMSRDisplay]: dashedLine,\r\n    SRLength: dashedLine,\r\n    SRBidirectional: dashedLine,\r\n    SREllipticalROI: dashedLine,\r\n    SRCircleROI: dashedLine,\r\n    SRArrowAnnotate: dashedLine,\r\n    SRCobbAngle: dashedLine,\r\n    SRAngle: dashedLine,\r\n    SRPlanarFreehandROI: dashedLine,\r\n    SRRectangleROI: dashedLine,\r\n    global: {},\r\n  });\r\n}\r\n","import React from 'react';\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\nimport { srProtocol } from './getHangingProtocolModule';\r\nimport onModeEnter from './onModeEnter';\r\nimport getCommandsModule from './commandsModule';\r\nimport preRegistration from './init';\r\nimport { id } from './id.js';\r\nimport toolNames from './tools/toolNames';\r\nimport hydrateStructuredReport from './utils/hydrateStructuredReport';\r\nimport createReferencedImageDisplaySet from './utils/createReferencedImageDisplaySet';\r\nimport Enums from './enums';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './components/OHIFCornerstoneSRViewport');\r\n});\r\n\r\nconst OHIFCornerstoneSRViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n */\r\nconst dicomSRExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n\r\n  onModeEnter,\r\n\r\n  preRegistration,\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {object} [configuration={}]\r\n   * @param {object|array} [configuration.csToolsConfig] - Passed directly to `initCornerstoneTools`\r\n   */\r\n  getViewportModule({ servicesManager, extensionManager }) {\r\n    const ExtendedOHIFCornerstoneSRViewport = props => {\r\n      return (\r\n        <OHIFCornerstoneSRViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [{ name: 'dicom-sr', component: ExtendedOHIFCornerstoneSRViewport }];\r\n  },\r\n  getCommandsModule,\r\n  getSopClassHandlerModule,\r\n  // Include dynamically computed values such as toolNames not known till instantiation\r\n  getUtilityModule({ servicesManager }) {\r\n    return [\r\n      {\r\n        name: 'tools',\r\n        exports: {\r\n          toolNames,\r\n        },\r\n      },\r\n    ];\r\n  },\r\n};\r\n\r\nexport default dicomSRExtension;\r\n\r\n// Put static exports here so they can be type checked\r\nexport { hydrateStructuredReport, createReferencedImageDisplaySet, srProtocol, Enums, toolNames };\r\n","import React from 'react';\r\n\r\nimport { SOPClassHandlerId, SOPClassHandlerId3D } from './id';\r\nimport { ViewportActionButton } from '@ohif/ui';\r\nimport i18n from '@ohif/i18n';\r\n\r\nexport default function onModeEnter({ servicesManager }) {\r\n  const { displaySetService, toolbarService } = servicesManager.services;\r\n  const displaySetCache = displaySetService.getDisplaySetCache();\r\n\r\n  const srDisplaySets = [...displaySetCache.values()].filter(\r\n    ds => ds.SOPClassHandlerId === SOPClassHandlerId || ds.SOPClassHandlerId === SOPClassHandlerId3D\r\n  );\r\n\r\n  srDisplaySets.forEach(ds => {\r\n    // New mode route, allow SRs to be hydrated again\r\n    ds.isHydrated = false;\r\n  });\r\n\r\n  toolbarService.addButtons([\r\n    {\r\n      // A base/default button for loading measurements. It is added to the toolbar below.\r\n      // Customizations to this button can be made in the mode or by another extension.\r\n      // For example, the button label can be changed and/or the command to clear\r\n      // the measurements can be dropped.\r\n      id: 'loadSRMeasurements',\r\n      component: props => (\r\n        <ViewportActionButton {...props}>{i18n.t('Common:LOAD')}</ViewportActionButton>\r\n      ),\r\n      props: {\r\n        commands: ['clearMeasurements', 'loadSRMeasurements'],\r\n      },\r\n    },\r\n  ]);\r\n\r\n  // The toolbar used in the viewport's status bar. Modes and extensions can further customize\r\n  // it to optionally add other buttons.\r\n  toolbarService.createButtonSection('loadSRMeasurements', ['loadSRMeasurements']);\r\n}\r\n","import { getEnabledElement } from '@cornerstonejs/core';\r\n\r\nconst state = {\r\n  TrackingUniqueIdentifier: null,\r\n  trackingIdentifiersByViewportId: {},\r\n};\r\n\r\n/**\r\n * This file is being used to store the per-viewport state of the SR tools,\r\n * Since, all the toolStates are added to the cornerstoneTools, when displaying the SRTools,\r\n * if there are two viewports rendering the same imageId, we don't want to show\r\n * the same SR annotation twice on irrelevant viewport, hence, we are storing the state\r\n * of the SR tools in state here, so that we can filter them later.\r\n */\r\n\r\nfunction setTrackingUniqueIdentifiersForElement(\r\n  element,\r\n  trackingUniqueIdentifiers,\r\n  activeIndex = 0\r\n) {\r\n  const enabledElement = getEnabledElement(element);\r\n  const { viewport } = enabledElement;\r\n\r\n  state.trackingIdentifiersByViewportId[viewport.id] = {\r\n    trackingUniqueIdentifiers,\r\n    activeIndex,\r\n  };\r\n}\r\n\r\nfunction setActiveTrackingUniqueIdentifierForElement(element, TrackingUniqueIdentifier) {\r\n  const enabledElement = getEnabledElement(element);\r\n  const { viewport } = enabledElement;\r\n\r\n  const trackingIdentifiersForElement = state.trackingIdentifiersByViewportId[viewport.id];\r\n\r\n  if (trackingIdentifiersForElement) {\r\n    const activeIndex = trackingIdentifiersForElement.trackingUniqueIdentifiers.findIndex(\r\n      tuid => tuid === TrackingUniqueIdentifier\r\n    );\r\n\r\n    trackingIdentifiersForElement.activeIndex = activeIndex;\r\n  }\r\n}\r\n\r\nfunction getTrackingUniqueIdentifiersForElement(element) {\r\n  const enabledElement = getEnabledElement(element);\r\n  const { viewport } = enabledElement;\r\n\r\n  if (state.trackingIdentifiersByViewportId[viewport.id]) {\r\n    return state.trackingIdentifiersByViewportId[viewport.id];\r\n  }\r\n\r\n  return { trackingUniqueIdentifiers: [] };\r\n}\r\n\r\nexport {\r\n  setTrackingUniqueIdentifiersForElement,\r\n  setActiveTrackingUniqueIdentifierForElement,\r\n  getTrackingUniqueIdentifiersForElement,\r\n};\r\n","import { DisplaySetService, classes } from '@ohif/core';\r\n\r\nconst ImageSet = classes.ImageSet;\r\n\r\nconst findInstance = (measurement, displaySetService: DisplaySetService) => {\r\n  const { displaySetInstanceUID, ReferencedSOPInstanceUID: sopUid } = measurement;\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n  if (!referencedDisplaySet.images) {\r\n    return;\r\n  }\r\n  return referencedDisplaySet.images.find(it => it.SOPInstanceUID === sopUid);\r\n};\r\n\r\n/** Finds references to display sets inside the measurements\r\n * contained within the provided display set.\r\n * @return an array of instances referenced.\r\n */\r\nconst findReferencedInstances = (displaySetService: DisplaySetService, displaySet) => {\r\n  const instances = [];\r\n  const instanceById = {};\r\n  for (const measurement of displaySet.measurements) {\r\n    const { imageId } = measurement;\r\n    if (!imageId) {\r\n      continue;\r\n    }\r\n    if (instanceById[imageId]) {\r\n      continue;\r\n    }\r\n\r\n    const instance = findInstance(measurement, displaySetService);\r\n    if (!instance) {\r\n      console.log('Measurement', measurement, 'had no instances found');\r\n      continue;\r\n    }\r\n\r\n    instanceById[imageId] = instance;\r\n    instances.push(instance);\r\n  }\r\n  return instances;\r\n};\r\n\r\n/**\r\n * Creates a new display set containing a single image instance for each\r\n * referenced image.\r\n *\r\n * @param displaySetService\r\n * @param displaySet - containing measurements referencing images.\r\n * @returns A new (registered/active) display set containing the referenced images\r\n */\r\nconst createReferencedImageDisplaySet = (displaySetService, displaySet) => {\r\n  const instances = findReferencedInstances(displaySetService, displaySet);\r\n  // This will be a  member function of the created image set\r\n  const updateInstances = function () {\r\n    this.images.splice(\r\n      0,\r\n      this.images.length,\r\n      ...findReferencedInstances(displaySetService, displaySet)\r\n    );\r\n    this.numImageFrames = this.images.length;\r\n  };\r\n\r\n  const imageSet = new ImageSet(instances);\r\n  const instance = instances[0];\r\n\r\n  if (!instance) {\r\n    return;\r\n  }\r\n\r\n  imageSet.setAttributes({\r\n    displaySetInstanceUID: imageSet.uid, // create a local alias for the imageSet UID\r\n    SeriesDate: instance.SeriesDate,\r\n    SeriesTime: instance.SeriesTime,\r\n    SeriesInstanceUID: imageSet.uid,\r\n    StudyInstanceUID: instance.StudyInstanceUID,\r\n    SeriesNumber: instance.SeriesNumber || 0,\r\n    SOPClassUID: instance.SOPClassUID,\r\n    SeriesDescription: `${displaySet.SeriesDescription} KO ${displaySet.instance.SeriesNumber}`,\r\n    Modality: 'KO',\r\n    isMultiFrame: false,\r\n    numImageFrames: instances.length,\r\n    SOPClassHandlerId: `@ohif/extension-default.sopClassHandlerModule.stack`,\r\n    isReconstructable: false,\r\n    // This object is made of multiple instances from other series\r\n    isCompositeStack: true,\r\n    madeInClient: true,\r\n    excludeFromThumbnailBrowser: true,\r\n    updateInstances,\r\n  });\r\n\r\n  displaySetService.addDisplaySets(imageSet);\r\n\r\n  return imageSet;\r\n};\r\n\r\nexport default createReferencedImageDisplaySet;\r\n"],"names":["CodeScheme","Cornerstone3DCodeScheme","adaptersSR","Cornerstone3D","SCOORDTypes","POINT","MULTIPOINT","POLYLINE","CIRCLE","ELLIPSE","CodeNameCodeSequenceValues","ImagingMeasurementReport","ImageLibrary","ImagingMeasurements","MeasurementGroup","ImageLibraryGroup","TrackingUniqueIdentifier","TrackingIdentifier","Finding","FindingSite","FindingSiteSCT","CodingSchemeDesignators","SRT","SCT","CornerstoneCodeSchemes","CodingSchemeDesignator","RelationshipType","INFERRED_FROM","CONTAINS","EPSILON","getRenderableCoords","GraphicData","ValueType","imageId","renderableData","i","length","push","worldPos","utilities","GraphicType","pointsWorld","center","onPerimeter","radius","vec3","imagePlaneModule","metaData","Error","columnCosines","rowCosines","firstAxisStart","firstAxisEnd","secondAxisStart","secondAxisEnd","majorAxisStart","majorAxisEnd","minorAxisStart","minorAxisEnd","majorAxisVec","minorAxisVec","columnCosinesVec","projectedMajorAxisOnColVec","Math","abs","projectedMinorAxisOnColVec","absoluteOfMajorDotProduct","absoluteOfMinorDotProduct","console","warn","DICOMSRDisplay","SRLength","SRBidirectional","SREllipticalROI","SRCircleROI","SRArrowAnnotate","SRAngle","SRCobbAngle","SRRectangleROI","SRPlanarFreehandROI","SRSCOORD3DPoint","addSRAnnotation","measurement","frameNumber","toolName","toolNames","coords","reduce","acc","coordProps","getRenderableData","valueType","graphicType","graphicTypePoints","frameOfReferenceUID","ReferencedFrameOfReferenceSequence","SRAnnotation","annotationUID","highlighted","isLocked","invalidated","metadata","FrameOfReferenceUID","referencedImageId","data","label","labels","value","undefined","displayText","handles","textBox","points","cachedStats","annotation","addAnnotation","debug","MeasurementReport","id","packageJson","SOPClassHandlerName","SOPClassHandlerId","SOPClassHandlerName3D","SOPClassHandlerId3D","sopClassDictionary","utils","CORNERSTONE_3D_TOOLS_SOURCE_NAME","CORNERSTONE_3D_TOOLS_SOURCE_VERSION","CSExtensionEnums","ImageSet","MetadataProvider","metadataProvider","classes","sopClassUids","BasicTextSR","EnhancedSR","ComprehensiveSR","validateSameStudyUID","uid","instances","forEach","it","StudyInstanceUID","SOPInstanceUID","addInstances","displaySetService","this","sortStudyInstances","instance","isLoaded","_getDisplaySetsFromSeries","servicesManager","extensionManager","SeriesInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","ConceptNameCodeSequence","SOPClassUID","is3DSR","Comprehensive3DSR","isImagingMeasurementReport","CodeValue","displaySet","Modality","displaySetInstanceUID","guid","referencedImages","measurements","isDerivedDisplaySet","load","async","srDisplaySet","measurementService","services","dataSources","getDataSources","dataSource","ContentSequence","retrieveBulkData","obj","parentObj","key","prop","Array","isArray","Promise","all","map","item","retrieve","bulkDataURI","BulkDataURI","Float32Array","ImagingMeasurementReportContentSequence","find","_getSequenceAsArray","ReferencedSOPSequence","ref","ReferencedSOPClassUID","ReferencedSOPInstanceUID","_getReferencedImagesList","mergedContentSequencesByTrackingUniqueIdentifiers","MeasurementGroups","TrackingUniqueIdentifierItem","trackingUniqueIdentifier","UID","_getMergedContentSequencesByTrackingUniqueIdentifiers","filter","Object","keys","mergedContentSequence","some","group","graphicItem","UIDREFContentItem","TrackingIdentifierContentItem","NUMContentItems","loaded","_getCoordsFromSCOORDOrSCOORD3D","TextValue","MeasuredValueSequence","_getLabelFromMeasuredValueSequence","findingSites","ConceptCodeSequence","CodeMeaning","_processTID1410Measurement","finding","includes","codeValues","CORNERSTONEFREETEXT","cornerstoneFreeTextFindingSite","_processNonGeometricallyDefinedMeasurement","_processMeasurement","_getMeasurements","mappings","getSourceMappings","isHydrated","isRehydratable","mappingDefinitions","Set","m","add","annotationType","adapter","getAdapterForTrackingIdentifier","has","toolType","log","activeDisplaySets","activeDisplaySet","_checkIfCanAddMeasurementsToDisplaySet","subscribe","EVENTS","DISPLAY_SETS_ADDED","displaySetsAdded","newDisplaySet","_load","customizationService","unloadedMeasurements","unsupported","imageIdMap","Map","imageIds","getImageIdsForDisplaySet","getUIDsFromImageID","set","j","onBeforeSRAddMeasurement","getCustomization","referencedSOPSequence","frame","ReferencedFrameNumber","get","_measurementReferencesSOPInstanceUID","splice","Number","coord","ReferencedFrameOfReferenceUID","NumericValue","MeasurementUnitsCodeSequence","toFixed","sequence","getDisplaySetsFromSeries","name","srProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","srDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","OHIF","measurementData","additionalFindingTypes","filteredToolState","addToFilteredToolState","imageIdSpecificToolState","measurementDataI","md","toolData","assign","uids","slice","annotationManager","getAnnotationManager","framesOfReference","getFramesOfReference","frameOfReference","frameOfReferenceAnnotations","getAnnotations","toolTypes","annotations","k","uidIndex","findIndex","locking","CsAnnotation","CORNERSTONE_3D_TAG","convertCode","codingValues","code","text","convertSites","sites","ret","site","hydrateStructuredReport","commandsManager","getActiveDataSource","disableEditing","getDisplaySetByUID","DicomMetadataStore","getInstance","sopInstanceUIDToImageId","imageIdsForToolState","datasetToUse","storedMeasurementByAnnotationType","generateToolState","onBeforeSRHydration","hydratableMeasurementsInSR","targetStudyInstanceUID","sopInstanceUid","SeriesInstanceUIDs","source","getSource","freeTextLabel","fs","getLabelFromDCMJSImportedToolData","type","matchingMapping","newAnnotationUID","addRawMeasurement","toMeasurementSchema","runCommand","setAnnotationLocked","_generateReport","options","getFilteredCornerstoneToolState","report","generateReport","dataset","SpecificCharacterSet","props","viewportGridService","actions","changeColorMeasurement","downloadReport","srDataset","reportBlob","dcmjs","datasetToBlob","objectUrl","URL","createObjectURL","window","location","storeMeasurements","info","store","dicom","error","reject","naturalizedReport","onBeforeDicomStore","dicomDict","deleteStudyMetadataPromise","message","loadSRMeasurements","getDisplaySetsForSeries","setDisplaySetsForViewports","viewportId","getActiveViewportId","displaySetInstanceUIDs","definitions","commandFn","defaultContext","DICOMSRDisplayTool","AnnotationTool","constructor","toolProps","defaultToolProps","configuration","super","isPointNearTool","getHandleNearImagePoint","renderAnnotation","enabledElement","svgDrawingHelper","viewport","element","getToolName","filterInteractableAnnotationsForElement","trackingUniqueIdentifiersForElement","getTrackingUniqueIdentifiersForElement","activeIndex","trackingUniqueIdentifiers","activeTrackingUniqueIdentifier","filteredAnnotations","_actors","size","styleSpecifier","style","annotationStyle","groupStyle","getToolGroupToolStyles","lineWidth","getStyle","lineDash","color","renderableDataForGraphicType","renderMethod","canvasCoordinatesAdapter","renderPoint","renderMultipoint","renderPolyLine","renderEllipse","canvasCoordinates","renderTextBox","_getTextBoxLinesFromLabels","labelLength","min","lines","labelEntry","_labelToShorthand","drawingOptions","width","allCanvasCoordinates","index","p","worldToCanvas","lineUID","drawing","concat","point","imagePixelModule","xOffset","yOffset","imagePoint","csUtils","arrowEnd","arrowUID","ellipsePointsWorld","rotation","getRotation","canvasCorners","adaptedCanvasCoordinates","textLines","canvasTextBoxCoords","worldPosition","canvasToWorld","textBoxPosition","textBoxOptions","getLinkedTextBoxStyle","boundingBox","x","left","y","top","height","worldBoundingBox","topLeft","topRight","bottomLeft","bottomRight","SHORT_HAND_MAP","AREA","Length","shortHand","SCOORD3DPointTool","AnnotationDisplayTool","isReferenceViewable","cameraFocalPoint","asNearbyProjection","arrowPointCanvas","specifications","visibility","fontFamily","fontSize","shadow","background","toAnnotation","toMeasurement","csToolsEventDetail","CornerstoneViewportService","getValueTypeFromToolType","getDisplayText","addToolInstance","toolClass","InstanceClass","addTool","Component","React","OHIFCornerstoneSRViewport","fallback","onModeEnter","toolbarService","getDisplaySetCache","values","ds","addButtons","component","ViewportActionButton","i18n","t","commands","createButtonSection","preRegistration","cornerstoneViewportService","LengthTool","BidirectionalTool","EllipticalROITool","CircleROITool","ArrowAnnotateTool","AngleTool","PlanarFreehandROITool","RectangleROITool","CobbAngleTool","csTools3DVer1MeasurementSource","VALUE_TYPES","addMapping","SRSCOOR3DProbeMapper","dashedLine","setToolGroupToolStyles","global","getViewportModule","_extends","getCommandsModule","getSopClassHandlerModule","getUtilityModule","exports","state","trackingIdentifiersByViewportId","setTrackingUniqueIdentifiersForElement","getEnabledElement","findInstance","sopUid","referencedDisplaySet","images","findReferencedInstances","instanceById","createReferencedImageDisplaySet","imageSet","setAttributes","SeriesTime","isMultiFrame","numImageFrames","isReconstructable","isCompositeStack","madeInClient","excludeFromThumbnailBrowser","updateInstances","addDisplaySets"],"sourceRoot":""}