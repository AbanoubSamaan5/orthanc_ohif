{"version":3,"file":"9890.bundle.f8f5289e379055703f74.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/promptHydrateRT.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/viewports/_getStatusComponent.tsx","webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/initRTToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/viewports/OHIFCornerstoneRTViewport.tsx"],"sourcesContent":["import { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  HYDRATE_SEG: 5,\r\n};\r\n\r\nfunction promptHydrateRT({\r\n  servicesManager,\r\n  rtDisplaySet,\r\n  viewportId,\r\n  preHydrateCallbacks,\r\n  hydrateRTDisplaySet,\r\n}: withAppTypes) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n  const extensionManager = servicesManager._extensionManager;\r\n  const appConfig = extensionManager._appConfig;\r\n  return new Promise(async function (resolve, reject) {\r\n    const promptResult = appConfig?.disableConfirmationPrompts\r\n      ? RESPONSE.HYDRATE_SEG\r\n      : await _askHydrate(uiViewportDialogService, viewportId);\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\r\n      preHydrateCallbacks?.forEach(callback => {\r\n        callback();\r\n      });\r\n\r\n      const isHydrated = await hydrateRTDisplaySet({\r\n        rtDisplaySet,\r\n        viewportId,\r\n        servicesManager,\r\n      });\r\n\r\n      resolve(isHydrated);\r\n    }\r\n  });\r\n}\r\n\r\nfunction _askHydrate(uiViewportDialogService: AppTypes.UIViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Do you want to open this Segmentation?';\r\n    const actions = [\r\n      {\r\n        id: 'no-hydrate',\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'yes-hydrate',\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_SEG,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      id: 'promptHydrateRT',\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          onSubmit(RESPONSE.HYDRATE_SEG);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateRT;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ViewportActionButton } from '@ohif/ui';\r\nimport { Icons, Tooltip, TooltipTrigger, TooltipContent } from '@ohif/ui-next';\r\n\r\nexport default function _getStatusComponent({ isHydrated, onStatusClick }) {\r\n  let ToolTipMessage = null;\r\n  let StatusIcon = null;\r\n\r\n  switch (isHydrated) {\r\n    case true:\r\n      StatusIcon = () => <Icons.ByName name=\"status-alert\" />;\r\n      ToolTipMessage = () => <div>This Segmentation is loaded in the segmentation panel</div>;\r\n      break;\r\n    case false:\r\n      StatusIcon = () => (\r\n        <Icons.ByName\r\n          className=\"text-aqua-pale\"\r\n          name=\"status-untracked\"\r\n        />\r\n      );\r\n      ToolTipMessage = () => <div>Click LOAD to load RTSTRUCT.</div>;\r\n  }\r\n\r\n  const StatusArea = () => {\r\n    const { t } = useTranslation('Common');\r\n    const loadStr = t('LOAD');\r\n\r\n    return (\r\n      <div className=\"flex h-6 cursor-default text-sm leading-6 text-white\">\r\n        <div className=\"bg-customgray-100 flex min-w-[45px] items-center rounded-l-xl rounded-r p-1\">\r\n          <StatusIcon />\r\n          <span className=\"ml-1\">RTSTRUCT</span>\r\n        </div>\r\n        {!isHydrated && (\r\n          <ViewportActionButton onInteraction={onStatusClick}>{loadStr}</ViewportActionButton>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {ToolTipMessage && (\r\n        <Tooltip>\r\n          <TooltipTrigger asChild>\r\n            <span>\r\n              <StatusArea />\r\n            </span>\r\n          </TooltipTrigger>\r\n          <TooltipContent side=\"bottom\">\r\n            <ToolTipMessage />\r\n          </TooltipContent>\r\n        </Tooltip>\r\n      )}\r\n      {!ToolTipMessage && <StatusArea />}\r\n    </>\r\n  );\r\n}","function createRTToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\r\n  const tools = customizationService.getCustomization('cornerstone.overlayViewportTools');\r\n\r\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\r\n}\r\n\r\nexport default createRTToolGroupAndAddTools;\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ViewportActionArrows } from '@ohif/ui';\r\nimport { useViewportGrid } from '@ohif/ui-next';\r\nimport { utils } from '@ohif/extension-cornerstone';\r\n\r\nimport promptHydrateRT from '../utils/promptHydrateRT';\r\nimport _getStatusComponent from './_getStatusComponent';\r\n\r\nimport createRTToolGroupAndAddTools from '../utils/initRTToolGroup';\r\nimport { usePositionPresentationStore } from '@ohif/extension-cornerstone';\r\n\r\nconst RT_TOOLGROUP_BASE_NAME = 'RTToolGroup';\r\n\r\nfunction OHIFCornerstoneRTViewport(props: withAppTypes) {\r\n  const {\r\n    children,\r\n    displaySets,\r\n    viewportOptions,\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  } = props;\r\n\r\n  const {\r\n    displaySetService,\r\n    toolGroupService,\r\n    segmentationService,\r\n    uiNotificationService,\r\n    customizationService,\r\n    viewportActionCornersService,\r\n  } = servicesManager.services;\r\n\r\n  const viewportId = viewportOptions.viewportId;\r\n\r\n  const toolGroupId = `${RT_TOOLGROUP_BASE_NAME}-${viewportId}`;\r\n\r\n  // RT viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('RT viewport should only have a single display set');\r\n  }\r\n\r\n  const LoadingIndicatorTotalPercent = customizationService.getCustomization(\r\n    'ui.loadingIndicatorTotalPercent'\r\n  );\r\n\r\n  const rtDisplaySet = displaySets[0];\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n\r\n  // States\r\n  const selectedSegmentObjectIndex: number = 0;\r\n  const { setPositionPresentation } = usePositionPresentationStore();\r\n\r\n  // Hydration means that the RT is opened and segments are loaded into the\r\n  // segmentation panel, and RT is also rendered on any viewport that is in the\r\n  // same frameOfReferenceUID as the referencedSeriesUID of the RT. However,\r\n  // loading basically means RT loading over network and bit unpacking of the\r\n  // RT data.\r\n  const [isHydrated, setIsHydrated] = useState(rtDisplaySet.isHydrated);\r\n  const [rtIsLoading, setRtIsLoading] = useState(!rtDisplaySet.isLoaded);\r\n  const [element, setElement] = useState(null);\r\n  const [processingProgress, setProcessingProgress] = useState({\r\n    percentComplete: null,\r\n    totalSegments: null,\r\n  });\r\n\r\n  // refs\r\n  const referencedDisplaySetRef = useRef(null);\r\n\r\n  const { viewports, activeViewportId } = viewportGrid;\r\n\r\n  const referencedDisplaySetInstanceUID = rtDisplaySet.referencedDisplaySetInstanceUID;\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n    referencedDisplaySetInstanceUID\r\n  );\r\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(referencedDisplaySet);\r\n\r\n  referencedDisplaySetRef.current = {\r\n    displaySet: referencedDisplaySet,\r\n    metadata: referencedDisplaySetMetadata,\r\n  };\r\n  /**\r\n   * OnElementEnabled callback which is called after the cornerstoneExtension\r\n   * has enabled the element. Note: we delegate all the image rendering to\r\n   * cornerstoneExtension, so we don't need to do anything here regarding\r\n   * the image rendering, element enabling etc.\r\n   */\r\n  const onElementEnabled = evt => {\r\n    setElement(evt.detail.element);\r\n  };\r\n\r\n  const onElementDisabled = () => {\r\n    setElement(null);\r\n  };\r\n\r\n  const storePresentationState = useCallback(() => {\r\n    viewportGrid?.viewports.forEach(({ viewportId }) => {\r\n      commandsManager.runCommand('storePresentation', {\r\n        viewportId,\r\n      });\r\n    });\r\n  }, [viewportGrid]);\r\n\r\n  const hydrateRTDisplaySet = useCallback(\r\n    ({ rtDisplaySet, viewportId }) => {\r\n      commandsManager.runCommand('hydrateRTSDisplaySet', {\r\n        displaySet: rtDisplaySet,\r\n        viewportId,\r\n      });\r\n    },\r\n    [commandsManager]\r\n  );\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\r\n\r\n    // Todo: jump to the center of the first segment\r\n    return (\r\n      <Component\r\n        {...props}\r\n        displaySets={[referencedDisplaySet, rtDisplaySet]}\r\n        viewportOptions={{\r\n          viewportType: 'stack',\r\n          toolGroupId: toolGroupId,\r\n          orientation: viewportOptions.orientation,\r\n          viewportId: viewportOptions.viewportId,\r\n          presentationIds: viewportOptions.presentationIds,\r\n        }}\r\n        onElementEnabled={evt => {\r\n          props.onElementEnabled?.(evt);\r\n          onElementEnabled(evt);\r\n        }}\r\n        onElementDisabled={onElementDisabled}\r\n      ></Component>\r\n    );\r\n  }, [viewportId, rtDisplaySet, toolGroupId]);\r\n\r\n  const onSegmentChange = useCallback(\r\n    direction => {\r\n      utils.handleSegmentChange({\r\n        direction,\r\n        segDisplaySet: rtDisplaySet,\r\n        viewportId,\r\n        selectedSegmentObjectIndex,\r\n        segmentationService,\r\n      });\r\n    },\r\n    [selectedSegmentObjectIndex]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (rtIsLoading) {\r\n      return;\r\n    }\r\n\r\n    promptHydrateRT({\r\n      servicesManager,\r\n      viewportId,\r\n      rtDisplaySet,\r\n      preHydrateCallbacks: [storePresentationState],\r\n      hydrateRTDisplaySet,\r\n    }).then(isHydrated => {\r\n      if (isHydrated) {\r\n        setIsHydrated(true);\r\n      }\r\n    });\r\n  }, [servicesManager, viewportId, rtDisplaySet, rtIsLoading]);\r\n\r\n  useEffect(() => {\r\n    // I'm not sure what is this, since in RT we support Overlapping segments\r\n    // via contours\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\r\n      evt => {\r\n        if (evt.rtDisplaySet.displaySetInstanceUID === rtDisplaySet.displaySetInstanceUID) {\r\n          setRtIsLoading(false);\r\n        }\r\n\r\n        if (rtDisplaySet?.firstSegmentedSliceImageId && viewportOptions?.presentationIds) {\r\n          const { firstSegmentedSliceImageId } = rtDisplaySet;\r\n          const { presentationIds } = viewportOptions;\r\n\r\n          setPositionPresentation(presentationIds.positionPresentationId, {\r\n            viewportType: 'stack',\r\n            viewReference: {\r\n              referencedImageId: firstSegmentedSliceImageId,\r\n            },\r\n            viewPresentation: {},\r\n          });\r\n        }\r\n\r\n        if (evt.overlappingSegments) {\r\n          uiNotificationService.show({\r\n            title: 'Overlapping Segments',\r\n            message: 'Overlapping segments detected which is not currently supported',\r\n            type: 'warning',\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [rtDisplaySet]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\r\n      ({ percentComplete, numSegments }) => {\r\n        setProcessingProgress({\r\n          percentComplete,\r\n          totalSegments: numSegments,\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [rtDisplaySet]);\r\n\r\n  /**\r\n   Cleanup the SEG viewport when the viewport is destroyed\r\n   */\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportId: activeViewportId,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n\r\n    if (toolGroup) {\r\n      return;\r\n    }\r\n\r\n    toolGroup = createRTToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      segmentationService.removeSegmentationRepresentations(viewportId);\r\n\r\n      toolGroupService.destroyToolGroup(toolGroupId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsHydrated(rtDisplaySet.isHydrated);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      segmentationService.removeSegmentationRepresentations(viewportId);\r\n      referencedDisplaySetRef.current = null;\r\n    };\r\n  }, [rtDisplaySet]);\r\n\r\n  const onStatusClick = useCallback(async () => {\r\n    // Before hydrating a RT and make it added to all viewports in the grid\r\n    // that share the same frameOfReferenceUID, we need to store the viewport grid\r\n    // presentation state, so that we can restore it after hydrating the RT. This is\r\n    // required if the user has changed the viewport (other viewport than RT viewport)\r\n    // presentation state (w/l and invert) and then opens the RT. If we don't store\r\n    // the presentation state, the viewport will be reset to the default presentation\r\n    storePresentationState();\r\n    const isHydrated = await hydrateRTDisplaySet({\r\n      rtDisplaySet,\r\n      viewportId,\r\n    });\r\n\r\n    setIsHydrated(isHydrated);\r\n  }, [hydrateRTDisplaySet, rtDisplaySet, storePresentationState, viewportId]);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (\r\n    !referencedDisplaySetRef.current ||\r\n    referencedDisplaySet.displaySetInstanceUID !==\r\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportId,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    viewportActionCornersService.addComponents([\r\n      {\r\n        viewportId,\r\n        id: 'viewportStatusComponent',\r\n        component: _getStatusComponent({\r\n          isHydrated,\r\n          onStatusClick,\r\n        }),\r\n        indexPriority: -100,\r\n        location: viewportActionCornersService.LOCATIONS.topLeft,\r\n      },\r\n      {\r\n        viewportId,\r\n        id: 'viewportActionArrowsComponent',\r\n        component: (\r\n          <ViewportActionArrows\r\n            key=\"actionArrows\"\r\n            onArrowsClick={onSegmentChange}\r\n            className={\r\n              viewportId === activeViewportId ? 'visible' : 'invisible group-hover/pane:visible'\r\n            }\r\n          ></ViewportActionArrows>\r\n        ),\r\n        indexPriority: 0,\r\n        location: viewportActionCornersService.LOCATIONS.topRight,\r\n      },\r\n    ]);\r\n  }, [\r\n    activeViewportId,\r\n    isHydrated,\r\n    onSegmentChange,\r\n    onStatusClick,\r\n    viewportActionCornersService,\r\n    viewportId,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\r\n        {rtIsLoading && (\r\n          <LoadingIndicatorTotalPercent\r\n            className=\"h-full w-full\"\r\n            totalNumbers={processingProgress.totalSegments}\r\n            percentComplete={processingProgress.percentComplete}\r\n            loadingText=\"Loading RTSTRUCT...\"\r\n          />\r\n        )}\r\n        {getCornerstoneViewport()}\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstoneRTViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportId: PropTypes.string.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet) {\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\r\n  };\r\n\r\n  return referencedDisplaySetMetadata;\r\n}\r\n\r\nexport default OHIFCornerstoneRTViewport;\r\n"],"names":["RESPONSE","NO_NEVER","CANCEL","HYDRATE_SEG","servicesManager","rtDisplaySet","viewportId","preHydrateCallbacks","hydrateRTDisplaySet","uiViewportDialogService","services","appConfig","_extensionManager","_appConfig","Promise","async","resolve","reject","promptResult","disableConfirmationPrompts","message","actions","id","type","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","onKeyPress","event","key","_askHydrate","forEach","callback","_getStatusComponent","isHydrated","onStatusClick","ToolTipMessage","StatusIcon","React","Icons","ByName","name","className","StatusArea","t","useTranslation","loadStr","ViewportActionButton","onInteraction","Tooltip","TooltipTrigger","asChild","TooltipContent","side","ToolGroupService","customizationService","toolGroupId","tools","getCustomization","createToolGroupAndAddTools","OHIFCornerstoneRTViewport","props","children","displaySets","viewportOptions","extensionManager","commandsManager","displaySetService","toolGroupService","segmentationService","uiNotificationService","viewportActionCornersService","length","Error","LoadingIndicatorTotalPercent","viewportGrid","viewportGridService","useViewportGrid","setPositionPresentation","usePositionPresentationStore","setIsHydrated","useState","rtIsLoading","setRtIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySetInstanceUID","referencedDisplaySet","getDisplaySetByUID","referencedDisplaySetMetadata","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementDisabled","storePresentationState","useCallback","runCommand","getCornerstoneViewport","component","Component","getModuleEntry","_extends","viewportType","orientation","presentationIds","onElementEnabled","evt","detail","onSegmentChange","direction","utils","handleSegmentChange","segDisplaySet","selectedSegmentObjectIndex","useEffect","promptHydrateRT","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","displaySetInstanceUID","firstSegmentedSliceImageId","positionPresentationId","viewReference","referencedImageId","viewPresentation","overlappingSegments","title","SEGMENT_LOADING_COMPLETE","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","get","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createRTToolGroupAndAddTools","removeSegmentationRepresentations","destroyToolGroup","childrenWithProps","map","child","index","addComponents","indexPriority","location","LOCATIONS","topLeft","ViewportActionArrows","onArrowsClick","topRight","totalNumbers","loadingText","propTypes","PropTypes","isRequired","dataSource"],"sourceRoot":""}