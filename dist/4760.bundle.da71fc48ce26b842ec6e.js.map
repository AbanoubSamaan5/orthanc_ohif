{"version":3,"file":"4760.bundle.da71fc48ce26b842ec6e.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/drawImageSync.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/calculateTransform.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/enums/GenerateImageType.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/Settings.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/imageLoader.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/FrameRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/PointsManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/ProgressiveIterator.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/RLEVoxelMap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/actorCheck.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/applyPreset.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/autoLoad.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/buildMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateSpacingBetweenImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clamp.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/colormap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createLinearRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/decimate.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepClone.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/fnv1aHash.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestImageId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageDataMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageSliceDataForVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSliceRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSpacingInNormalDirection.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getTargetVolumeAndSpacingInNormalDir.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVoiFromSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeActorCorners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeSliceRangeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportScrollInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasFloatScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasNaNValues.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageIdToURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageRetrieveMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/TargetEventListeners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/MultiTargetEventListenerManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getMinMax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRuntimeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calibratedPixelSpacingMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isOpposite.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/indexWithinDimensions.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportsContainingSameVolumes.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isPTPrescaledWithSUV.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasGPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasCPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/loadImageToCanvas.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/historyMemo/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/worldToImageCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageToWorldCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithImageURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestStackImageIndexForPoint.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getCurrentVolumeViewportSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/spatialRegistrationMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateViewportsSpatialRegistration.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageCornersInWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageLegacy.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isValidVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isVideoTransferSyntax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertStackToVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertVolumeToStackViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/roundNumber.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertToGrayscale.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRandomSampleFromArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/color.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/splitImageIdsBy4DTags.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getDynamicVolumeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clip.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scroll.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/jumpToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSubVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeDirectionVectors.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateNeighborhoodStats.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportModality.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/invertRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/logger.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/makeVolumeMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/planar.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/pointInShapeCallback.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/snapFocalPointToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/sortImageIdsAndGetSpacing.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transferFunctionUtils.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformCanvasToIJK.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformIndexToWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformWorldToIndex.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/updateVTKImageDataWithCornerstoneImage.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/windowLevel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationCompleted.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/annotationHydration.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/contourFinder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findHandlePolylineIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getDeduplicatedVTKPolyDataPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getCalibratedUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getSphereBoundsInfo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getToolsWithModesForElement.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/basic/Calculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/pointInEllipse.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPointSquared.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPointSquaredInfo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/isPointOnLineSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/distanceToPointSquared.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/distanceToPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/mirror.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/addCanvasPointsToArray.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/areLineSegmentsIntersecting.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/combinePolyline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/containsPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/containsPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/decimate.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getAABB.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getArea.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getClosestLineSegmentIntersection.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getFirstLineSegmentIntersectionIndexes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getLineSegmentIntersectionsCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getLineSegmentIntersectionsIndexes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getLinesIntersection.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getNormal2.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getNormal3.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getSignedArea.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getSubPixelSpacingAndXYDirections.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getWindingDirection.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/intersectPolyline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/isClosed.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/isPointInsidePolyline3D.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/pointCanProjectOnLine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/pointsAreWithinCloseContourProximity.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/projectTo2D.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/findLargestBidirectional.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/isLineInSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForToolGroupIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/SegmentStatsCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/constants.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runOneClickGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/workers/computeWorker.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Filters/General/ImageMarchingSquares.js","webpack:///../../../node_modules/gl-matrix/esm/vec3.js","webpack:///../../../node_modules/d3-array/src/zip.js","webpack:///../../../node_modules/d3-interpolate/src/quantize.js"],"sourcesContent":["import now from './rendering/now';\nimport { renderColorImage } from './rendering/renderColorImage';\nimport { renderGrayscaleImage } from './rendering/renderGrayscaleImage';\nimport { renderPseudoColorImage } from './rendering/renderPseudoColorImage';\nexport default function (enabledElement, invalidated) {\n    const image = enabledElement.image;\n    if (!enabledElement.canvas || !enabledElement.image) {\n        return;\n    }\n    const start = now();\n    image.stats = {\n        lastGetPixelDataTime: -1.0,\n        lastStoredPixelDataToCanvasImageDataTime: -1.0,\n        lastPutImageDataTime: -1.0,\n        lastRenderTime: -1.0,\n        lastLutGenerateTime: -1.0,\n    };\n    if (image) {\n        let render = image.render;\n        if (!render) {\n            if (enabledElement.viewport.colormap) {\n                render = renderPseudoColorImage;\n            }\n            else if (image.color) {\n                render = renderColorImage;\n            }\n            else {\n                render = renderGrayscaleImage;\n            }\n        }\n        render(enabledElement, invalidated);\n    }\n    const renderTimeInMs = now() - start;\n    image.stats.lastRenderTime = renderTimeInMs;\n    enabledElement.invalid = false;\n    enabledElement.needsRedraw = false;\n}\n","import { Transform } from './transform';\nexport default function (enabledElement, scale) {\n    const transform = new Transform();\n    if (!enabledElement.viewport.displayedArea) {\n        return transform;\n    }\n    transform.translate(enabledElement.canvas.width / 2, enabledElement.canvas.height / 2);\n    const angle = enabledElement.viewport.rotation;\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    let widthScale = enabledElement.viewport.scale;\n    let heightScale = enabledElement.viewport.scale;\n    const width = enabledElement.viewport.displayedArea.brhc.x -\n        (enabledElement.viewport.displayedArea.tlhc.x - 1);\n    const height = enabledElement.viewport.displayedArea.brhc.y -\n        (enabledElement.viewport.displayedArea.tlhc.y - 1);\n    if (enabledElement.viewport.displayedArea.presentationSizeMode === 'NONE') {\n        if (enabledElement.image.rowPixelSpacing <\n            enabledElement.image.columnPixelSpacing) {\n            widthScale *=\n                enabledElement.image.columnPixelSpacing /\n                    enabledElement.image.rowPixelSpacing;\n        }\n        else if (enabledElement.image.columnPixelSpacing <\n            enabledElement.image.rowPixelSpacing) {\n            heightScale *=\n                enabledElement.image.rowPixelSpacing /\n                    enabledElement.image.columnPixelSpacing;\n        }\n    }\n    else {\n        widthScale = enabledElement.viewport.displayedArea.columnPixelSpacing;\n        heightScale = enabledElement.viewport.displayedArea.rowPixelSpacing;\n        if (enabledElement.viewport.displayedArea.presentationSizeMode ===\n            'SCALE TO FIT') {\n            const verticalScale = enabledElement.canvas.height / (height * heightScale);\n            const horizontalScale = enabledElement.canvas.width / (width * widthScale);\n            widthScale = heightScale = Math.min(horizontalScale, verticalScale);\n            if (enabledElement.viewport.displayedArea.rowPixelSpacing <\n                enabledElement.viewport.displayedArea.columnPixelSpacing) {\n                widthScale *=\n                    enabledElement.viewport.displayedArea.columnPixelSpacing /\n                        enabledElement.viewport.displayedArea.rowPixelSpacing;\n            }\n            else if (enabledElement.viewport.displayedArea.columnPixelSpacing <\n                enabledElement.viewport.displayedArea.rowPixelSpacing) {\n                heightScale *=\n                    enabledElement.viewport.displayedArea.rowPixelSpacing /\n                        enabledElement.viewport.displayedArea.columnPixelSpacing;\n            }\n        }\n    }\n    transform.scale(widthScale, heightScale);\n    if (angle !== 0) {\n        transform.rotate((-angle * Math.PI) / 180);\n    }\n    transform.translate(enabledElement.viewport.translation.x, enabledElement.viewport.translation.y);\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    if (scale !== undefined) {\n        transform.scale(scale, scale);\n    }\n    if (enabledElement.viewport.hflip) {\n        transform.scale(-1, 1);\n    }\n    if (enabledElement.viewport.vflip) {\n        transform.scale(1, -1);\n    }\n    transform.translate(-width / 2, -height / 2);\n    return transform;\n}\n","import createViewport from './createViewport';\nimport getImageFitScale from './getImageFitScale';\nexport default function (canvas, image, modality, colormap) {\n    if (canvas === undefined) {\n        throw new Error('getDefaultViewport: parameter canvas must not be undefined');\n    }\n    if (image === undefined) {\n        return createViewport();\n    }\n    const scale = getImageFitScale(canvas, image, 0).scaleFactor;\n    let voi;\n    if (modality === 'PT' && image.isPreScaled) {\n        voi = {\n            windowWidth: 5,\n            windowCenter: 2.5,\n        };\n    }\n    else if (image.windowWidth !== undefined &&\n        image.windowCenter !== undefined) {\n        voi = {\n            windowWidth: Array.isArray(image.windowWidth)\n                ? image.windowWidth[0]\n                : image.windowWidth,\n            windowCenter: Array.isArray(image.windowCenter)\n                ? image.windowCenter[0]\n                : image.windowCenter,\n        };\n    }\n    return {\n        scale,\n        translation: {\n            x: 0,\n            y: 0,\n        },\n        voi,\n        invert: image.invert,\n        pixelReplication: false,\n        rotation: 0,\n        hflip: false,\n        vflip: false,\n        modalityLUT: image.modalityLUT,\n        modality,\n        voiLUT: image.voiLUT,\n        colormap: colormap !== undefined ? colormap : image.colormap,\n        displayedArea: {\n            tlhc: {\n                x: 1,\n                y: 1,\n            },\n            brhc: {\n                x: image.columns,\n                y: image.rows,\n            },\n            rowPixelSpacing: image.rowPixelSpacing === undefined ? 1 : image.rowPixelSpacing,\n            columnPixelSpacing: image.columnPixelSpacing === undefined ? 1 : image.columnPixelSpacing,\n            presentationSizeMode: 'NONE',\n        },\n    };\n}\n","export var GenerateImageType;\n(function (GenerateImageType) {\n    GenerateImageType[\"SUM\"] = \"SUM\";\n    GenerateImageType[\"SUBTRACT\"] = \"SUBTRACT\";\n    GenerateImageType[\"AVERAGE\"] = \"AVERAGE\";\n})(GenerateImageType || (GenerateImageType = {}));\n","const DEFAULT_SETTINGS = Symbol('DefaultSettings');\nconst RUNTIME_SETTINGS = Symbol('RuntimeSettings');\nconst OBJECT_SETTINGS_MAP = Symbol('ObjectSettingsMap');\nconst DICTIONARY = Symbol('Dictionary');\nexport default class Settings {\n    constructor(base) {\n        const dictionary = Object.create((base instanceof Settings && DICTIONARY in base\n            ? base[DICTIONARY]\n            : null));\n        Object.seal(Object.defineProperty(this, DICTIONARY, {\n            value: dictionary,\n        }));\n    }\n    set(key, value) {\n        return set(this[DICTIONARY], key, value, null);\n    }\n    get(key) {\n        return get(this[DICTIONARY], key);\n    }\n    unset(key) {\n        return unset(this[DICTIONARY], key + '');\n    }\n    forEach(callback) {\n        iterate(this[DICTIONARY], callback);\n    }\n    extend() {\n        return new Settings(this);\n    }\n    import(root) {\n        if (isPlainObject(root)) {\n            Object.keys(root).forEach((key) => {\n                set(this[DICTIONARY], key, root[key], null);\n            });\n        }\n    }\n    dump() {\n        const context = {};\n        iterate(this[DICTIONARY], (key, value) => {\n            if (typeof value !== 'undefined') {\n                deepSet(context, key, value);\n            }\n        });\n        return context;\n    }\n    static assert(subject) {\n        return subject instanceof Settings\n            ? subject\n            : Settings.getRuntimeSettings();\n    }\n    static getDefaultSettings(subfield = null) {\n        let defaultSettings = Settings[DEFAULT_SETTINGS];\n        if (!(defaultSettings instanceof Settings)) {\n            defaultSettings = new Settings();\n            Settings[DEFAULT_SETTINGS] = defaultSettings;\n        }\n        if (subfield) {\n            const settingObj = {};\n            defaultSettings.forEach((name) => {\n                if (name.startsWith(subfield)) {\n                    const setting = name.split(`${subfield}.`)[1];\n                    settingObj[setting] = defaultSettings.get(name);\n                }\n            });\n            return settingObj;\n        }\n        return defaultSettings;\n    }\n    static getRuntimeSettings() {\n        let runtimeSettings = Settings[RUNTIME_SETTINGS];\n        if (!(runtimeSettings instanceof Settings)) {\n            runtimeSettings = new Settings(Settings.getDefaultSettings());\n            Settings[RUNTIME_SETTINGS] = runtimeSettings;\n        }\n        return runtimeSettings;\n    }\n    static getObjectSettings(subject, from) {\n        let settings = null;\n        if (subject instanceof Settings) {\n            settings = subject;\n        }\n        else if (typeof subject === 'object' && subject !== null) {\n            let objectSettingsMap = Settings[OBJECT_SETTINGS_MAP];\n            if (!(objectSettingsMap instanceof WeakMap)) {\n                objectSettingsMap = new WeakMap();\n                Settings[OBJECT_SETTINGS_MAP] = objectSettingsMap;\n            }\n            settings = objectSettingsMap.get(subject);\n            if (!(settings instanceof Settings)) {\n                settings = new Settings(Settings.assert(Settings.getObjectSettings(from)));\n                objectSettingsMap.set(subject, settings);\n            }\n        }\n        return settings;\n    }\n    static extendRuntimeSettings() {\n        return Settings.getRuntimeSettings().extend();\n    }\n}\nfunction unset(dictionary, name) {\n    if (name.endsWith('.')) {\n        let deleteCount = 0;\n        const namespace = name;\n        const base = namespace.slice(0, -1);\n        const deleteAll = base.length === 0;\n        for (const key in dictionary) {\n            if (Object.prototype.hasOwnProperty.call(dictionary, key) &&\n                (deleteAll || key.startsWith(namespace) || key === base)) {\n                delete dictionary[key];\n                ++deleteCount;\n            }\n        }\n        return deleteCount > 0;\n    }\n    return delete dictionary[name];\n}\nfunction iterate(dictionary, callback) {\n    for (const key in dictionary) {\n        callback(key, dictionary[key]);\n    }\n}\nfunction setAll(dictionary, prefix, record, references) {\n    let failCount;\n    if (references.has(record)) {\n        return set(dictionary, prefix, null, references);\n    }\n    references.add(record);\n    failCount = 0;\n    for (const field in record) {\n        if (Object.prototype.hasOwnProperty.call(record, field)) {\n            const key = field.length === 0 ? prefix : `${prefix}.${field}`;\n            if (!set(dictionary, key, record[field], references)) {\n                ++failCount;\n            }\n        }\n    }\n    references.delete(record);\n    return failCount === 0;\n}\nfunction set(dictionary, key, value, references) {\n    if (isValidKey(key)) {\n        if (isPlainObject(value)) {\n            return setAll(dictionary, key, value, references instanceof WeakSet ? references : new WeakSet());\n        }\n        dictionary[key] = value;\n        return true;\n    }\n    return false;\n}\nfunction get(dictionary, key) {\n    return dictionary[key];\n}\nfunction isValidKey(key) {\n    let last, current, previous;\n    if (typeof key !== 'string' || (last = key.length - 1) < 0) {\n        return false;\n    }\n    previous = -1;\n    while ((current = key.indexOf('.', previous + 1)) >= 0) {\n        if (current - previous < 2 || current === last) {\n            return false;\n        }\n        previous = current;\n    }\n    return true;\n}\nfunction isPlainObject(subject) {\n    if (typeof subject === 'object' && subject !== null) {\n        const prototype = Object.getPrototypeOf(subject);\n        if (prototype === Object.prototype || prototype === null) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction deepSet(context, key, value) {\n    const separator = key.indexOf('.');\n    if (separator >= 0) {\n        const subKey = key.slice(0, separator);\n        let subContext = context[subKey];\n        if (typeof subContext !== 'object' || subContext === null) {\n            const subContextValue = subContext;\n            subContext = {};\n            if (typeof subContextValue !== 'undefined') {\n                subContext[''] = subContextValue;\n            }\n            context[subKey] = subContext;\n        }\n        deepSet(subContext, key.slice(separator + 1, key.length), value);\n    }\n    else {\n        context[key] = value;\n    }\n}\nSettings.getDefaultSettings().set('useCursors', true);\n","import cache from '../cache/cache';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport genericMetadataProvider from '../utilities/genericMetadataProvider';\nimport { getBufferConfiguration } from '../utilities/getBufferConfiguration';\nimport triggerEvent from '../utilities/triggerEvent';\nimport uuidv4 from '../utilities/uuidv4';\nimport VoxelManager from '../utilities/VoxelManager';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport * as metaData from '../metaData';\nimport VoxelManagerEnum from '../enums/VoxelManagerEnum';\nconst imageLoaders = {};\nlet unknownImageLoader;\nfunction loadImageFromImageLoader(imageId, options) {\n    const cachedImageLoadObject = cache.getImageLoadObject(imageId);\n    if (cachedImageLoadObject) {\n        handleImageLoadPromise(cachedImageLoadObject.promise, imageId);\n        return cachedImageLoadObject;\n    }\n    const scheme = imageId.split(':')[0];\n    const loader = imageLoaders[scheme] || unknownImageLoader;\n    if (!loader) {\n        throw new Error(`loadImageFromImageLoader: No image loader found for scheme '${scheme}'`);\n    }\n    const imageLoadObject = loader(imageId, options);\n    handleImageLoadPromise(imageLoadObject.promise, imageId);\n    return imageLoadObject;\n}\nfunction handleImageLoadPromise(imagePromise, imageId) {\n    Promise.resolve(imagePromise)\n        .then((image) => {\n        ensureVoxelManager(image);\n        triggerEvent(eventTarget, Events.IMAGE_LOADED, { image });\n    })\n        .catch((error) => {\n        const errorDetails = {\n            imageId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_LOAD_FAILED, errorDetails);\n    });\n}\nfunction ensureVoxelManager(image) {\n    if (!image.voxelManager) {\n        const { width, height, numberOfComponents } = image;\n        const voxelManager = VoxelManager.createImageVoxelManager({\n            scalarData: image.getPixelData(),\n            width,\n            height,\n            numberOfComponents,\n        });\n        image.voxelManager = voxelManager;\n        image.getPixelData = () => voxelManager.getScalarData();\n        delete image.imageFrame.pixelData;\n    }\n}\nexport function loadImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadImage: parameter imageId must not be undefined');\n    }\n    return loadImageFromImageLoader(imageId, options).promise;\n}\nexport function loadAndCacheImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadAndCacheImage: parameter imageId must not be undefined');\n    }\n    const imageLoadObject = loadImageFromImageLoader(imageId, options);\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageLoadObject(imageId, imageLoadObject);\n    }\n    return imageLoadObject.promise;\n}\nexport function loadAndCacheImages(imageIds, options = { priority: 0, requestType: 'prefetch' }) {\n    if (!imageIds || imageIds.length === 0) {\n        throw new Error('loadAndCacheImages: parameter imageIds must be list of image Ids');\n    }\n    const allPromises = imageIds.map((imageId) => {\n        return loadAndCacheImage(imageId, options);\n    });\n    return allPromises;\n}\nexport function createAndCacheDerivedImage(referencedImageId, options = {}) {\n    if (referencedImageId === undefined) {\n        throw new Error('createAndCacheDerivedImage: parameter imageId must not be undefined');\n    }\n    if (options.imageId === undefined) {\n        options.imageId = `derived:${uuidv4()}`;\n    }\n    const { imageId, skipCreateBuffer, onCacheAdd, voxelRepresentation } = options;\n    const imagePlaneModule = metaData.get('imagePlaneModule', referencedImageId);\n    const length = imagePlaneModule.rows * imagePlaneModule.columns;\n    const { TypedArrayConstructor } = getBufferConfiguration(options.targetBuffer?.type, length);\n    const imageScalarData = new TypedArrayConstructor(skipCreateBuffer ? 1 : length);\n    const derivedImageId = imageId;\n    const referencedImagePlaneMetadata = metaData.get('imagePlaneModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePlaneModule',\n        metadata: referencedImagePlaneMetadata,\n    });\n    const referencedImageGeneralSeriesMetadata = metaData.get('generalSeriesModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalSeriesModule',\n        metadata: referencedImageGeneralSeriesMetadata,\n    });\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalImageModule',\n        metadata: {\n            instanceNumber: options.instanceNumber,\n        },\n    });\n    const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePixelModule',\n        metadata: {\n            ...imagePixelModule,\n            bitsAllocated: 8,\n            bitsStored: 8,\n            highBit: 7,\n            samplesPerPixel: 1,\n            pixelRepresentation: 0,\n        },\n    });\n    const localImage = createAndCacheLocalImage(imageId, {\n        scalarData: imageScalarData,\n        onCacheAdd,\n        skipCreateBuffer,\n        targetBuffer: {\n            type: imageScalarData.constructor.name,\n        },\n        voxelRepresentation,\n        dimensions: [imagePlaneModule.columns, imagePlaneModule.rows],\n        spacing: [\n            imagePlaneModule.columnPixelSpacing,\n            imagePlaneModule.rowPixelSpacing,\n        ],\n        origin: imagePlaneModule.imagePositionPatient,\n        direction: imagePlaneModule.imageOrientationPatient,\n        frameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        referencedImageId: referencedImageId,\n    });\n    localImage.referencedImageId = referencedImageId;\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageSync(imageId, localImage);\n    }\n    return localImage;\n}\nexport function createAndCacheDerivedImages(referencedImageIds, options = {}) {\n    if (referencedImageIds.length === 0) {\n        throw new Error('createAndCacheDerivedImages: parameter imageIds must be list of image Ids');\n    }\n    const derivedImageIds = [];\n    const images = referencedImageIds.map((referencedImageId, index) => {\n        const newOptions = {\n            imageId: options?.getDerivedImageId?.(referencedImageId) ||\n                `derived:${uuidv4()}`,\n            ...options,\n        };\n        derivedImageIds.push(newOptions.imageId);\n        return createAndCacheDerivedImage(referencedImageId, {\n            ...newOptions,\n            instanceNumber: index + 1,\n        });\n    });\n    return images;\n}\nexport function createAndCacheLocalImage(imageId, options) {\n    const { scalarData, origin, direction, targetBuffer, skipCreateBuffer, onCacheAdd, frameOfReferenceUID, voxelRepresentation, referencedImageId, } = options;\n    const dimensions = options.dimensions;\n    const spacing = options.spacing;\n    if (!dimensions || !spacing) {\n        throw new Error('createAndCacheLocalImage: dimensions and spacing are required');\n    }\n    const width = dimensions[0];\n    const height = dimensions[1];\n    const columnPixelSpacing = spacing[0];\n    const rowPixelSpacing = spacing[1];\n    const imagePlaneModule = {\n        frameOfReferenceUID,\n        rows: height,\n        columns: width,\n        imageOrientationPatient: direction ?? [1, 0, 0, 0, 1, 0],\n        rowCosines: direction ? direction.slice(0, 3) : [1, 0, 0],\n        columnCosines: direction ? direction.slice(3, 6) : [0, 1, 0],\n        imagePositionPatient: origin ?? [0, 0, 0],\n        pixelSpacing: [rowPixelSpacing, columnPixelSpacing],\n        rowPixelSpacing: rowPixelSpacing,\n        columnPixelSpacing: columnPixelSpacing,\n    };\n    const length = width * height;\n    const numberOfComponents = scalarData.length / length;\n    let scalarDataToUse;\n    if (scalarData) {\n        if (!(scalarData instanceof Uint8Array ||\n            scalarData instanceof Float32Array ||\n            scalarData instanceof Uint16Array ||\n            scalarData instanceof Int16Array)) {\n            throw new Error('createAndCacheLocalImage: scalarData must be of type Uint8Array, Uint16Array, Int16Array or Float32Array');\n        }\n        scalarDataToUse = scalarData;\n    }\n    else if (!skipCreateBuffer) {\n        const { TypedArrayConstructor } = getBufferConfiguration(targetBuffer?.type, length);\n        const imageScalarData = new TypedArrayConstructor(length);\n        scalarDataToUse = imageScalarData;\n    }\n    let bitsAllocated, bitsStored, highBit;\n    if (scalarDataToUse instanceof Uint8Array) {\n        bitsAllocated = 8;\n        bitsStored = 8;\n        highBit = 7;\n    }\n    else if (scalarDataToUse instanceof Uint16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Int16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Float32Array) {\n        bitsAllocated = 32;\n        bitsStored = 32;\n        highBit = 31;\n    }\n    else {\n        throw new Error('Unsupported scalarData type');\n    }\n    const imagePixelModule = {\n        samplesPerPixel: 1,\n        photometricInterpretation: scalarDataToUse.length > dimensions[0] * dimensions[1]\n            ? 'RGB'\n            : 'MONOCHROME2',\n        rows: height,\n        columns: width,\n        bitsAllocated,\n        bitsStored,\n        highBit,\n    };\n    const metadata = {\n        imagePlaneModule,\n        imagePixelModule,\n    };\n    ['imagePlaneModule', 'imagePixelModule'].forEach((type) => {\n        genericMetadataProvider.add(imageId, {\n            type,\n            metadata: metadata[type] || {},\n        });\n    });\n    const id = imageId;\n    const voxelManager = (voxelRepresentation === VoxelManagerEnum.RLE &&\n        VoxelManager.createRLEImageVoxelManager({ dimensions, id })) ||\n        VoxelManager.createImageVoxelManager({\n            height,\n            width,\n            numberOfComponents,\n            scalarData: scalarDataToUse,\n            id,\n        });\n    let minPixelValue = scalarDataToUse[0];\n    let maxPixelValue = scalarDataToUse[0];\n    for (let i = 1; i < scalarDataToUse.length; i++) {\n        if (scalarDataToUse[i] < minPixelValue) {\n            minPixelValue = scalarDataToUse[i];\n        }\n        if (scalarDataToUse[i] > maxPixelValue) {\n            maxPixelValue = scalarDataToUse[i];\n        }\n    }\n    const image = {\n        imageId: imageId,\n        intercept: 0,\n        windowCenter: 0,\n        windowWidth: 0,\n        color: imagePixelModule.photometricInterpretation === 'RGB',\n        numberOfComponents: imagePixelModule.samplesPerPixel,\n        dataType: targetBuffer?.type,\n        slope: 1,\n        minPixelValue,\n        maxPixelValue,\n        rows: imagePixelModule.rows,\n        columns: imagePixelModule.columns,\n        getCanvas: undefined,\n        height: imagePixelModule.rows,\n        width: imagePixelModule.columns,\n        rgba: undefined,\n        columnPixelSpacing: imagePlaneModule.columnPixelSpacing,\n        rowPixelSpacing: imagePlaneModule.rowPixelSpacing,\n        FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        invert: false,\n        getPixelData: () => voxelManager.getScalarData(),\n        voxelManager,\n        sizeInBytes: scalarData.byteLength,\n        referencedImageId,\n    };\n    onCacheAdd?.(image);\n    cache.putImageSync(image.imageId, image);\n    return image;\n}\nexport function cancelLoadImage(imageId) {\n    const filterFunction = ({ additionalDetails }) => {\n        if (additionalDetails.imageId) {\n            return additionalDetails.imageId !== imageId;\n        }\n        return true;\n    };\n    imageLoadPoolManager.filterRequests(filterFunction);\n    const imageLoadObject = cache.getImageLoadObject(imageId);\n    if (imageLoadObject) {\n        imageLoadObject.cancelFn();\n    }\n}\nexport function cancelLoadImages(imageIds) {\n    imageIds.forEach((imageId) => {\n        cancelLoadImage(imageId);\n    });\n}\nexport function cancelLoadAll() {\n    const requestPool = imageLoadPoolManager.getRequestPool();\n    Object.keys(requestPool).forEach((type) => {\n        const requests = requestPool[type];\n        Object.keys(requests).forEach((priority) => {\n            const requestDetails = requests[priority].pop();\n            if (!requestDetails) {\n                return;\n            }\n            const additionalDetails = requestDetails.additionalDetails;\n            const { imageId, volumeId } = additionalDetails;\n            let loadObject;\n            if (imageId) {\n                loadObject = cache.getImageLoadObject(imageId);\n            }\n            else if (volumeId) {\n                loadObject = cache.getVolumeLoadObject(volumeId);\n            }\n            if (loadObject) {\n                loadObject.cancel();\n            }\n        });\n        imageLoadPoolManager.clearRequestStack(type);\n    });\n}\nexport function registerImageLoader(scheme, imageLoader) {\n    imageLoaders[scheme] = imageLoader;\n}\nexport function registerUnknownImageLoader(imageLoader) {\n    const oldImageLoader = unknownImageLoader;\n    unknownImageLoader = imageLoader;\n    return oldImageLoader;\n}\nexport function unregisterAllImageLoaders() {\n    Object.keys(imageLoaders).forEach((imageLoader) => delete imageLoaders[imageLoader]);\n    unknownImageLoader = undefined;\n}\nexport function createAndCacheDerivedLabelmapImages(referencedImageIds, options = {}) {\n    return createAndCacheDerivedImages(referencedImageIds, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\nexport function createAndCacheDerivedLabelmapImage(referencedImageId, options = {}) {\n    return createAndCacheDerivedImage(referencedImageId, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\n","export default class FrameRange {\n    static { this.frameRangeExtractor = /(\\/frames\\/|[&?]frameNumber=)([^/&?]*)/i; }\n    static imageIdToFrames(imageId) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const range = match[2].split('-').map((it) => Number(it));\n        if (range.length === 1) {\n            return range[0];\n        }\n        return range;\n    }\n    static imageIdToFrameEnd(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[1] : range;\n    }\n    static imageIdToFrameStart(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[0] : range;\n    }\n    static framesToString(range) {\n        if (Array.isArray(range)) {\n            return `${range[0]}-${range[1]}`;\n        }\n        return String(range);\n    }\n    static framesToImageId(imageId, range) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const newRangeString = this.framesToString(range);\n        return imageId.replace(this.frameRangeExtractor, `${match[1]}${newRangeString}`);\n    }\n}\n","export default class PointsManager {\n    constructor(configuration = {}) {\n        this._dimensions = 3;\n        this._length = 0;\n        this._byteSize = 4;\n        this.growSize = 128;\n        const { initialSize = 1024, dimensions = 3, growSize = 128, } = configuration;\n        const itemLength = initialSize * dimensions;\n        this.growSize = growSize;\n        this.array = new ArrayBuffer(itemLength * this._byteSize);\n        this.data = new Float32Array(this.array);\n        this._dimensions = dimensions;\n    }\n    forEach(func) {\n        for (let i = 0; i < this._length; i++) {\n            func(this.getPoint(i), i);\n        }\n    }\n    get length() {\n        return this._length;\n    }\n    get dimensions() {\n        return this._dimensions;\n    }\n    get dimensionLength() {\n        return this._length * this._dimensions;\n    }\n    getPoint(index) {\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        return this.data.subarray(offset, offset + this._dimensions);\n    }\n    getPointArray(index) {\n        const array = [];\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        for (let i = 0; i < this._dimensions; i++) {\n            array.push(this.data[i + offset]);\n        }\n        return array;\n    }\n    grow(additionalSize = 1, growSize = this.growSize) {\n        if (this.dimensionLength + additionalSize * this._dimensions <=\n            this.data.length) {\n            return;\n        }\n        const newSize = this.data.length + growSize;\n        const newArray = new ArrayBuffer(newSize * this._dimensions * this._byteSize);\n        const newData = new Float32Array(newArray);\n        newData.set(this.data);\n        this.data = newData;\n        this.array = newArray;\n    }\n    reverse() {\n        const midLength = Math.floor(this._length / 2);\n        for (let i = 0; i < midLength; i++) {\n            const indexStart = i * this._dimensions;\n            const indexEnd = (this._length - 1 - i) * this._dimensions;\n            for (let dimension = 0; dimension < this._dimensions; dimension++) {\n                const valueStart = this.data[indexStart + dimension];\n                this.data[indexStart + dimension] = this.data[indexEnd + dimension];\n                this.data[indexEnd + dimension] = valueStart;\n            }\n        }\n    }\n    getTypedArray() {\n        return this.data;\n    }\n    push(point) {\n        this.grow(1);\n        const offset = this.length * this._dimensions;\n        for (let i = 0; i < this._dimensions; i++) {\n            this.data[i + offset] = point[i];\n        }\n        this._length++;\n    }\n    map(f) {\n        const mapData = [];\n        for (let i = 0; i < this._length; i++) {\n            mapData.push(f(this.getPoint(i), i));\n        }\n        return mapData;\n    }\n    get points() {\n        return this.map((p) => p);\n    }\n    toXYZ() {\n        const xyz = { x: [], y: [] };\n        if (this._dimensions >= 3) {\n            xyz.z = [];\n        }\n        const { x, y, z } = xyz;\n        this.forEach((p) => {\n            x.push(p[0]);\n            y.push(p[1]);\n            if (z) {\n                z.push(p[2]);\n            }\n        });\n        return xyz;\n    }\n    static fromXYZ({ x, y, z }) {\n        const array = PointsManager.create3(x.length);\n        let offset = 0;\n        for (let i = 0; i < x.length; i++) {\n            array.data[offset++] = x[i];\n            array.data[offset++] = y[i];\n            array.data[offset++] = z ? z[i] : 0;\n        }\n        array._length = x.length;\n        return array;\n    }\n    subselect(count = 10, offset = 0) {\n        const selected = new PointsManager({\n            initialSize: count,\n            dimensions: this._dimensions,\n        });\n        for (let i = 0; i < count; i++) {\n            const index = (offset + Math.floor((this.length * i) / count)) % this.length;\n            selected.push(this.getPoint(index));\n        }\n        return selected;\n    }\n    static create3(initialSize = 128, points) {\n        initialSize = Math.max(initialSize, points?.length || 0);\n        const newPoints = new PointsManager({ initialSize, dimensions: 3 });\n        if (points) {\n            points.forEach((point) => newPoints.push(point));\n        }\n        return newPoints;\n    }\n    static create2(initialSize = 128) {\n        return new PointsManager({ initialSize, dimensions: 2 });\n    }\n}\n","export class PromiseIterator extends Promise {\n}\nexport default class ProgressiveIterator {\n    constructor(name) {\n        this.name = name || 'unknown';\n    }\n    static as(promise) {\n        if (promise.iterator) {\n            return promise.iterator;\n        }\n        const iterator = new ProgressiveIterator('as iterator');\n        promise.then((v) => {\n            try {\n                iterator.add(v, true);\n            }\n            catch (e) {\n                iterator.reject(e);\n            }\n        }, (reason) => {\n            iterator.reject(reason);\n        });\n        return iterator;\n    }\n    add(x, done = false) {\n        this.nextValue = x;\n        this.done ||= done;\n        if (this.waiting) {\n            this.waiting.resolve(x);\n            this.waiting = undefined;\n        }\n    }\n    resolve() {\n        this.done = true;\n        if (this.waiting) {\n            this.waiting.resolve(this.nextValue);\n            this.waiting = undefined;\n        }\n    }\n    reject(reason) {\n        this.rejectReason = reason;\n        this.waiting?.reject(reason);\n    }\n    getRecent() {\n        if (this.rejectReason) {\n            throw this.rejectReason;\n        }\n        return this.nextValue;\n    }\n    async *[Symbol.asyncIterator]() {\n        while (!this.done) {\n            if (this.rejectReason) {\n                throw this.rejectReason;\n            }\n            if (this.nextValue !== undefined) {\n                yield this.nextValue;\n                if (this.done) {\n                    break;\n                }\n            }\n            if (!this.waiting) {\n                this.waiting = {};\n                this.waiting.promise = new Promise((resolve, reject) => {\n                    this.waiting.resolve = resolve;\n                    this.waiting.reject = reject;\n                });\n            }\n            await this.waiting.promise;\n        }\n        yield this.nextValue;\n    }\n    async forEach(callback, errorCallback) {\n        let index = 0;\n        try {\n            for await (const value of this) {\n                const { done } = this;\n                try {\n                    await callback(value, done, index);\n                    index++;\n                }\n                catch (e) {\n                    if (!done) {\n                        console.warn('Caught exception in intermediate value', e);\n                        continue;\n                    }\n                    if (errorCallback) {\n                        errorCallback(e, done);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        catch (e) {\n            if (errorCallback) {\n                errorCallback(e, true);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    generate(processFunction, errorCallback) {\n        return processFunction(this, this.reject.bind(this)).then(() => {\n            if (!this.done) {\n                this.resolve();\n            }\n        }, (reason) => {\n            this.reject(reason);\n            if (errorCallback) {\n                errorCallback(reason);\n            }\n            else {\n                console.warn(\"Couldn't process because\", reason);\n            }\n        });\n    }\n    async nextPromise() {\n        for await (const i of this) {\n            if (i) {\n                return i;\n            }\n        }\n        return this.nextValue;\n    }\n    async donePromise() {\n        for await (const i of this) {\n        }\n        return this.nextValue;\n    }\n    getNextPromise() {\n        const promise = this.nextPromise();\n        promise.iterator = this;\n        return promise;\n    }\n    getDonePromise() {\n        const promise = this.donePromise();\n        promise.iterator = this;\n        return promise;\n    }\n}\n","const ADJACENT_ALL = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n    [0, 0, 1],\n];\nconst ADJACENT_SINGLE_PLANE = [\n    [0, -1, 0],\n    [0, 1, 0],\n];\nconst ADJACENT_IN = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n];\nconst ADJACENT_OUT = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\nexport default class RLEVoxelMap {\n    static copyMap(destination, source) {\n        for (const [index, row] of source.rows) {\n            destination.rows.set(index, structuredClone(row));\n        }\n    }\n    constructor(width, height, depth = 1) {\n        this.rows = new Map();\n        this.height = 1;\n        this.width = 1;\n        this.depth = 1;\n        this.jMultiple = 1;\n        this.kMultiple = 1;\n        this.numComps = 1;\n        this.pixelDataConstructor = Uint8Array;\n        this.updateScalarData = function (scalarData) {\n            scalarData.fill(0);\n            const callback = (index, rle, row) => {\n                const { start, end, value } = rle;\n                for (let i = start; i < end; i++) {\n                    scalarData[index + i] = value;\n                }\n            };\n            this.forEach(callback);\n        };\n        this.get = (index) => {\n            const i = index % this.jMultiple;\n            const j = (index - i) / this.jMultiple;\n            const rle = this.getRLE(i, j);\n            return rle?.value ?? this.defaultValue;\n        };\n        this.getRun = (j, k) => {\n            const runIndex = j + k * this.height;\n            return this.rows.get(runIndex);\n        };\n        this.set = (index, value) => {\n            if (value === undefined) {\n                return;\n            }\n            const i = index % this.width;\n            const j = (index - i) / this.width;\n            const row = this.rows.get(j);\n            if (!row) {\n                this.rows.set(j, [{ start: i, end: i + 1, value }]);\n                return;\n            }\n            const rleIndex = this.findIndex(row, i);\n            const rle1 = row[rleIndex];\n            const rle0 = row[rleIndex - 1];\n            if (!rle1) {\n                if (!rle0 || rle0.value !== value || rle0.end !== i) {\n                    row[rleIndex] = { start: i, end: i + 1, value };\n                    return;\n                }\n                rle0.end++;\n                return;\n            }\n            const { start, end, value: oldValue } = rle1;\n            if (value === oldValue && i >= start) {\n                return;\n            }\n            const rleInsert = { start: i, end: i + 1, value };\n            const isAfter = i > start;\n            const insertIndex = isAfter ? rleIndex + 1 : rleIndex;\n            const rlePrev = isAfter ? rle1 : rle0;\n            let rleNext = isAfter ? row[rleIndex + 1] : rle1;\n            if (rlePrev?.value === value && rlePrev?.end === i) {\n                rlePrev.end++;\n                if (rleNext?.value === value && rleNext.start === i + 1) {\n                    rlePrev.end = rleNext.end;\n                    row.splice(rleIndex, 1);\n                }\n                else if (rleNext?.start === i) {\n                    rleNext.start++;\n                    if (rleNext.start === rleNext.end) {\n                        row.splice(rleIndex, 1);\n                        rleNext = row[rleIndex];\n                        if (rleNext?.start === i + 1 && rleNext.value === value) {\n                            rlePrev.end = rleNext.end;\n                            row.splice(rleIndex, 1);\n                        }\n                    }\n                }\n                return;\n            }\n            if (rleNext?.value === value && rleNext.start === i + 1) {\n                rleNext.start--;\n                if (rlePrev?.end > i) {\n                    rlePrev.end = i;\n                    if (rlePrev.end === rlePrev.start) {\n                        row.splice(rleIndex, 1);\n                    }\n                }\n                return;\n            }\n            if (rleNext?.start === i && rleNext.end === i + 1) {\n                rleNext.value = value;\n                const nextnext = row[rleIndex + 1];\n                if (nextnext?.start == i + 1 && nextnext.value === value) {\n                    row.splice(rleIndex + 1, 1);\n                    rleNext.end = nextnext.end;\n                }\n                return;\n            }\n            if (i === rleNext?.start) {\n                rleNext.start++;\n            }\n            if (isAfter && end > i + 1) {\n                row.splice(insertIndex, 0, rleInsert, {\n                    start: i + 1,\n                    end: rlePrev.end,\n                    value: rlePrev.value,\n                });\n            }\n            else {\n                row.splice(insertIndex, 0, rleInsert);\n            }\n            if (rlePrev?.end > i) {\n                rlePrev.end = i;\n            }\n        };\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.jMultiple = width;\n        this.kMultiple = this.jMultiple * height;\n    }\n    static { this.getScalarData = function (ArrayType = Uint8ClampedArray) {\n        const scalarData = new ArrayType(this.frameSize);\n        this.map.updateScalarData(scalarData);\n        return scalarData;\n    }; }\n    toIJK(index) {\n        const i = index % this.jMultiple;\n        const j = ((index - i) / this.jMultiple) % this.height;\n        const k = Math.floor(index / this.kMultiple);\n        return [i, j, k];\n    }\n    toIndex([i, j, k]) {\n        return i + k * this.kMultiple + j * this.jMultiple;\n    }\n    getRLE(i, j, k = 0) {\n        const row = this.rows.get(j + k * this.height);\n        if (!row) {\n            return;\n        }\n        const index = this.findIndex(row, i);\n        const rle = row[index];\n        return i >= rle?.start ? rle : undefined;\n    }\n    has(index) {\n        const i = index % this.jMultiple;\n        const j = (index - i) / this.jMultiple;\n        const rle = this.getRLE(i, j);\n        return rle?.value !== undefined;\n    }\n    delete(index) {\n        const i = index % this.width;\n        const j = (index - i) / this.width;\n        const row = this.rows.get(j);\n        if (!row) {\n            return;\n        }\n        const rleIndex = this.findIndex(row, i);\n        const rle = row[rleIndex];\n        if (!rle || rle.start > i) {\n            return;\n        }\n        if (rle.end === i + 1) {\n            rle.end--;\n            if (rle.start >= rle.end) {\n                row.splice(rleIndex, 1);\n                if (!row.length) {\n                    this.rows.delete(j);\n                }\n            }\n            return;\n        }\n        if (rle.start === i) {\n            rle.start++;\n            return;\n        }\n        const newRle = {\n            value: rle.value,\n            start: i + 1,\n            end: rle.end,\n        };\n        rle.end = i;\n        row.splice(rleIndex + 1, 0, newRle);\n    }\n    findIndex(row, i) {\n        for (let index = 0; index < row.length; index++) {\n            const { end: iEnd } = row[index];\n            if (i < iEnd) {\n                return index;\n            }\n        }\n        return row.length;\n    }\n    forEach(callback, options) {\n        const rowModified = options?.rowModified;\n        for (const [baseIndex, row] of this.rows) {\n            const rowToUse = rowModified ? [...row] : row;\n            for (const rle of rowToUse) {\n                callback(baseIndex * this.width, rle, row);\n            }\n        }\n    }\n    forEachRow(callback) {\n        for (const [baseIndex, row] of this.rows) {\n            callback(baseIndex * this.width, row);\n        }\n    }\n    clear() {\n        this.rows.clear();\n    }\n    keys() {\n        return [...this.rows.keys()];\n    }\n    getPixelData(k = 0, pixelData) {\n        if (!pixelData) {\n            pixelData = new this.pixelDataConstructor(this.width * this.height * this.numComps);\n        }\n        else {\n            pixelData.fill(0);\n        }\n        const { width, height, numComps } = this;\n        for (let j = 0; j < height; j++) {\n            const row = this.getRun(j, k);\n            if (!row) {\n                continue;\n            }\n            if (numComps === 1) {\n                for (const rle of row) {\n                    const rowOffset = j * width;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i++) {\n                        pixelData[rowOffset + i] = value;\n                    }\n                }\n            }\n            else {\n                for (const rle of row) {\n                    const rowOffset = j * width * numComps;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i += numComps) {\n                        for (let comp = 0; comp < numComps; comp++) {\n                            pixelData[rowOffset + i + comp] = value[comp];\n                        }\n                    }\n                }\n            }\n        }\n        return pixelData;\n    }\n    floodFill(i, j, k, value, options) {\n        const rle = this.getRLE(i, j, k);\n        if (!rle) {\n            throw new Error(`Initial point ${i},${j},${k} isn't in the RLE`);\n        }\n        const stack = [[rle, j, k]];\n        const replaceValue = rle.value;\n        if (replaceValue === value) {\n            throw new Error(`source (${replaceValue}) and destination (${value}) are identical`);\n        }\n        return this.flood(stack, replaceValue, value, options);\n    }\n    flood(stack, sourceValue, value, options) {\n        let sum = 0;\n        const { planar = true, diagonals = true, singlePlane = false, } = options || {};\n        const childOptions = { planar, diagonals, singlePlane };\n        while (stack.length) {\n            const top = stack.pop();\n            const [current] = top;\n            if (current.value !== sourceValue) {\n                continue;\n            }\n            current.value = value;\n            sum += current.end - current.start;\n            const adjacents = this.findAdjacents(top, childOptions).filter((adjacent) => adjacent && adjacent[0].value === sourceValue);\n            stack.push(...adjacents);\n        }\n        return sum;\n    }\n    fillFrom(getter, boundsIJK) {\n        for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n            for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                let rle;\n                let row;\n                for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                    const value = getter(i, j, k);\n                    if (value === undefined) {\n                        rle = undefined;\n                        continue;\n                    }\n                    if (!row) {\n                        row = [];\n                        this.rows.set(j + k * this.height, row);\n                    }\n                    if (rle && rle.value !== value) {\n                        rle = undefined;\n                    }\n                    if (!rle) {\n                        rle = { start: i, end: i, value };\n                        row.push(rle);\n                    }\n                    rle.end++;\n                }\n            }\n        }\n    }\n    findAdjacents(item, { diagonals = true, planar = true, singlePlane = false }) {\n        const [rle, j, k, adjacentsDelta] = item;\n        const { start, end } = rle;\n        const leftRle = start > 0 && this.getRLE(start - 1, j, k);\n        const rightRle = end < this.width && this.getRLE(end, j, k);\n        const range = diagonals\n            ? [start > 0 ? start - 1 : start, end < this.width ? end + 1 : end]\n            : [start, end];\n        const adjacents = [];\n        if (leftRle) {\n            adjacents.push([leftRle, j, k]);\n        }\n        if (rightRle) {\n            adjacents.push([rightRle, j, k]);\n        }\n        for (const delta of adjacentsDelta ||\n            (singlePlane ? ADJACENT_SINGLE_PLANE : ADJACENT_ALL)) {\n            const [, delta1, delta2] = delta;\n            const testJ = delta1 + j;\n            const testK = delta2 + k;\n            if (testJ < 0 || testJ >= this.height) {\n                continue;\n            }\n            if (testK < 0 || testK >= this.depth) {\n                continue;\n            }\n            const row = this.getRun(testJ, testK);\n            if (!row) {\n                continue;\n            }\n            for (const testRle of row) {\n                const newAdjacentDelta = adjacentsDelta ||\n                    (singlePlane && ADJACENT_SINGLE_PLANE) ||\n                    (planar && delta2 > 0 && ADJACENT_OUT) ||\n                    (planar && delta2 < 0 && ADJACENT_IN) ||\n                    ADJACENT_ALL;\n                if (!(testRle.end <= range[0] || testRle.start >= range[1])) {\n                    adjacents.push([testRle, testJ, testK, newAdjacentDelta]);\n                }\n            }\n        }\n        return adjacents;\n    }\n}\n","export function isImageActor(actorEntry) {\n    return (actorIsA(actorEntry, 'vtkVolume') || actorIsA(actorEntry, 'vtkImageSlice'));\n}\nexport function actorIsA(actorEntry, actorType) {\n    const actorToCheck = 'isA' in actorEntry ? actorEntry : actorEntry.actor;\n    if (!actorToCheck) {\n        return false;\n    }\n    return !!actorToCheck.isA(actorType);\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nexport default function applyPreset(actor, preset) {\n    const colorTransferArray = preset.colorTransfer\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const { shiftRange } = getShiftRange(colorTransferArray);\n    const min = shiftRange[0];\n    const width = shiftRange[1] - shiftRange[0];\n    const cfun = vtkColorTransferFunction.newInstance();\n    const normColorTransferValuePoints = [];\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        let value = colorTransferArray[i];\n        const r = colorTransferArray[i + 1];\n        const g = colorTransferArray[i + 2];\n        const b = colorTransferArray[i + 3];\n        value = (value - min) / width;\n        normColorTransferValuePoints.push([value, r, g, b]);\n    }\n    applyPointsToRGBFunction(normColorTransferValuePoints, shiftRange, cfun);\n    actor.getProperty().setRGBTransferFunction(0, cfun);\n    const scalarOpacityArray = preset.scalarOpacity\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const ofun = vtkPiecewiseFunction.newInstance();\n    const normPoints = [];\n    for (let i = 0; i < scalarOpacityArray.length; i += 2) {\n        let value = scalarOpacityArray[i];\n        const opacity = scalarOpacityArray[i + 1];\n        value = (value - min) / width;\n        normPoints.push([value, opacity]);\n    }\n    applyPointsToPiecewiseFunction(normPoints, shiftRange, ofun);\n    const property = actor.getProperty();\n    property.setScalarOpacity(0, ofun);\n    const [gradientMinValue, gradientMinOpacity, gradientMaxValue, gradientMaxOpacity,] = preset.gradientOpacity.split(' ').splice(1).map(parseFloat);\n    property.setUseGradientOpacity(0, true);\n    property.setGradientOpacityMinimumValue(0, gradientMinValue);\n    property.setGradientOpacityMinimumOpacity(0, gradientMinOpacity);\n    property.setGradientOpacityMaximumValue(0, gradientMaxValue);\n    property.setGradientOpacityMaximumOpacity(0, gradientMaxOpacity);\n    if (preset.interpolation === '1') {\n        property.setInterpolationTypeToFastLinear();\n    }\n    property.setShade(preset.shade === '1');\n    const ambient = parseFloat(preset.ambient);\n    const diffuse = parseFloat(preset.diffuse);\n    const specular = parseFloat(preset.specular);\n    const specularPower = parseFloat(preset.specularPower);\n    property.setAmbient(ambient);\n    property.setDiffuse(diffuse);\n    property.setSpecular(specular);\n    property.setSpecularPower(specularPower);\n}\nfunction getShiftRange(colorTransferArray) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        min = Math.min(min, colorTransferArray[i]);\n        max = Math.max(max, colorTransferArray[i]);\n    }\n    const center = (max - min) / 2;\n    return {\n        shiftRange: [-center, center],\n        min,\n        max,\n    };\n}\nfunction applyPointsToRGBFunction(points, range, cfun) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, r, g, b]) => [\n        x * width + range[0],\n        r,\n        g,\n        b,\n    ]);\n    cfun.removeAllPoints();\n    rescaled.forEach(([x, r, g, b]) => cfun.addRGBPoint(x, r, g, b));\n    return rescaled;\n}\nfunction applyPointsToPiecewiseFunction(points, range, pwf) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, y]) => [x * width + range[0], y]);\n    pwf.removeAllPoints();\n    rescaled.forEach(([x, y]) => pwf.addPoint(x, y));\n    return rescaled;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nconst autoLoad = (volumeId) => {\n    const renderingEngineAndViewportIds = getRenderingEngineAndViewportsContainingVolume(volumeId);\n    if (!renderingEngineAndViewportIds?.length) {\n        return;\n    }\n    renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n        if (!renderingEngine.hasBeenDestroyed) {\n            renderingEngine.renderViewports(viewportIds);\n        }\n    });\n};\nfunction getRenderingEngineAndViewportsContainingVolume(volumeId) {\n    const renderingEnginesArray = getRenderingEngines();\n    const renderingEngineAndViewportIds = [];\n    renderingEnginesArray.forEach((renderingEngine) => {\n        const viewports = getViewportsWithVolumeId(volumeId);\n        if (viewports.length) {\n            renderingEngineAndViewportIds.push({\n                renderingEngine,\n                viewportIds: viewports.map((viewport) => viewport.id),\n            });\n        }\n    });\n    return renderingEngineAndViewportIds;\n}\nexport default autoLoad;\n","import * as metaData from '../metaData';\nimport { MetadataModules, VOILUTFunctionType } from '../enums';\nexport function getValidVOILUTFunction(voiLUTFunction) {\n    if (!Object.values(VOILUTFunctionType).includes(voiLUTFunction)) {\n        return VOILUTFunctionType.LINEAR;\n    }\n    return voiLUTFunction;\n}\nexport function getImagePlaneModule(imageId) {\n    const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, imageId);\n    const newImagePlaneModule = {\n        ...imagePlaneModule,\n    };\n    if (!newImagePlaneModule.columnPixelSpacing) {\n        newImagePlaneModule.columnPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.rowPixelSpacing) {\n        newImagePlaneModule.rowPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.columnCosines) {\n        newImagePlaneModule.columnCosines = [0, 1, 0];\n    }\n    if (!newImagePlaneModule.rowCosines) {\n        newImagePlaneModule.rowCosines = [1, 0, 0];\n    }\n    if (!newImagePlaneModule.imagePositionPatient) {\n        newImagePlaneModule.imagePositionPatient = [0, 0, 0];\n    }\n    if (!newImagePlaneModule.imageOrientationPatient) {\n        newImagePlaneModule.imageOrientationPatient = new Float32Array([\n            1, 0, 0, 0, 1, 0,\n        ]);\n    }\n    return newImagePlaneModule;\n}\nexport function calibrateImagePlaneModule(imageId, imagePlaneModule, currentCalibration) {\n    const calibration = metaData.get('calibratedPixelSpacing', imageId);\n    const isUpdated = currentCalibration !== calibration;\n    const { scale } = calibration || {};\n    const hasPixelSpacing = scale > 0 || imagePlaneModule.rowPixelSpacing > 0;\n    imagePlaneModule.calibration = calibration;\n    if (!isUpdated) {\n        return { imagePlaneModule, hasPixelSpacing };\n    }\n    return {\n        imagePlaneModule,\n        hasPixelSpacing,\n        calibrationEvent: {\n            scale,\n            calibration,\n        },\n    };\n}\nexport function buildMetadata(image) {\n    const imageId = image.imageId;\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = metaData.get('imagePixelModule', imageId);\n    const { windowWidth, windowCenter, voiLUTFunction } = image;\n    const { modality } = metaData.get('generalSeriesModule', imageId);\n    const imageIdScalingFactor = metaData.get('scalingModule', imageId);\n    const calibration = metaData.get(MetadataModules.CALIBRATION, imageId);\n    const voiLUTFunctionEnum = getValidVOILUTFunction(voiLUTFunction);\n    const imagePlaneModule = getImagePlaneModule(imageId);\n    return {\n        calibration,\n        scalingFactor: imageIdScalingFactor,\n        voiLUTFunction: voiLUTFunctionEnum,\n        modality,\n        imagePlaneModule,\n        imagePixelModule: {\n            bitsAllocated,\n            bitsStored,\n            samplesPerPixel,\n            highBit,\n            photometricInterpretation,\n            pixelRepresentation,\n            windowWidth: windowWidth,\n            windowCenter: windowCenter,\n            modality,\n            voiLUTFunction: voiLUTFunctionEnum,\n        },\n    };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { getConfiguration } from '../init';\nexport default function calculateSpacingBetweenImageIds(imageIds) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n    const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    const refIppVec = vec3.fromValues(referenceImagePositionPatient[0], referenceImagePositionPatient[1], referenceImagePositionPatient[2]);\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    let spacing;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        const ippVec = vec3.fromValues(imagePositionPatient[0], imagePositionPatient[1], imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, ippVec);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        const numImages = distanceImagePairs.length;\n        spacing =\n            Math.abs(distanceImagePairs[numImages - 1].distance -\n                distanceImagePairs[0].distance) /\n                (numImages - 1);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        const metadataForMiddleImage = metaData.get('imagePlaneModule', prefetchedImageIds[1]);\n        if (!metadataForMiddleImage) {\n            throw new Error('Incomplete metadata required for volume construction.');\n        }\n        const positionVector = vec3.create();\n        const middleIppVec = vec3.fromValues(metadataForMiddleImage.imagePositionPatient[0], metadataForMiddleImage.imagePositionPatient[1], metadataForMiddleImage.imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, middleIppVec);\n        const distanceBetweenFirstAndMiddleImages = vec3.dot(positionVector, scanAxisNormal);\n        spacing =\n            Math.abs(distanceBetweenFirstAndMiddleImages) /\n                Math.floor(imageIds.length / 2);\n    }\n    const { sliceThickness, spacingBetweenSlices } = metaData.get('imagePlaneModule', imageIds[0]);\n    const { strictZSpacingForVolumeViewport } = getConfiguration().rendering;\n    if ((spacing === 0 || isNaN(spacing)) && !strictZSpacingForVolumeViewport) {\n        if (spacingBetweenSlices) {\n            console.debug('Could not calculate spacing. Using spacingBetweenSlices');\n            spacing = spacingBetweenSlices;\n        }\n        else if (sliceThickness) {\n            console.debug('Could not calculate spacing and no spacingBetweenSlices. Using sliceThickness');\n            spacing = sliceThickness;\n        }\n        else {\n            console.debug('Could not calculate spacing. The VolumeViewport visualization is compromised. Setting spacing to 1 to render');\n            spacing = 1;\n        }\n    }\n    return spacing;\n}\n","function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nexport { clamp as default, clamp };\n","import vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport isEqual from './isEqual';\nimport { actorIsA } from './actorCheck';\nconst _colormaps = new Map();\nfunction registerColormap(colormap) {\n    _colormaps.set(colormap.Name, colormap);\n}\nfunction getColormap(name) {\n    return _colormaps.get(name);\n}\nfunction getColormapNames() {\n    return Array.from(_colormaps.keys());\n}\nfunction findMatchingColormap(rgbPoints, actor) {\n    const colormapsVTK = vtkColorMaps.rgbPresetNames.map((presetName) => vtkColorMaps.getPresetByName(presetName));\n    const colormapsCS3D = getColormapNames().map((colormapName) => getColormap(colormapName));\n    const colormaps = colormapsVTK.concat(colormapsCS3D);\n    const matchedColormap = colormaps.find((colormap) => {\n        const { RGBPoints: presetRGBPoints } = colormap;\n        if (presetRGBPoints.length !== rgbPoints.length) {\n            return false;\n        }\n        for (let i = 0; i < presetRGBPoints.length; i += 4) {\n            if (!isEqual(presetRGBPoints.slice(i + 1, i + 4), rgbPoints.slice(i + 1, i + 4))) {\n                return false;\n            }\n        }\n        return true;\n    });\n    if (!matchedColormap) {\n        return null;\n    }\n    const opacity = [];\n    if (actorIsA(actor, 'vtkVolume')) {\n        const opacityPoints = actor\n            .getProperty()\n            .getScalarOpacity(0)\n            .getDataPointer();\n        if (!opacityPoints) {\n            return {\n                name: matchedColormap.Name,\n            };\n        }\n        for (let i = 0; i < opacityPoints.length; i += 2) {\n            opacity.push({\n                value: opacityPoints[i],\n                opacity: opacityPoints[i + 1],\n            });\n        }\n    }\n    return {\n        name: matchedColormap.Name,\n        opacity,\n    };\n}\nexport { getColormap, getColormapNames, registerColormap, findMatchingColormap, };\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nexport default function createLinearRGBTransferFunction(voiRange) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    let lower = 0;\n    let upper = 1024;\n    if (voiRange.lower !== undefined && voiRange.upper !== undefined) {\n        lower = voiRange.lower;\n        upper = voiRange.upper;\n    }\n    cfun.addRGBPoint(lower, 0.0, 0.0, 0.0);\n    cfun.addRGBPoint(upper, 1.0, 1.0, 1.0);\n    return cfun;\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport * as windowLevelUtil from './windowLevel';\nimport { logit } from './logit';\nexport default function createSigmoidRGBTransferFunction(voiRange, approximationNodes = 1024) {\n    const { windowWidth, windowCenter } = windowLevelUtil.toWindowLevel(voiRange.lower, voiRange.upper);\n    const range = Array.from({ length: approximationNodes }, (_, i) => (i + 1) / (approximationNodes + 2));\n    const table = range.flatMap((y) => {\n        const x = logit(y, windowCenter, windowWidth);\n        return [x, y, y, y, 0.5, 0.0];\n    });\n    const cfun = vtkColorTransferFunction.newInstance();\n    cfun.buildFunctionFromArray(vtkDataArray.newInstance({\n        values: table,\n        numberOfComponents: 6,\n    }));\n    return cfun;\n}\n","export default function decimate(list, interleave, offset = 0) {\n    const interleaveIndices = [];\n    for (let i = offset; i < list.length; i += interleave) {\n        interleaveIndices.push(i);\n    }\n    return interleaveIndices;\n}\n","export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n    if (typeof obj === 'function') {\n        return obj;\n    }\n    if (typeof structuredClone === 'function') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(deepClone);\n    }\n    else {\n        const clonedObj = {};\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                clonedObj[key] = deepClone(obj[key]);\n            }\n        }\n        return clonedObj;\n    }\n}\n","export default function fnv1aHash(str) {\n    let hash = 0x811c9dc5;\n    for (let i = 0; i < str.length; i++) {\n        hash ^= str.charCodeAt(i);\n        hash +=\n            (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n    }\n    return (hash >>> 0).toString(36);\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { EPSILON } from '../constants';\nexport default function getClosestImageId(imageVolume, worldPos, viewPlaneNormal) {\n    const { direction, spacing, imageIds } = imageVolume;\n    if (!imageIds.length) {\n        return;\n    }\n    const kVector = direction.slice(6, 9);\n    const dotProducts = vec3.dot(kVector, viewPlaneNormal);\n    if (Math.abs(dotProducts) < 1 - EPSILON) {\n        return;\n    }\n    const spacingInNormalDirection = getSpacingInNormalDirection({ direction, spacing }, viewPlaneNormal);\n    const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    let imageIdForTool;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const dir = vec3.create();\n        vec3.sub(dir, worldPos, imagePositionPatient);\n        const dot = vec3.dot(dir, viewPlaneNormal);\n        if (Math.abs(dot) < halfSpacingInNormalDirection) {\n            imageIdForTool = imageId;\n        }\n    }\n    return imageIdForTool;\n}\n","import { vec3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nimport { buildMetadata } from './buildMetadata';\nexport function getImageDataMetadata(image) {\n    const { imagePlaneModule, imagePixelModule, voiLUTFunction, modality, scalingFactor, calibration, } = buildMetadata(image);\n    let { rowCosines, columnCosines } = imagePlaneModule;\n    if (rowCosines == null || columnCosines == null) {\n        rowCosines = [1, 0, 0];\n        columnCosines = [0, 1, 0];\n    }\n    const rowCosineVec = vec3.fromValues(rowCosines[0], rowCosines[1], rowCosines[2]);\n    const colCosineVec = vec3.fromValues(columnCosines[0], columnCosines[1], columnCosines[2]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    let origin = imagePlaneModule.imagePositionPatient;\n    if (origin == null) {\n        origin = [0, 0, 0];\n    }\n    const xSpacing = imagePlaneModule.columnPixelSpacing || image.columnPixelSpacing;\n    const ySpacing = imagePlaneModule.rowPixelSpacing || image.rowPixelSpacing;\n    const xVoxels = image.columns;\n    const yVoxels = image.rows;\n    const zSpacing = EPSILON;\n    const zVoxels = 1;\n    const numberOfComponents = image.numberOfComponents ||\n        _getNumCompsFromPhotometricInterpretation(imagePixelModule.photometricInterpretation);\n    return {\n        numberOfComponents,\n        origin,\n        direction: [...rowCosineVec, ...colCosineVec, ...scanAxisNormal],\n        dimensions: [xVoxels, yVoxels, zVoxels],\n        spacing: [xSpacing, ySpacing, zSpacing],\n        numVoxels: xVoxels * yVoxels * zVoxels,\n        imagePlaneModule,\n        imagePixelModule,\n        bitsAllocated: imagePixelModule.bitsAllocated,\n        voiLUTFunction,\n        modality,\n        scalingFactor,\n        calibration,\n    };\n}\nfunction _getNumCompsFromPhotometricInterpretation(photometricInterpretation) {\n    let numberOfComponents = 1;\n    if (photometricInterpretation === 'RGB' ||\n        photometricInterpretation.includes('YBR') ||\n        photometricInterpretation === 'PALETTE COLOR') {\n        numberOfComponents = 3;\n    }\n    return numberOfComponents;\n}\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getImageSliceDataForVolumeViewport(viewport) {\n    const camera = viewport.getCamera();\n    const { spacingInNormalDirection, imageVolume } = getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n    if (!imageVolume) {\n        return;\n    }\n    const { viewPlaneNormal, focalPoint } = camera;\n    const actorEntry = viewport\n        .getActors()\n        .find((a) => a.referencedId === imageVolume.volumeId ||\n        a.uid === imageVolume.volumeId);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', imageVolume.volumeId);\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    const { min, max, current } = sliceRange;\n    const numberOfSlices = Math.round((max - min) / spacingInNormalDirection) + 1;\n    let imageIndex = ((current - min) / (max - min)) * numberOfSlices;\n    imageIndex = Math.floor(imageIndex);\n    if (imageIndex > numberOfSlices - 1) {\n        imageIndex = numberOfSlices - 1;\n    }\n    else if (imageIndex < 0) {\n        imageIndex = 0;\n    }\n    return {\n        numberOfSlices,\n        imageIndex,\n    };\n}\nexport default getImageSliceDataForVolumeViewport;\n","import * as metaData from '../metaData';\nexport default function getScalingParameters(imageId) {\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n    const { modality } = generalSeriesModule;\n    const scalingParameters = {\n        rescaleSlope: modalityLutModule.rescaleSlope || 1,\n        rescaleIntercept: modalityLutModule.rescaleIntercept ?? 0,\n        modality,\n    };\n    const suvFactor = metaData.get('scalingModule', imageId) || {};\n    return {\n        ...scalingParameters,\n        ...(modality === 'PT' && {\n            suvbw: suvFactor.suvbw,\n            suvbsa: suvFactor.suvbsa,\n            suvlbm: suvFactor.suvlbm,\n        }),\n    };\n}\n","import vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport { EPSILON } from '../constants';\nconst SMALL_EPSILON = EPSILON * EPSILON;\nconst isOne = (v) => Math.abs(Math.abs(v) - 1) < SMALL_EPSILON;\nconst isUnit = (v, off) => isOne(v[off]) || isOne(v[off + 1]) || isOne(v[off + 2]);\nconst isOrthonormal = (v) => isUnit(v, 0) && isUnit(v, 3) && isUnit(v, 6);\nexport default function getSliceRange(volumeActor, viewPlaneNormal, focalPoint) {\n    const imageData = volumeActor.getMapper().getInputData();\n    let corners;\n    const direction = imageData.getDirection();\n    if (isOrthonormal(direction)) {\n        corners = getVolumeActorCorners(volumeActor);\n    }\n    else {\n        const [dx, dy, dz] = imageData.getDimensions();\n        const cornersIdx = [\n            [0, 0, 0],\n            [dx - 1, 0, 0],\n            [0, dy - 1, 0],\n            [dx - 1, dy - 1, 0],\n            [0, 0, dz - 1],\n            [dx - 1, 0, dz - 1],\n            [0, dy - 1, dz - 1],\n            [dx - 1, dy - 1, dz - 1],\n        ];\n        corners = cornersIdx.map((it) => imageData.indexToWorld(it));\n    }\n    const transform = vtkMatrixBuilder\n        .buildFromDegree()\n        .identity()\n        .rotateFromDirections(viewPlaneNormal, [1, 0, 0]);\n    corners.forEach((pt) => transform.apply(pt));\n    const transformedFocalPoint = [...focalPoint];\n    transform.apply(transformedFocalPoint);\n    const currentSlice = transformedFocalPoint[0];\n    let minX = Infinity;\n    let maxX = -Infinity;\n    for (let i = 0; i < 8; i++) {\n        const x = corners[i][0];\n        if (x > maxX) {\n            maxX = x;\n        }\n        if (x < minX) {\n            minX = x;\n        }\n    }\n    return {\n        min: minX,\n        max: maxX,\n        current: currentSlice,\n        actor: volumeActor,\n        viewPlaneNormal,\n        focalPoint,\n    };\n}\n","import { vec3 } from 'gl-matrix';\nexport default function getSpacingInNormalDirection(imageVolume, viewPlaneNormal) {\n    const { direction, spacing } = imageVolume;\n    const iVector = direction.slice(0, 3);\n    const jVector = direction.slice(3, 6);\n    const kVector = direction.slice(6, 9);\n    const dotProducts = [\n        vec3.dot(iVector, viewPlaneNormal),\n        vec3.dot(jVector, viewPlaneNormal),\n        vec3.dot(kVector, viewPlaneNormal),\n    ];\n    const projectedSpacing = vec3.create();\n    vec3.set(projectedSpacing, dotProducts[0] * spacing[0], dotProducts[1] * spacing[1], dotProducts[2] * spacing[2]);\n    const spacingInNormalDirection = vec3.length(projectedSpacing);\n    return spacingInNormalDirection;\n}\n","import cache from '../cache/cache';\nimport { EPSILON } from '../constants';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { getVolumeLoaderSchemes } from '../loaders/volumeLoader';\nimport { getVolumeId } from './getVolumeId';\nconst EPSILON_PART = 1 + EPSILON;\nconst startsWith = (str, starts) => starts === str.substring(0, Math.min(str.length, starts.length));\nconst isPrimaryVolume = (volume) => !!getVolumeLoaderSchemes().find((scheme) => startsWith(volume.volumeId, scheme));\nexport default function getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetId, useSlabThickness = false) {\n    const { viewPlaneNormal } = camera;\n    const volumeActors = viewport.getActors();\n    if (!volumeActors.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const imageVolumes = volumeActors\n        .map((va) => {\n        const actorUID = va.referencedId ?? va.uid;\n        return cache.getVolume(actorUID);\n    })\n        .filter((iv) => !!iv);\n    if (targetId) {\n        const targetVolumeId = getVolumeId(targetId);\n        const imageVolumeIndex = imageVolumes.findIndex((iv) => targetVolumeId.includes(iv.volumeId));\n        const imageVolume = imageVolumes[imageVolumeIndex];\n        const { uid: actorUID } = volumeActors[imageVolumeIndex];\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness);\n        return { imageVolume, spacingInNormalDirection, actorUID };\n    }\n    if (!imageVolumes.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const smallest = {\n        spacingInNormalDirection: Infinity,\n        imageVolume: null,\n        actorUID: null,\n    };\n    const hasPrimaryVolume = imageVolumes.find(isPrimaryVolume);\n    for (let i = 0; i < imageVolumes.length; i++) {\n        const imageVolume = imageVolumes[i];\n        if (hasPrimaryVolume && !isPrimaryVolume(imageVolume)) {\n            continue;\n        }\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport);\n        if (spacingInNormalDirection * EPSILON_PART <\n            smallest.spacingInNormalDirection) {\n            smallest.spacingInNormalDirection = spacingInNormalDirection;\n            smallest.imageVolume = imageVolume;\n            smallest.actorUID = volumeActors[i].uid;\n        }\n    }\n    return smallest;\n}\nfunction getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness = false) {\n    const { slabThickness } = viewport.getProperties();\n    let spacingInNormalDirection = slabThickness;\n    if (!slabThickness || !useSlabThickness) {\n        spacingInNormalDirection = getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n    }\n    return spacingInNormalDirection;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nfunction getViewportsWithVolumeId(volumeId) {\n    const renderingEngines = getRenderingEngines();\n    const targetViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getVolumeViewports();\n        const filteredViewports = viewports.filter((vp) => vp.hasVolumeId(volumeId));\n        targetViewports.push(...filteredViewports);\n    });\n    return targetViewports;\n}\nexport default getViewportsWithVolumeId;\n","export default function getVoiFromSigmoidRGBTransferFunction(cfun) {\n    let cfunRange = [];\n    const [lower, upper] = cfun.getRange();\n    cfun.getTable(lower, upper, 1024, cfunRange);\n    cfunRange = cfunRange.filter((v, k) => k % 3 === 0);\n    const cfunDomain = [...Array(1024).keys()].map((v, k) => {\n        return lower + ((upper - lower) / (1024 - 1)) * k;\n    });\n    const y1 = cfunRange[256];\n    const logy1 = Math.log((1 - y1) / y1);\n    const x1 = cfunDomain[256];\n    const y2 = cfunRange[256 * 3];\n    const logy2 = Math.log((1 - y2) / y2);\n    const x2 = cfunDomain[256 * 3];\n    const ww = Math.round((4 * (x2 - x1)) / (logy1 - logy2));\n    const wc = Math.round(x1 + (ww * logy1) / 4);\n    return [Math.round(wc - ww / 2), Math.round(wc + ww / 2)];\n}\n","export default function getVolumeActorCorners(volumeActor) {\n    const imageData = volumeActor.getMapper().getInputData();\n    const bounds = imageData.extentToBounds(imageData.getExtent());\n    return [\n        [bounds[0], bounds[2], bounds[4]],\n        [bounds[0], bounds[2], bounds[5]],\n        [bounds[0], bounds[3], bounds[4]],\n        [bounds[0], bounds[3], bounds[5]],\n        [bounds[1], bounds[2], bounds[4]],\n        [bounds[1], bounds[2], bounds[5]],\n        [bounds[1], bounds[3], bounds[4]],\n        [bounds[1], bounds[3], bounds[5]],\n    ];\n}\n","export const getVolumeId = (targetId) => {\n    const prefix = 'volumeId:';\n    const str = targetId.includes(prefix)\n        ? targetId.substring(prefix.length)\n        : targetId;\n    const index = str.indexOf('sliceIndex=');\n    return index === -1 ? str : str.substring(0, index - 1);\n};\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness = false) {\n    const camera = viewport.getCamera();\n    const { focalPoint, viewPlaneNormal } = camera;\n    const { spacingInNormalDirection, actorUID } = getTargetVolumeAndSpacingInNormalDir(viewport, camera, volumeId, useSlabThickness);\n    if (!actorUID) {\n        throw new Error(`Could not find image volume with id ${volumeId} in the viewport`);\n    }\n    const actorEntry = viewport.getActor(actorUID);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', actorUID);\n        return null;\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    return {\n        sliceRange,\n        spacingInNormalDirection,\n        camera,\n    };\n}\nexport default getVolumeSliceRangeInfo;\n","import getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nfunction getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness = false) {\n    const { sliceRange, spacingInNormalDirection, camera } = getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness);\n    const { min, max, current } = sliceRange;\n    const numScrollSteps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * numScrollSteps;\n    const currentStepIndex = Math.round(floatingStepNumber);\n    return {\n        numScrollSteps,\n        currentStepIndex,\n        sliceRangeInfo: {\n            sliceRange,\n            spacingInNormalDirection,\n            camera,\n        },\n    };\n}\nexport default getVolumeViewportScrollInfo;\n","export const hasFloatScalingParameters = (scalingParameters) => {\n    const hasFloatRescale = Object.values(scalingParameters).some((value) => typeof value === 'number' && !Number.isInteger(value));\n    return hasFloatRescale;\n};\n","export default function hasNaNValues(input) {\n    if (Array.isArray(input)) {\n        return input.some((value) => Number.isNaN(value));\n    }\n    return Number.isNaN(input);\n}\n","export default function imageIdToURI(imageId) {\n    const colonIndex = imageId.indexOf(':');\n    return imageId.substring(colonIndex + 1);\n}\n","import { addProvider } from '../metaData';\nconst retrieveConfigurationState = new Map();\nconst IMAGE_RETRIEVE_CONFIGURATION = 'imageRetrieveConfiguration';\nconst imageRetrieveMetadataProvider = {\n    IMAGE_RETRIEVE_CONFIGURATION,\n    clear: () => {\n        retrieveConfigurationState.clear();\n    },\n    add: (key, payload) => {\n        retrieveConfigurationState.set(key, payload);\n    },\n    clone: () => {\n        return new Map(retrieveConfigurationState);\n    },\n    restore: (state) => {\n        retrieveConfigurationState.clear();\n        state.forEach((value, key) => {\n            retrieveConfigurationState.set(key, value);\n        });\n    },\n    get: (type, ...queries) => {\n        if (type === IMAGE_RETRIEVE_CONFIGURATION) {\n            return queries\n                .map((query) => retrieveConfigurationState.get(query))\n                .find((it) => it !== undefined);\n        }\n    },\n};\naddProvider(imageRetrieveMetadataProvider.get.bind(imageRetrieveMetadataProvider));\nexport default imageRetrieveMetadataProvider;\n","var EventListenerPhases;\n(function (EventListenerPhases) {\n    EventListenerPhases[EventListenerPhases[\"None\"] = 0] = \"None\";\n    EventListenerPhases[EventListenerPhases[\"Capture\"] = 1] = \"Capture\";\n    EventListenerPhases[EventListenerPhases[\"Bubble\"] = 2] = \"Bubble\";\n})(EventListenerPhases || (EventListenerPhases = {}));\nclass TargetEventListeners {\n    constructor(target) {\n        this._eventListeners = new Map();\n        this._children = new Map();\n        this._target = target;\n    }\n    get isEmpty() {\n        return this._eventListeners.size === 0 && this._children.size === 0;\n    }\n    addEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            let childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                childElementEventListener = new TargetEventListeners(this._target);\n                this._children.set(namespaceToken, childElementEventListener);\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.addEventListener(type, callback, options);\n        }\n        else {\n            this._addEventListener(type, callback, options);\n        }\n    }\n    removeEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            const childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                return;\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.removeEventListener(type, callback, options);\n            if (childElementEventListener.isEmpty) {\n                this._children.delete(namespaceToken);\n            }\n        }\n        else {\n            this._removeEventListener(type, callback, options);\n        }\n    }\n    reset() {\n        Array.from(this._children.entries()).forEach(([namespace, child]) => {\n            child.reset();\n            if (child.isEmpty) {\n                this._children.delete(namespace);\n            }\n            else {\n                throw new Error('Child is not empty and cannot be removed');\n            }\n        });\n        this._unregisterAllEvents();\n    }\n    _addEventListener(type, callback, options) {\n        let listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            listenersMap = new Map();\n            this._eventListeners.set(type, listenersMap);\n        }\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const registeredPhases = listenersMap.get(callback) ?? EventListenerPhases.None;\n        if (registeredPhases & listenerPhase) {\n            console.warn('A listener is already registered for this phase');\n            return;\n        }\n        listenersMap.set(callback, registeredPhases | listenerPhase);\n        this._target.addEventListener(type, callback, options);\n    }\n    _removeEventListener(type, callback, options) {\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            return;\n        }\n        const callbacks = callback ? [callback] : Array.from(listenersMap.keys());\n        callbacks.forEach((callbackItem) => {\n            const registeredPhases = listenersMap.get(callbackItem) ?? EventListenerPhases.None;\n            const phaseRegistered = !!(registeredPhases & listenerPhase);\n            if (!phaseRegistered) {\n                return;\n            }\n            this._target.removeEventListener(type, callbackItem, options);\n            const newListenerPhase = registeredPhases ^ listenerPhase;\n            if (newListenerPhase === EventListenerPhases.None) {\n                listenersMap.delete(callbackItem);\n            }\n            else {\n                listenersMap.set(callbackItem, newListenerPhase);\n            }\n        });\n        if (!listenersMap.size) {\n            this._eventListeners.delete(type);\n        }\n    }\n    _unregisterAllListeners(type, listenersMap) {\n        Array.from(listenersMap.entries()).forEach(([listener, eventPhases]) => {\n            const startPhase = EventListenerPhases.Capture;\n            for (let currentPhase = startPhase; eventPhases; currentPhase <<= 1) {\n                if (!(eventPhases & currentPhase)) {\n                    continue;\n                }\n                const useCapture = currentPhase === EventListenerPhases.Capture ? true : false;\n                this.removeEventListener(type, listener, { capture: useCapture });\n                eventPhases ^= currentPhase;\n            }\n        });\n    }\n    _unregisterAllEvents() {\n        Array.from(this._eventListeners.entries()).forEach(([type, listenersMap]) => {\n            this._unregisterAllListeners(type, listenersMap);\n        });\n    }\n}\nexport { TargetEventListeners as default, TargetEventListeners };\n","import TargetEventListeners from './TargetEventListeners';\nclass MultiTargetEventListenerManager {\n    constructor() {\n        this._targetsEventListeners = new Map();\n    }\n    addEventListener(target, type, callback, options) {\n        let eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            eventListeners = new TargetEventListeners(target);\n            this._targetsEventListeners.set(target, eventListeners);\n        }\n        eventListeners.addEventListener(type, callback, options);\n    }\n    removeEventListener(target, type, callback, options) {\n        const eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            return;\n        }\n        eventListeners.removeEventListener(type, callback, options);\n        if (eventListeners.isEmpty) {\n            this._targetsEventListeners.delete(target);\n        }\n    }\n    reset() {\n        Array.from(this._targetsEventListeners.entries()).forEach(([target, targetEventListeners]) => {\n            targetEventListeners.reset();\n            this._targetsEventListeners.delete(target);\n        });\n    }\n}\nexport { MultiTargetEventListenerManager as default, MultiTargetEventListenerManager, };\n","export default function scaleRGBTransferFunction(rgbTransferFunction, scalingFactor) {\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = nodeValue1[1] * scalingFactor;\n        nodeValue1[2] = nodeValue1[2] * scalingFactor;\n        nodeValue1[3] = nodeValue1[3] * scalingFactor;\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","export default function getMinMax(storedPixelData) {\n    let min = storedPixelData[0];\n    let max = storedPixelData[0];\n    let storedPixel;\n    const numPixels = storedPixelData.length;\n    for (let index = 1; index < numPixels; index++) {\n        storedPixel = storedPixelData[index];\n        min = Math.min(min, storedPixel);\n        max = Math.max(max, storedPixel);\n    }\n    return {\n        min,\n        max,\n    };\n}\n","const LAST_RUNTIME_ID = Symbol('LastRuntimeId');\nconst GLOBAL_CONTEXT = {};\nconst DEFAULT_MAX = 0xffffffff;\nconst DEFAULT_SEPARATOR = '-';\nexport default function getRuntimeId(context, separator, max) {\n    return getNextRuntimeId(context !== null && typeof context === 'object' ? context : GLOBAL_CONTEXT, LAST_RUNTIME_ID, (typeof max === 'number' && max > 0 ? max : DEFAULT_MAX) >>> 0).join(typeof separator === 'string' ? separator : DEFAULT_SEPARATOR);\n}\nfunction getNextRuntimeId(context, symbol, max) {\n    let idComponents = context[symbol];\n    if (!(idComponents instanceof Array)) {\n        idComponents = [0];\n        Object.defineProperty(context, symbol, { value: idComponents });\n    }\n    for (let carry = true, i = 0; carry && i < idComponents.length; ++i) {\n        let n = idComponents[i] | 0;\n        if (n < max) {\n            carry = false;\n            n = n + 1;\n        }\n        else {\n            n = 0;\n            if (i + 1 === idComponents.length) {\n                idComponents.push(0);\n            }\n        }\n        idComponents[i] = n;\n    }\n    return idComponents;\n}\n","import imageIdToURI from './imageIdToURI';\nconst state = {};\nconst metadataProvider = {\n    add: (imageId, payload) => {\n        const imageURI = imageIdToURI(imageId);\n        state[imageURI] = payload;\n    },\n    get: (type, imageId) => {\n        if (type === 'calibratedPixelSpacing') {\n            const imageURI = imageIdToURI(imageId);\n            return state[imageURI];\n        }\n    },\n};\nexport default metadataProvider;\n","export default function isOpposite(v1, v2, tolerance = 1e-5) {\n    return (Math.abs(v1[0] + v2[0]) < tolerance &&\n        Math.abs(v1[1] + v2[1]) < tolerance &&\n        Math.abs(v1[2] + v2[2]) < tolerance);\n}\n","export default function indexWithinDimensions(index, dimensions) {\n    if (index[0] < 0 ||\n        index[0] >= dimensions[0] ||\n        index[1] < 0 ||\n        index[1] >= dimensions[1] ||\n        index[2] < 0 ||\n        index[2] >= dimensions[2]) {\n        return false;\n    }\n    return true;\n}\n","import { getRenderingEngines, getRenderingEngine, } from '../RenderingEngine/getRenderingEngine';\nfunction getVolumeViewportsContainingSameVolumes(targetViewport, renderingEngineId) {\n    let renderingEngines;\n    if (renderingEngineId) {\n        renderingEngines = [getRenderingEngine(renderingEngineId)];\n    }\n    else {\n        renderingEngines = getRenderingEngines();\n    }\n    const sameVolumesViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const targetActors = targetViewport.getActors();\n        const viewports = renderingEngine.getVolumeViewports();\n        for (const vp of viewports) {\n            const vpActors = vp.getActors();\n            if (vpActors.length !== targetActors.length) {\n                continue;\n            }\n            const sameVolumes = targetActors.every(({ uid }) => vpActors.find((vpActor) => uid === vpActor.uid));\n            if (sameVolumes) {\n                sameVolumesViewports.push(vp);\n            }\n        }\n    });\n    return sameVolumesViewports;\n}\nexport default getVolumeViewportsContainingSameVolumes;\n","const isPTPrescaledWithSUV = (image) => {\n    return image.preScale.scaled && image.preScale.scalingParameters.suvbw;\n};\nexport default isPTPrescaledWithSUV;\n","import { vec3 } from 'gl-matrix';\nimport getOrCreateCanvas, { EPSILON, } from '../RenderingEngine/helpers/getOrCreateCanvas';\nimport { ViewportType, Events } from '../enums';\nimport { getRenderingEngine } from '../RenderingEngine/getRenderingEngine';\nimport RenderingEngine from '../RenderingEngine';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nexport default function renderToCanvasGPU(canvas, imageOrVolume, modality = undefined, renderingEngineId = '_thumbnails', viewportOptions = {\n    displayArea: { imageArea: [1, 1] },\n}) {\n    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {\n        throw new Error('canvas element is required');\n    }\n    const isVolume = !imageOrVolume.imageId;\n    const image = !isVolume && imageOrVolume;\n    const volume = isVolume && imageOrVolume;\n    const imageIdToPrint = image.imageId || volume.volumeId;\n    const viewportId = `renderGPUViewport-${imageIdToPrint}`;\n    const element = document.createElement('div');\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    if (!viewportOptions.displayArea) {\n        viewportOptions.displayArea = { imageArea: [1, 1] };\n    }\n    const originalWidth = canvas.width;\n    const originalHeight = canvas.height;\n    element.style.width = `${originalWidth / devicePixelRatio + EPSILON}px`;\n    element.style.height = `${originalHeight / devicePixelRatio + EPSILON}px`;\n    element.style.visibility = 'hidden';\n    element.style.position = 'absolute';\n    document.body.appendChild(element);\n    const uniqueId = viewportId.split(':').join('-');\n    element.setAttribute('viewport-id-for-remove', uniqueId);\n    const temporaryCanvas = getOrCreateCanvas(element);\n    const renderingEngine = getRenderingEngine(renderingEngineId) ||\n        new RenderingEngine(renderingEngineId);\n    let viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n        const viewportInput = {\n            viewportId,\n            type: isVolume ? ViewportType.ORTHOGRAPHIC : ViewportType.STACK,\n            element,\n            defaultOptions: {\n                ...viewportOptions,\n                suppressEvents: true,\n            },\n        };\n        renderingEngine.enableElement(viewportInput);\n        viewport = renderingEngine.getViewport(viewportId);\n    }\n    return new Promise((resolve) => {\n        let elementRendered = false;\n        let { viewReference } = viewportOptions;\n        const onImageRendered = (eventDetail) => {\n            if (elementRendered) {\n                return;\n            }\n            if (viewReference) {\n                const useViewRef = viewReference;\n                viewReference = null;\n                viewport.setViewReference(useViewRef);\n                viewport.render();\n                return;\n            }\n            const context = canvas.getContext('2d');\n            context.drawImage(temporaryCanvas, 0, 0, temporaryCanvas.width, temporaryCanvas.height, 0, 0, canvas.width, canvas.height);\n            const origin = viewport.canvasToWorld([0, 0]);\n            const topRight = viewport.canvasToWorld([\n                temporaryCanvas.width / devicePixelRatio,\n                0,\n            ]);\n            const bottomLeft = viewport.canvasToWorld([\n                0,\n                temporaryCanvas.height / devicePixelRatio,\n            ]);\n            const rightVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([1 / devicePixelRatio, 0]), origin);\n            const downVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([0, 1 / devicePixelRatio]), origin);\n            const thicknessMm = 1;\n            elementRendered = true;\n            element.removeEventListener(Events.IMAGE_RENDERED, onImageRendered);\n            setTimeout(() => {\n                renderingEngine.disableElement(viewportId);\n                const elements = document.querySelectorAll(`[viewport-id-for-remove=\"${uniqueId}\"]`);\n                elements.forEach((element) => {\n                    element.remove();\n                });\n            }, 0);\n            resolve({\n                origin,\n                bottomLeft,\n                topRight,\n                thicknessMm,\n                rightVector,\n                downVector,\n            });\n        };\n        element.addEventListener(Events.IMAGE_RENDERED, onImageRendered);\n        if (isVolume) {\n            viewport.setVolumes([volume], false, true);\n        }\n        else {\n            viewport.renderImageObject(imageOrVolume);\n        }\n        viewport.resetCamera();\n        if (modality === 'PT' && !isPTPrescaledWithSUV(image)) {\n            viewport.setProperties({\n                voiRange: {\n                    lower: image.minPixelValue,\n                    upper: image.maxPixelValue,\n                },\n            });\n        }\n        viewport.render();\n    });\n}\n","import getDefaultViewport from '../RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport';\nimport calculateTransform from '../RenderingEngine/helpers/cpuFallback/rendering/calculateTransform';\nimport drawImageSync from '../RenderingEngine/helpers/cpuFallback/drawImageSync';\nexport default function renderToCanvasCPU(canvas, imageOrVolume, modality, _renderingEngineId, _viewportOptions) {\n    const volume = imageOrVolume;\n    if (volume.volumeId) {\n        throw new Error('Unsupported volume rendering for CPU');\n    }\n    const image = imageOrVolume;\n    const viewport = getDefaultViewport(canvas, image, modality);\n    const enabledElement = {\n        canvas,\n        viewport,\n        image,\n        renderingTools: {},\n    };\n    enabledElement.transform = calculateTransform(enabledElement);\n    const invalidated = true;\n    return new Promise((resolve, reject) => {\n        drawImageSync(enabledElement, invalidated);\n        resolve(null);\n    });\n}\n","import { loadAndCacheImage } from '../loaders/imageLoader';\nimport * as metaData from '../metaData';\nimport { RequestType } from '../enums';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport cache from '../cache/cache';\nexport default function loadImageToCanvas(options) {\n    const { canvas, imageId, viewReference, requestType = RequestType.Thumbnail, priority = -5, renderingEngineId = '_thumbnails', useCPURendering = false, thumbnail = false, imageAspect = false, viewportOptions: baseViewportOptions, } = options;\n    const volumeId = viewReference?.volumeId;\n    const isVolume = volumeId && !imageId;\n    const viewportOptions = viewReference && baseViewportOptions\n        ? { ...baseViewportOptions, viewReference }\n        : baseViewportOptions;\n    const renderFn = useCPURendering ? renderToCanvasCPU : renderToCanvasGPU;\n    return new Promise((resolve, reject) => {\n        function successCallback(imageOrVolume, imageId) {\n            const { modality } = metaData.get('generalSeriesModule', imageId) || {};\n            const image = !isVolume && imageOrVolume;\n            const volume = isVolume && imageOrVolume;\n            if (image) {\n                image.isPreScaled = image.isPreScaled || image.preScale?.scaled;\n            }\n            if (thumbnail) {\n                canvas.height = 256;\n                canvas.width = 256;\n            }\n            if (imageAspect && image) {\n                canvas.width = image && (canvas.height * image.width) / image.height;\n            }\n            canvas.style.width = `${canvas.width / devicePixelRatio}px`;\n            canvas.style.height = `${canvas.height / devicePixelRatio}px`;\n            if (volume && useCPURendering) {\n                reject(new Error('CPU rendering of volume not supported'));\n            }\n            renderFn(canvas, imageOrVolume, modality, renderingEngineId, viewportOptions).then(resolve);\n        }\n        function errorCallback(error, imageId) {\n            console.error(error, imageId);\n            reject(error);\n        }\n        function sendRequest(imageId, imageIdIndex, options) {\n            return loadAndCacheImage(imageId, options).then((image) => {\n                successCallback.call(this, image, imageId);\n            }, (error) => {\n                errorCallback.call(this, error, imageId);\n            });\n        }\n        const options = {\n            useRGBA: !!useCPURendering,\n            requestType,\n        };\n        if (volumeId) {\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                reject(new Error(`Volume id ${volumeId} not found in cache`));\n            }\n            const useImageId = volume.imageIds[0];\n            successCallback(volume, useImageId);\n        }\n        else {\n            imageLoadPoolManager.addRequest(sendRequest.bind(null, imageId, null, options), requestType, { imageId }, priority);\n        }\n    });\n}\n","import eventTarget from '../../eventTarget';\nconst Events = {\n    HISTORY_UNDO: 'CORNERSTONE_TOOLS_HISTORY_UNDO',\n    HISTORY_REDO: 'CORNERSTONE_TOOLS_HISTORY_REDO',\n};\nexport class HistoryMemo {\n    constructor(label = 'Tools', size = 50) {\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n        this.ring = new Array();\n        this.label = label;\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    set size(newSize) {\n        this.ring = new Array(newSize);\n        this._size = newSize;\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n    }\n    undo(items = 1) {\n        while (items > 0 && this.undoAvailable > 0) {\n            const item = this.ring[this.position];\n            item.restoreMemo(true);\n            if (item.id) {\n                eventTarget.dispatchEvent(new CustomEvent(Events.HISTORY_UNDO, {\n                    detail: {\n                        isUndo: true,\n                        id: item.id,\n                        operationType: item.operationType || 'annotation',\n                        memo: item,\n                    },\n                }));\n            }\n            items--;\n            this.redoAvailable++;\n            this.undoAvailable--;\n            this.position = (this.position - 1 + this.size) % this.size;\n        }\n    }\n    undoIf(condition) {\n        if (this.undoAvailable > 0 && condition(this.ring[this.position])) {\n            this.undo();\n            return true;\n        }\n        return false;\n    }\n    redo(items = 1) {\n        while (items > 0 && this.redoAvailable > 0) {\n            const newPosition = (this.position + 1) % this.size;\n            const item = this.ring[newPosition];\n            item.restoreMemo(false);\n            if (item.id) {\n                eventTarget.dispatchEvent(new CustomEvent(Events.HISTORY_REDO, {\n                    detail: {\n                        isUndo: false,\n                        id: item.id,\n                        operationType: item.operationType || 'annotation',\n                        memo: item,\n                    },\n                }));\n            }\n            items--;\n            this.position = newPosition;\n            this.undoAvailable++;\n            this.redoAvailable--;\n        }\n    }\n    push(item) {\n        if (!item) {\n            return;\n        }\n        const memo = item.restoreMemo\n            ? item\n            : item.createMemo?.();\n        if (!memo) {\n            return;\n        }\n        this.redoAvailable = 0;\n        if (this.undoAvailable < this._size) {\n            this.undoAvailable++;\n        }\n        this.position = (this.position + 1) % this._size;\n        this.ring[this.position] = memo;\n        return memo;\n    }\n}\nconst DefaultHistoryMemo = new HistoryMemo();\nexport { DefaultHistoryMemo };\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nfunction worldToImageCoords(imageId, worldCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const newOrigin = vec3.create();\n    vec3.scaleAndAdd(newOrigin, origin, columnCosines, -columnPixelSpacing / 2);\n    vec3.scaleAndAdd(newOrigin, newOrigin, rowCosines, -rowPixelSpacing / 2);\n    const sub = vec3.create();\n    vec3.sub(sub, worldCoords, newOrigin);\n    const rowDistance = vec3.dot(sub, rowCosines);\n    const columnDistance = vec3.dot(sub, columnCosines);\n    const imageCoords = [\n        rowDistance / rowPixelSpacing,\n        columnDistance / columnPixelSpacing,\n    ];\n    return imageCoords;\n}\nexport default worldToImageCoords;\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nexport default function imageToWorldCoords(imageId, imageCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const imageCoordsInWorld = vec3.create();\n    vec3.scaleAndAdd(imageCoordsInWorld, origin, rowCosines, rowPixelSpacing * (imageCoords[0] - 0.5));\n    vec3.scaleAndAdd(imageCoordsInWorld, imageCoordsInWorld, columnCosines, columnPixelSpacing * (imageCoords[1] - 0.5));\n    return Array.from(imageCoordsInWorld);\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nexport default function getViewportsWithImageURI(imageURI) {\n    const renderingEngines = getRenderingEngines();\n    const viewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewportsForRenderingEngine = renderingEngine.getViewports();\n        viewportsForRenderingEngine.forEach((viewport) => {\n            if (viewport.hasImageURI(imageURI)) {\n                viewports.push(viewport);\n            }\n        });\n    });\n    return viewports;\n}\n","import { vec3 } from 'gl-matrix';\nimport * as planar from './planar';\nimport * as metaData from '../metaData';\nexport default function getClosestStackImageIndexForPoint(point, viewport) {\n    const minimalDistance = calculateMinimalDistanceForStackViewport(point, viewport);\n    return minimalDistance ? minimalDistance.index : null;\n}\nexport function calculateMinimalDistanceForStackViewport(point, viewport) {\n    const imageIds = viewport.getImageIds();\n    const currentImageIdIndex = viewport.getCurrentImageIdIndex();\n    if (imageIds.length === 0) {\n        return null;\n    }\n    const getDistance = (imageId) => {\n        const planeMetadata = getPlaneMetadata(imageId);\n        if (!planeMetadata) {\n            return null;\n        }\n        const plane = planar.planeEquation(planeMetadata.planeNormal, planeMetadata.imagePositionPatient);\n        const distance = planar.planeDistanceToPoint(plane, point);\n        return distance;\n    };\n    const closestStack = {\n        distance: getDistance(imageIds[currentImageIdIndex]) ?? Infinity,\n        index: currentImageIdIndex,\n    };\n    const higherImageIds = imageIds.slice(currentImageIdIndex + 1);\n    for (let i = 0; i < higherImageIds.length; i++) {\n        const id = higherImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null) {\n            continue;\n        }\n        if (distance <= closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i + currentImageIdIndex + 1;\n        }\n        else {\n            break;\n        }\n    }\n    const lowerImageIds = imageIds.slice(0, currentImageIdIndex);\n    for (let i = lowerImageIds.length - 1; i >= 0; i--) {\n        const id = lowerImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null || distance === closestStack.distance) {\n            continue;\n        }\n        if (distance < closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i;\n        }\n        else {\n            break;\n        }\n    }\n    return closestStack.distance === Infinity ? null : closestStack;\n}\nfunction getPlaneMetadata(imageId) {\n    const targetImagePlane = metaData.get('imagePlaneModule', imageId);\n    if (!targetImagePlane ||\n        !(targetImagePlane.rowCosines instanceof Array &&\n            targetImagePlane.rowCosines.length === 3) ||\n        !(targetImagePlane.columnCosines instanceof Array &&\n            targetImagePlane.columnCosines.length === 3) ||\n        !(targetImagePlane.imagePositionPatient instanceof Array &&\n            targetImagePlane.imagePositionPatient.length === 3)) {\n        return null;\n    }\n    const { rowCosines, columnCosines, imagePositionPatient, } = targetImagePlane;\n    const rowVec = vec3.set(vec3.create(), ...rowCosines);\n    const colVec = vec3.set(vec3.create(), ...columnCosines);\n    const planeNormal = vec3.cross(vec3.create(), rowVec, colVec);\n    return { rowCosines, columnCosines, imagePositionPatient, planeNormal };\n}\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { transformCanvasToIJK } from './transformCanvasToIJK';\nfunction getCurrentVolumeViewportSlice(viewport) {\n    const { width: canvasWidth, height: canvasHeight } = viewport.getCanvas();\n    const { sliceToIndexMatrix, indexToSliceMatrix } = viewport.getSliceViewInfo();\n    const ijkOriginPoint = transformCanvasToIJK(viewport, [0, 0]);\n    const ijkRowPoint = transformCanvasToIJK(viewport, [canvasWidth - 1, 0]);\n    const ijkColPoint = transformCanvasToIJK(viewport, [0, canvasHeight - 1]);\n    const ijkRowVec = vec3.sub(vec3.create(), ijkRowPoint, ijkOriginPoint);\n    const ijkColVec = vec3.sub(vec3.create(), ijkColPoint, ijkOriginPoint);\n    const ijkSliceVec = vec3.cross(vec3.create(), ijkRowVec, ijkColVec);\n    vec3.normalize(ijkRowVec, ijkRowVec);\n    vec3.normalize(ijkColVec, ijkColVec);\n    vec3.normalize(ijkSliceVec, ijkSliceVec);\n    const maxIJKRowVec = Math.max(Math.abs(ijkRowVec[0]), Math.abs(ijkRowVec[1]), Math.abs(ijkRowVec[2]));\n    const maxIJKColVec = Math.max(Math.abs(ijkColVec[0]), Math.abs(ijkColVec[1]), Math.abs(ijkColVec[2]));\n    if (!glMatrix.equals(1, maxIJKRowVec) || !glMatrix.equals(1, maxIJKColVec)) {\n        throw new Error('Livewire is not available for rotate/oblique viewports');\n    }\n    const { voxelManager } = viewport.getImageData();\n    const sliceViewInfo = viewport.getSliceViewInfo();\n    const scalarData = voxelManager.getSliceData(sliceViewInfo);\n    return {\n        width: sliceViewInfo.width,\n        height: sliceViewInfo.height,\n        scalarData,\n        sliceToIndexMatrix,\n        indexToSliceMatrix,\n    };\n}\nexport { getCurrentVolumeViewportSlice as default, getCurrentVolumeViewportSlice, };\n","import { mat4 } from 'gl-matrix';\nimport { addProvider } from '../metaData';\nconst state = {};\nconst spatialRegistrationMetadataProvider = {\n    add: (query, payload) => {\n        const [viewportId1, viewportId2] = query;\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (!state[entryId]) {\n            state[entryId] = {};\n        }\n        state[entryId] = payload;\n    },\n    get: (type, viewportId1, viewportId2) => {\n        if (type !== 'spatialRegistrationModule') {\n            return;\n        }\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (state[entryId]) {\n            return state[entryId];\n        }\n        const entryIdReverse = `${viewportId2}_${viewportId1}`;\n        if (state[entryIdReverse]) {\n            return mat4.invert(mat4.create(), state[entryIdReverse]);\n        }\n    },\n};\naddProvider(spatialRegistrationMetadataProvider.get.bind(spatialRegistrationMetadataProvider));\nexport default spatialRegistrationMetadataProvider;\n","import { vec3, mat4 } from 'gl-matrix';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport { get } from '../metaData';\nconst ALLOWED_DELTA = 0.05;\nfunction calculateViewportsSpatialRegistration(viewport1, viewport2) {\n    const imageId1 = viewport1.getSliceIndex();\n    const imageId2 = viewport2.getSliceIndex();\n    const imagePlaneModule1 = get('imagePlaneModule', imageId1.toString());\n    const imagePlaneModule2 = get('imagePlaneModule', imageId2.toString());\n    if (!imagePlaneModule1 || !imagePlaneModule2) {\n        console.log('Viewport spatial registration requires image plane module');\n        return;\n    }\n    const { imageOrientationPatient: iop2 } = imagePlaneModule2;\n    const isSameImagePlane = imagePlaneModule1.imageOrientationPatient.every((v, i) => Math.abs(v - iop2[i]) < ALLOWED_DELTA);\n    if (!isSameImagePlane) {\n        console.log('Viewport spatial registration only supported for same orientation (hence translation only) for now', imagePlaneModule1?.imageOrientationPatient, imagePlaneModule2?.imageOrientationPatient);\n        return;\n    }\n    const imagePositionPatient1 = imagePlaneModule1.imagePositionPatient;\n    const imagePositionPatient2 = imagePlaneModule2.imagePositionPatient;\n    const translation = vec3.subtract(vec3.create(), imagePositionPatient1, imagePositionPatient2);\n    const mat = mat4.fromTranslation(mat4.create(), translation);\n    spatialRegistrationMetadataProvider.add([viewport1.id, viewport2.id], mat);\n}\nexport default calculateViewportsSpatialRegistration;\n","export default function getViewportImageCornersInWorld(viewport) {\n    const { imageData, dimensions } = viewport.getImageData() || {};\n    if (!imageData || !dimensions) {\n        return [];\n    }\n    const { canvas } = viewport;\n    const ratio = window.devicePixelRatio;\n    const topLeftCanvas = [0, 0];\n    const topRightCanvas = [canvas.width / ratio, 0];\n    const bottomRightCanvas = [\n        canvas.width / ratio,\n        canvas.height / ratio,\n    ];\n    const bottomLeftCanvas = [0, canvas.height / ratio];\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const topRightWorld = viewport.canvasToWorld(topRightCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const bottomLeftWorld = viewport.canvasToWorld(bottomLeftCanvas);\n    const topLeftImage = imageData.worldToIndex(topLeftWorld);\n    const topRightImage = imageData.worldToIndex(topRightWorld);\n    const bottomRightImage = imageData.worldToIndex(bottomRightWorld);\n    const bottomLeftImage = imageData.worldToIndex(bottomLeftWorld);\n    return _getStackViewportImageCorners({\n        dimensions,\n        imageData,\n        topLeftImage,\n        topRightImage,\n        bottomRightImage,\n        bottomLeftImage,\n        topLeftWorld,\n        topRightWorld,\n        bottomRightWorld,\n        bottomLeftWorld,\n    });\n}\nfunction _getStackViewportImageCorners({ dimensions, imageData, topLeftImage, topRightImage, bottomRightImage, bottomLeftImage, topLeftWorld, topRightWorld, bottomRightWorld, bottomLeftWorld, }) {\n    const topLeftImageWorld = _isInBounds(topLeftImage, dimensions)\n        ? topLeftWorld\n        : imageData.indexToWorld([0, 0, 0]);\n    const topRightImageWorld = _isInBounds(topRightImage, dimensions)\n        ? topRightWorld\n        : imageData.indexToWorld([dimensions[0] - 1, 0, 0]);\n    const bottomRightImageWorld = _isInBounds(bottomRightImage, dimensions)\n        ? bottomRightWorld\n        : imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n        ]);\n    const bottomLeftImageWorld = _isInBounds(bottomLeftImage, dimensions)\n        ? bottomLeftWorld\n        : imageData.indexToWorld([0, dimensions[1] - 1, 0]);\n    return [\n        topLeftImageWorld,\n        topRightImageWorld,\n        bottomLeftImageWorld,\n        bottomRightImageWorld,\n    ];\n}\nfunction _isInBounds(imageCoord, dimensions) {\n    return (imageCoord[0] > 0 ||\n        imageCoord[0] < dimensions[0] - 1 ||\n        imageCoord[1] > 0 ||\n        imageCoord[1] < dimensions[1] - 1 ||\n        imageCoord[2] > 0 ||\n        imageCoord[2] < dimensions[2] - 1);\n}\n","import StackViewport from '../RenderingEngine/StackViewport';\nimport getEnabledElement from '../getEnabledElement';\nfunction getImageLegacy(element) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof StackViewport)) {\n        throw new Error(`An image can only be fetched for a stack viewport and not for a viewport of type: ${viewport.type}`);\n    }\n    return viewport.getCornerstoneImage();\n}\nexport default getImageLegacy;\n","import * as metaData from '../metaData';\nimport isEqual from './isEqual';\nfunction isValidVolume(imageIds) {\n    if (imageIds.length <= 1) {\n        return false;\n    }\n    const imageId0 = imageIds[0];\n    const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, usingDefaultValues, } = metaData.get('imagePlaneModule', imageId0);\n    if (usingDefaultValues) {\n        return false;\n    }\n    const baseMetadata = {\n        modality,\n        imageOrientationPatient,\n        pixelSpacing,\n        frameOfReferenceUID,\n        columns,\n        rows,\n        seriesInstanceUID,\n    };\n    let validVolume = true;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId);\n        const { imageOrientationPatient, pixelSpacing, columns, rows } = metaData.get('imagePlaneModule', imageId);\n        if (seriesInstanceUID !== baseMetadata.seriesInstanceUID) {\n            validVolume = false;\n            break;\n        }\n        if (modality !== baseMetadata.modality) {\n            validVolume = false;\n            break;\n        }\n        if (columns !== baseMetadata.columns) {\n            validVolume = false;\n            break;\n        }\n        if (rows !== baseMetadata.rows) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(imageOrientationPatient, baseMetadata.imageOrientationPatient)) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(pixelSpacing, baseMetadata.pixelSpacing)) {\n            validVolume = false;\n            break;\n        }\n    }\n    return validVolume;\n}\nexport { isValidVolume };\n","export const videoUIDs = new Set([\n    '1.2.840.10008.1.2.4.100',\n    '1.2.840.10008.1.2.4.100.1',\n    '1.2.840.10008.1.2.4.101',\n    '1.2.840.10008.1.2.4.101.1',\n    '1.2.840.10008.1.2.4.102',\n    '1.2.840.10008.1.2.4.102.1',\n    '1.2.840.10008.1.2.4.103',\n    '1.2.840.10008.1.2.4.103.1',\n    '1.2.840.10008.1.2.4.104',\n    '1.2.840.10008.1.2.4.104.1',\n    '1.2.840.10008.1.2.4.105',\n    '1.2.840.10008.1.2.4.105.1',\n    '1.2.840.10008.1.2.4.106',\n    '1.2.840.10008.1.2.4.106.1',\n    '1.2.840.10008.1.2.4.107',\n    '1.2.840.10008.1.2.4.108',\n]);\nexport default function isVideoTransferSyntax(uidOrUids) {\n    if (!uidOrUids) {\n        return false;\n    }\n    const uids = Array.isArray(uidOrUids) ? uidOrUids : [uidOrUids];\n    return uids.find((uid) => videoUIDs.has(uid));\n}\n","import { setVolumesForViewports } from '../RenderingEngine/helpers';\nimport { createAndCacheVolume, getUnknownVolumeLoaderSchema, } from '../loaders/volumeLoader';\nimport { Events, ViewportType } from '../enums';\nimport uuidv4 from './uuidv4';\nasync function convertStackToVolumeViewport({ viewport, options = {}, }) {\n    const renderingEngine = viewport.getRenderingEngine();\n    let volumeId = options.volumeId || `${uuidv4()}`;\n    if (volumeId.split(':').length === 0) {\n        const schema = getUnknownVolumeLoaderSchema();\n        volumeId = `${schema}:${volumeId}`;\n    }\n    const { id, element } = viewport;\n    const viewportId = options.viewportId || id;\n    const imageIds = viewport.getImageIds();\n    const prevViewPresentation = viewport.getViewPresentation();\n    const prevViewReference = viewport.getViewReference();\n    renderingEngine.enableElement({\n        viewportId,\n        type: ViewportType.ORTHOGRAPHIC,\n        element,\n        defaultOptions: {\n            background: options.background,\n            orientation: options.orientation,\n        },\n    });\n    const volume = (await createAndCacheVolume(volumeId, {\n        imageIds,\n    }));\n    volume.load();\n    const volumeViewport = renderingEngine.getViewport(viewportId);\n    await setVolumesForViewports(renderingEngine, [\n        {\n            volumeId,\n        },\n    ], [viewportId]);\n    const volumeViewportNewVolumeHandler = () => {\n        volumeViewport.render();\n        element.removeEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    const addVolumeViewportNewVolumeListener = () => {\n        element.addEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    addVolumeViewportNewVolumeListener();\n    volumeViewport.setViewPresentation(prevViewPresentation);\n    volumeViewport.setViewReference(prevViewReference);\n    volumeViewport.render();\n    return volumeViewport;\n}\nexport { convertStackToVolumeViewport };\n","import cache from '../cache/cache';\nimport { ImageVolume } from '../cache/classes/ImageVolume';\nimport { ViewportType } from '../enums';\nasync function convertVolumeToStackViewport({ viewport, options, }) {\n    const volumeViewport = viewport;\n    const { id, element } = volumeViewport;\n    const renderingEngine = viewport.getRenderingEngine();\n    const { background } = options;\n    const viewportId = options.viewportId || id;\n    const volume = cache.getVolume(volumeViewport.getVolumeId());\n    if (!(volume instanceof ImageVolume)) {\n        throw new Error('Currently, you cannot decache a volume that is not an ImageVolume. So, unfortunately, volumes such as nifti  (which are basic Volume, without imageIds) cannot be decached.');\n    }\n    const viewportInput = {\n        viewportId,\n        type: ViewportType.STACK,\n        element,\n        defaultOptions: {\n            background,\n        },\n    };\n    const prevView = volumeViewport.getViewReference();\n    renderingEngine.enableElement(viewportInput);\n    const stackViewport = renderingEngine.getViewport(viewportId);\n    await stackViewport.setStack(volume.imageIds);\n    stackViewport.setViewReference(prevView);\n    stackViewport.render();\n    return stackViewport;\n}\nexport { convertVolumeToStackViewport };\n","import { EPSILON } from '../constants';\nfunction roundNumber(value, precision = 2) {\n    if (Array.isArray(value)) {\n        return value.map((v) => roundNumber(v, precision)).join(', ');\n    }\n    if (value === undefined || value === null || value === '') {\n        return 'NaN';\n    }\n    value = Number(value);\n    const absValue = Math.abs(value);\n    if (absValue < 0.0001) {\n        return `${value}`;\n    }\n    const fixedPrecision = absValue >= 100\n        ? precision - 2\n        : absValue >= 10\n            ? precision - 1\n            : absValue >= 1\n                ? precision\n                : absValue >= 0.1\n                    ? precision + 1\n                    : absValue >= 0.01\n                        ? precision + 2\n                        : absValue >= 0.001\n                            ? precision + 3\n                            : precision + 4;\n    return value.toFixed(fixedPrecision);\n}\nfunction roundToPrecision(value) {\n    return Math.round(value / EPSILON) * EPSILON;\n}\nexport { roundToPrecision };\nexport default roundNumber;\n","export default function convertToGrayscale(scalarData, width, height) {\n    const isRGBA = scalarData.length === width * height * 4;\n    const isRGB = scalarData.length === width * height * 3;\n    if (isRGBA || isRGB) {\n        const newScalarData = new Float32Array(width * height);\n        let offset = 0;\n        let destOffset = 0;\n        const increment = isRGBA ? 4 : 3;\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const r = scalarData[offset];\n                const g = scalarData[offset + 1];\n                const b = scalarData[offset + 2];\n                newScalarData[destOffset] = (r + g + b) / 3;\n                offset += increment;\n                destOffset++;\n            }\n        }\n        return newScalarData;\n    }\n    else {\n        return scalarData;\n    }\n}\n","import { VolumeViewport } from '../RenderingEngine';\nimport cache from '../cache/cache';\nfunction getViewportImageIds(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        const volume = cache.getVolume(viewport.getVolumeId());\n        return volume.imageIds;\n    }\n    else if (viewport.getImageIds) {\n        return viewport.getImageIds();\n    }\n}\nexport default getViewportImageIds;\n","export function getRandomSampleFromArray(array, size) {\n    const clonedArray = [...array];\n    if (size >= clonedArray.length) {\n        shuffleArray(clonedArray);\n        return clonedArray;\n    }\n    shuffleArray(clonedArray);\n    return clonedArray.slice(0, size);\n}\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n","function componentToHex(c) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\nfunction rgbToHex(r, g, b) {\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\nfunction hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        }\n        : null;\n}\nexport { hexToRgb, rgbToHex };\n","export function deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    try {\n        return JSON.stringify(obj1) === JSON.stringify(obj2);\n    }\n    catch (error) {\n        console.debug('Error in JSON.stringify during deep comparison:', error);\n        return obj1 === obj2;\n    }\n}\n","import * as metaData from '../metaData';\nconst groupBy = (array, key) => {\n    return array.reduce((rv, x) => {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\nfunction getIPPGroups(imageIds) {\n    const ippMetadata = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId) || {};\n        return { imageId, imagePositionPatient };\n    });\n    if (!ippMetadata.every((item) => item.imagePositionPatient)) {\n        return null;\n    }\n    const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\n    const positions = Object.keys(positionGroups);\n    const frame_count = positionGroups[positions[0]].length;\n    if (frame_count === 1) {\n        return null;\n    }\n    const frame_count_equal = positions.every((k) => positionGroups[k].length === frame_count);\n    if (!frame_count_equal) {\n        return null;\n    }\n    return positionGroups;\n}\nfunction test4DTag(IPPGroups, value_getter) {\n    const frame_groups = {};\n    let first_frame_value_set = [];\n    const positions = Object.keys(IPPGroups);\n    for (let i = 0; i < positions.length; i++) {\n        const frame_value_set = new Set();\n        const frames = IPPGroups[positions[i]];\n        for (let j = 0; j < frames.length; j++) {\n            const frame_value = value_getter(frames[j].imageId) || 0;\n            frame_groups[frame_value] = frame_groups[frame_value] || [];\n            frame_groups[frame_value].push({ imageId: frames[j].imageId });\n            frame_value_set.add(frame_value);\n            if (frame_value_set.size - 1 < j) {\n                return undefined;\n            }\n        }\n        if (i == 0) {\n            first_frame_value_set = Array.from(frame_value_set);\n        }\n        else if (!setEquals(first_frame_value_set, frame_value_set)) {\n            return undefined;\n        }\n    }\n    return frame_groups;\n}\nfunction getTagValue(imageId, tag) {\n    const value = metaData.get(tag, imageId);\n    try {\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getPhilipsPrivateBValue(imageId) {\n    const value = metaData.get('20011003', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            const value_bytes = atob(InlineBinary);\n            const ary_buf = new ArrayBuffer(value_bytes.length);\n            const dv = new DataView(ary_buf);\n            for (let i = 0; i < value_bytes.length; i++) {\n                dv.setUint8(i, value_bytes.charCodeAt(i));\n            }\n            return new Float32Array(ary_buf)[0];\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getSiemensPrivateBValue(imageId) {\n    let value = metaData.get('0019100c', imageId) || metaData.get('0019100C', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary);\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getGEPrivateBValue(imageId) {\n    let value = metaData.get('00431039', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary).split('//');\n        }\n        return parseFloat(value[0]) % 100000;\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction setEquals(set_a, set_b) {\n    if (set_a.length != set_b.size) {\n        return false;\n    }\n    for (let i = 0; i < set_a.length; i++) {\n        if (!set_b.has(set_a[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getPetFrameReferenceTime(imageId) {\n    const moduleInfo = metaData.get('petImageModule', imageId);\n    return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\n}\nfunction splitImageIdsBy4DTags(imageIds) {\n    const positionGroups = getIPPGroups(imageIds);\n    if (!positionGroups) {\n        return { imageIdGroups: [imageIds], splittingTag: null };\n    }\n    const tags = [\n        'TemporalPositionIdentifier',\n        'DiffusionBValue',\n        'TriggerTime',\n        'EchoTime',\n        'EchoNumber',\n        'PhilipsPrivateBValue',\n        'SiemensPrivateBValue',\n        'GEPrivateBValue',\n        'PetFrameReferenceTime',\n    ];\n    const fncList2 = [\n        (imageId) => getTagValue(imageId, tags[0]),\n        (imageId) => getTagValue(imageId, tags[1]),\n        (imageId) => getTagValue(imageId, tags[2]),\n        (imageId) => getTagValue(imageId, tags[3]),\n        (imageId) => getTagValue(imageId, tags[4]),\n        getPhilipsPrivateBValue,\n        getSiemensPrivateBValue,\n        getGEPrivateBValue,\n        getPetFrameReferenceTime,\n    ];\n    for (let i = 0; i < fncList2.length; i++) {\n        const frame_groups = test4DTag(positionGroups, fncList2[i]);\n        if (frame_groups) {\n            const sortedKeys = Object.keys(frame_groups)\n                .map(Number.parseFloat)\n                .sort((a, b) => a - b);\n            const imageIdGroups = sortedKeys.map((key) => frame_groups[key].map((item) => item.imageId));\n            return { imageIdGroups, splittingTag: tags[i] };\n        }\n    }\n    return { imageIdGroups: [imageIds], splittingTag: null };\n}\nexport default splitImageIdsBy4DTags;\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nfunction getDynamicVolumeInfo(imageIds) {\n    const { imageIdGroups: timePoints, splittingTag } = splitImageIdsBy4DTags(imageIds);\n    const isDynamicVolume = timePoints.length > 1;\n    return { isDynamicVolume, timePoints, splittingTag };\n}\nexport default getDynamicVolumeInfo;\n","export default function scaleArray(array, scalingParameters) {\n    const arrayLength = array.length;\n    const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n    if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n        }\n    }\n    else {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = array[i] * rescaleSlope + rescaleIntercept;\n        }\n    }\n    return array;\n}\n","export function clip(val, low, high) {\n    return Math.min(Math.max(low, val), high);\n}\nexport function clipToBox(point, box) {\n    point.x = clip(point.x, 0, box.width);\n    point.y = clip(point.y, 0, box.height);\n}\nexport default clip;\n","import { Events } from '../enums';\nimport { StackViewport, VolumeViewport } from '../RenderingEngine';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getEnabledElement from '../getEnabledElement';\nimport triggerEvent from './triggerEvent';\nimport eventTarget from '../eventTarget';\nexport default function scroll(viewport, options) {\n    const enabledElement = getEnabledElement(viewport.element);\n    if (!enabledElement) {\n        throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n    }\n    if (viewport instanceof StackViewport &&\n        viewport.getImageIds().length === 0) {\n        throw new Error('Scroll::Stack Viewport has no images');\n    }\n    const { volumeId, delta, scrollSlabs } = options;\n    if (viewport instanceof VolumeViewport) {\n        scrollVolume(viewport, volumeId, delta, scrollSlabs);\n    }\n    else {\n        const imageIdIndex = viewport.getCurrentImageIdIndex();\n        if (imageIdIndex + delta >\n            viewport.getImageIds().length - 1 ||\n            imageIdIndex + delta < 0) {\n            const eventData = {\n                imageIdIndex,\n                direction: delta,\n            };\n            triggerEvent(eventTarget, Events.STACK_SCROLL_OUT_OF_BOUNDS, eventData);\n        }\n        viewport.scroll(delta, options.debounceLoading, options.loop);\n    }\n}\nexport function scrollVolume(viewport, volumeId, delta, scrollSlabs = false) {\n    const useSlabThickness = scrollSlabs;\n    const { numScrollSteps, currentStepIndex, sliceRangeInfo } = getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness);\n    if (!sliceRangeInfo) {\n        return;\n    }\n    const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n    const { focalPoint, viewPlaneNormal, position } = camera;\n    const { newFocalPoint, newPosition } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n    viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n    });\n    viewport.render();\n    const desiredStepIndex = currentStepIndex + delta;\n    const VolumeScrollEventDetail = {\n        volumeId,\n        viewport,\n        delta,\n        desiredStepIndex,\n        currentStepIndex,\n        numScrollSteps,\n        currentImageId: viewport.getCurrentImageId(),\n    };\n    if ((desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n        viewport.getCurrentImageId()) {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS, VolumeScrollEventDetail);\n    }\n    else {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL, VolumeScrollEventDetail);\n    }\n}\n","import clip from './clip';\nimport scroll from './scroll';\nimport getEnabledElement from '../getEnabledElement';\nimport StackViewport from '../RenderingEngine/StackViewport';\nasync function jumpToSlice(element, options = {}) {\n    const { imageIndex, debounceLoading, volumeId } = options;\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('Element has been disabled');\n    }\n    const { viewport } = enabledElement;\n    const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(viewport, debounceLoading);\n    const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n    const delta = imageIndexToJump - currentImageIndex;\n    scroll(viewport, { delta, debounceLoading, volumeId });\n}\nfunction _getImageSliceData(viewport, debounceLoading) {\n    if (viewport instanceof StackViewport) {\n        return {\n            numberOfSlices: viewport.getImageIds().length,\n            imageIndex: debounceLoading\n                ? viewport.getTargetImageIdIndex()\n                : viewport.getCurrentImageIdIndex(),\n        };\n    }\n    return {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getSliceIndex(),\n    };\n}\nfunction _getImageIndexToJump(numberOfSlices, imageIndex) {\n    const lastSliceIndex = numberOfSlices - 1;\n    return clip(imageIndex, 0, lastSliceIndex);\n}\nexport { jumpToSlice };\n","import transformWorldToIndex from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport uuidv4 from './uuidv4';\nimport { createLocalVolume } from '../loaders/volumeLoader';\nimport cache from '../cache/cache';\nfunction createSubVolume(referencedVolumeId, boundsIJK, options = {}) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (!referencedVolume) {\n        throw new Error(`Referenced volume with id ${referencedVolumeId} does not exist.`);\n    }\n    const { metadata, spacing, direction, dimensions: refVolumeDim, } = referencedVolume;\n    const { minX, maxX, minY, maxY, minZ, maxZ } = boundsIJK;\n    const ijkTopLeft = [\n        Math.min(minX, maxX),\n        Math.min(minY, maxY),\n        Math.min(minZ, maxZ),\n    ];\n    const boundingBoxOriginWorld = transformIndexToWorld(referencedVolume.imageData, ijkTopLeft);\n    const dimensions = [\n        Math.abs(maxX - minX) + 1,\n        Math.abs(maxY - minY) + 1,\n        Math.abs(maxZ - minZ) + 1,\n    ];\n    const { targetBuffer } = options;\n    const subVolumeOptions = {\n        metadata,\n        dimensions,\n        spacing,\n        origin: boundingBoxOriginWorld,\n        direction,\n        targetBuffer,\n        scalarData: targetBuffer?.type === 'Float32Array'\n            ? new Float32Array(dimensions[0] * dimensions[1] * dimensions[2])\n            : undefined,\n    };\n    const subVolume = createLocalVolume(uuidv4(), subVolumeOptions);\n    const subVolumeData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const subVolumeSliceSize = dimensions[0] * dimensions[1];\n    const refVolumeSliceSize = refVolumeDim[0] * refVolumeDim[1];\n    const refVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    for (let z = 0; z < dimensions[2]; z++) {\n        for (let y = 0; y < dimensions[1]; y++) {\n            const rowStartWorld = transformIndexToWorld(subVolume.imageData, [\n                0,\n                y,\n                z,\n            ]);\n            const refVolumeRowStartIJK = transformWorldToIndex(referencedVolume.imageData, rowStartWorld);\n            const refVolumeRowStartOffset = refVolumeRowStartIJK[2] * refVolumeSliceSize +\n                refVolumeRowStartIJK[1] * refVolumeDim[0] +\n                refVolumeRowStartIJK[0];\n            const rowData = refVolumeData.slice(refVolumeRowStartOffset, refVolumeRowStartOffset + dimensions[0]);\n            const subVolumeLineStartOffset = z * subVolumeSliceSize + y * dimensions[0];\n            subVolumeData.set(rowData, subVolumeLineStartOffset);\n        }\n    }\n    subVolume.voxelManager.setCompleteScalarDataArray(subVolumeData);\n    return subVolume;\n}\nexport { createSubVolume as default, createSubVolume };\n","import { vec3 } from 'gl-matrix';\nimport { transformWorldToIndexContinuous } from './transformWorldToIndex';\nfunction getVolumeDirectionVectors(imageData, camera) {\n    const { viewUp, viewPlaneNormal } = camera;\n    const ijkOrigin = transformWorldToIndexContinuous(imageData, [0, 0, 0]);\n    const worldVecColDir = vec3.negate(vec3.create(), viewUp);\n    const worldVecSliceDir = vec3.negate(vec3.create(), viewPlaneNormal);\n    const worldVecRowDir = vec3.cross(vec3.create(), worldVecColDir, worldVecSliceDir);\n    const ijkVecColDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecColDir), ijkOrigin);\n    const ijkVecSliceDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecSliceDir), ijkOrigin);\n    vec3.normalize(ijkVecColDir, ijkVecColDir);\n    vec3.normalize(ijkVecSliceDir, ijkVecSliceDir);\n    const ijkVecRowDir = vec3.cross(vec3.create(), ijkVecColDir, ijkVecSliceDir);\n    return {\n        worldVecRowDir,\n        worldVecColDir,\n        worldVecSliceDir,\n        ijkVecRowDir,\n        ijkVecColDir,\n        ijkVecSliceDir,\n    };\n}\nexport { getVolumeDirectionVectors as default, getVolumeDirectionVectors };\n","export function calculateNeighborhoodStats(scalarData, dimensions, centerIjk, radius) {\n    const [width, height, numSlices] = dimensions;\n    const numPixelsPerSlice = width * height;\n    let sum = 0;\n    let sumSq = 0;\n    let count = 0;\n    const [cx, cy, cz] = centerIjk.map(Math.round);\n    for (let z = cz - radius; z <= cz + radius; z++) {\n        if (z < 0 || z >= numSlices) {\n            continue;\n        }\n        for (let y = cy - radius; y <= cy + radius; y++) {\n            if (y < 0 || y >= height) {\n                continue;\n            }\n            for (let x = cx - radius; x <= cx + radius; x++) {\n                if (x < 0 || x >= width) {\n                    continue;\n                }\n                const index = z * numPixelsPerSlice + y * width + x;\n                const value = scalarData[index];\n                sum += value;\n                sumSq += value * value;\n                count++;\n            }\n        }\n    }\n    if (count === 0) {\n        const centerIndex = cz * numPixelsPerSlice + cy * width + cx;\n        if (centerIndex >= 0 && centerIndex < scalarData.length) {\n            const centerValue = scalarData[centerIndex];\n            return { mean: centerValue, stdDev: 0, count: 1 };\n        }\n        else {\n            return { mean: 0, stdDev: 0, count: 0 };\n        }\n    }\n    const mean = sum / count;\n    const variance = sumSq / count - mean * mean;\n    const stdDev = Math.sqrt(Math.max(0, variance));\n    return { mean, stdDev, count };\n}\n","import * as eventListener from './eventListener';\nimport csUtils from './invertRgbTransferFunction';\nimport createSigmoidRGBTransferFunction from './createSigmoidRGBTransferFunction';\nimport getVoiFromSigmoidRGBTransferFunction from './getVoiFromSigmoidRGBTransferFunction';\nimport createLinearRGBTransferFunction from './createLinearRGBTransferFunction';\nimport scaleRgbTransferFunction from './scaleRgbTransferFunction';\nimport triggerEvent from './triggerEvent';\nimport uuidv4 from './uuidv4';\nimport getMinMax from './getMinMax';\nimport getRuntimeId from './getRuntimeId';\nimport imageIdToURI from './imageIdToURI';\nimport calibratedPixelSpacingMetadataProvider from './calibratedPixelSpacingMetadataProvider';\nimport clamp from './clamp';\nimport { isEqual, isEqualAbs, isEqualNegative } from './isEqual';\nimport isOpposite from './isOpposite';\nimport getClosestImageId from './getClosestImageId';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport indexWithinDimensions from './indexWithinDimensions';\nimport getVolumeViewportsContainingSameVolumes from './getVolumeViewportsContainingSameVolumes';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nimport transformWorldToIndex, { transformWorldToIndexContinuous, } from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport loadImageToCanvas from './loadImageToCanvas';\nimport * as HistoryMemo from './historyMemo';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport worldToImageCoords from './worldToImageCoords';\nimport imageToWorldCoords from './imageToWorldCoords';\nimport getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport getSliceRange from './getSliceRange';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getImageSliceDataForVolumeViewport from './getImageSliceDataForVolumeViewport';\nimport { isImageActor, actorIsA } from './actorCheck';\nimport getViewportsWithImageURI from './getViewportsWithImageURI';\nimport getClosestStackImageIndexForPoint from './getClosestStackImageIndexForPoint';\nimport getCurrentVolumeViewportSlice from './getCurrentVolumeViewportSlice';\nimport calculateViewportsSpatialRegistration from './calculateViewportsSpatialRegistration';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport getViewportImageCornersInWorld from './getViewportImageCornersInWorld';\nimport hasNaNValues from './hasNaNValues';\nimport applyPreset from './applyPreset';\nimport PointsManager from './PointsManager';\nimport deepMerge from './deepMerge';\nimport getScalingParameters from './getScalingParameters';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nimport getImageLegacy from './getImageLegacy';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport genericMetadataProvider from './genericMetadataProvider';\nimport { isValidVolume } from './isValidVolume';\nimport { updateVTKImageDataWithCornerstoneImage } from './updateVTKImageDataWithCornerstoneImage';\nimport ProgressiveIterator from './ProgressiveIterator';\nimport decimate from './decimate';\nimport imageRetrieveMetadataProvider from './imageRetrieveMetadataProvider';\nimport isVideoTransferSyntax from './isVideoTransferSyntax';\nimport { getBufferConfiguration } from './getBufferConfiguration';\nimport { generateVolumePropsFromImageIds } from './generateVolumePropsFromImageIds';\nimport { convertStackToVolumeViewport } from './convertStackToVolumeViewport';\nimport { convertVolumeToStackViewport } from './convertVolumeToStackViewport';\nimport VoxelManager from './VoxelManager';\nimport RLEVoxelMap from './RLEVoxelMap';\nimport roundNumber, { roundToPrecision } from './roundNumber';\nimport convertToGrayscale from './convertToGrayscale';\nimport getViewportImageIds from './getViewportImageIds';\nimport { getRandomSampleFromArray } from './getRandomSampleFromArray';\nimport { getVolumeId } from './getVolumeId';\nimport { hasFloatScalingParameters } from './hasFloatScalingParameters';\nimport { pointInShapeCallback } from './pointInShapeCallback';\nexport * as planar from './planar';\nimport * as windowLevel from './windowLevel';\nimport * as colormap from './colormap';\nimport * as transferFunctionUtils from './transferFunctionUtils';\nimport * as color from './color';\nimport { deepEqual } from './deepEqual';\nimport FrameRange from './FrameRange';\nimport fnv1aHash from './fnv1aHash';\nimport { getImageDataMetadata } from './getImageDataMetadata';\nimport { buildMetadata } from './buildMetadata';\nimport { _getViewportModality } from './getViewportModality';\nimport cache from '../cache/cache';\nimport getDynamicVolumeInfo from './getDynamicVolumeInfo';\nimport autoLoad from './autoLoad';\nimport scaleArray from './scaleArray';\nimport splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nimport { deepClone } from './deepClone';\nimport { jumpToSlice } from './jumpToSlice';\nimport scroll from './scroll';\nimport clip from './clip';\nimport createSubVolume from './createSubVolume';\nimport getVolumeDirectionVectors from './getVolumeDirectionVectors';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport * as logger from './logger';\nimport { calculateNeighborhoodStats } from './calculateNeighborhoodStats';\nconst getViewportModality = (viewport, volumeId) => _getViewportModality(viewport, volumeId, cache.getVolume);\nexport { FrameRange, eventListener, csUtils as invertRgbTransferFunction, createSigmoidRGBTransferFunction, getVoiFromSigmoidRGBTransferFunction, createLinearRGBTransferFunction, scaleRgbTransferFunction, triggerEvent, imageIdToURI, fnv1aHash, calibratedPixelSpacingMetadataProvider, clamp, uuidv4, getMinMax, getRuntimeId, isEqual, isEqualAbs, isEqualNegative, isOpposite, getViewportModality, windowLevel, convertToGrayscale, getClosestImageId, getSpacingInNormalDirection, getTargetVolumeAndSpacingInNormalDir, getVolumeActorCorners, indexWithinDimensions, getVolumeViewportsContainingSameVolumes, getViewportsWithVolumeId, transformWorldToIndex, transformIndexToWorld, loadImageToCanvas, renderToCanvasCPU, renderToCanvasGPU, worldToImageCoords, imageToWorldCoords, getVolumeSliceRangeInfo, getVolumeViewportScrollInfo, getSliceRange, snapFocalPointToSlice, getImageSliceDataForVolumeViewport, isImageActor, isPTPrescaledWithSUV, actorIsA, getViewportsWithImageURI, getClosestStackImageIndexForPoint, getCurrentVolumeViewportSlice, calculateViewportsSpatialRegistration, spatialRegistrationMetadataProvider, getViewportImageCornersInWorld, hasNaNValues, applyPreset, deepMerge, PointsManager, getScalingParameters, colormap, getImageLegacy, ProgressiveIterator, decimate, imageRetrieveMetadataProvider, transferFunctionUtils, updateVTKImageDataWithCornerstoneImage, sortImageIdsAndGetSpacing, makeVolumeMetadata, isValidVolume, genericMetadataProvider, isVideoTransferSyntax, HistoryMemo, generateVolumePropsFromImageIds, getBufferConfiguration, VoxelManager, RLEVoxelMap, convertStackToVolumeViewport, convertVolumeToStackViewport, roundNumber, roundToPrecision, getViewportImageIds, getRandomSampleFromArray, getVolumeId, color, hasFloatScalingParameters, getDynamicVolumeInfo, autoLoad, scaleArray, deepClone, splitImageIdsBy4DTags, pointInShapeCallback, deepEqual, jumpToSlice, scroll, clip, transformWorldToIndexContinuous, createSubVolume, getVolumeDirectionVectors, calculateSpacingBetweenImageIds, getImageDataMetadata, buildMetadata, calculateNeighborhoodStats, };\n","function _getViewportModality(viewport, volumeId, getVolume) {\n    if (!getVolume) {\n        throw new Error('getVolume is required, use the utilities export instead ');\n    }\n    if (viewport.modality) {\n        return viewport.modality;\n    }\n    if (viewport.setVolumes) {\n        volumeId = volumeId ?? viewport.getVolumeId();\n        if (!volumeId || !getVolume) {\n            return;\n        }\n        const volume = getVolume(volumeId);\n        return volume.metadata.Modality;\n    }\n    throw new Error('Invalid viewport type');\n}\nexport { _getViewportModality };\n","export default function invertRgbTransferFunction(rgbTransferFunction) {\n    if (!rgbTransferFunction) {\n        return;\n    }\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = 1 - nodeValue1[1];\n        nodeValue1[2] = 1 - nodeValue1[2];\n        nodeValue1[3] = 1 - nodeValue1[3];\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","function areNumbersEqualWithTolerance(num1, num2, tolerance) {\n    return Math.abs(num1 - num2) <= tolerance;\n}\nfunction areArraysEqual(arr1, arr2, tolerance = 1e-5) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!areNumbersEqualWithTolerance(arr1[i], arr2[i], tolerance)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isNumberType(value) {\n    return typeof value === 'number';\n}\nfunction isNumberArrayLike(value) {\n    return (value &&\n        typeof value === 'object' &&\n        'length' in value &&\n        typeof value.length === 'number' &&\n        value.length > 0 &&\n        typeof value[0] === 'number');\n}\nexport default function isEqual(v1, v2, tolerance = 1e-5) {\n    if (typeof v1 !== typeof v2 || v1 === null || v2 === null) {\n        return false;\n    }\n    if (isNumberType(v1) && isNumberType(v2)) {\n        return areNumbersEqualWithTolerance(v1, v2, tolerance);\n    }\n    if (isNumberArrayLike(v1) && isNumberArrayLike(v2)) {\n        return areArraysEqual(v1, v2, tolerance);\n    }\n    return false;\n}\nconst negative = (v) => typeof v === 'number' ? -v : v?.map ? v.map(negative) : !v;\nconst abs = (v) => typeof v === 'number' ? Math.abs(v) : v?.map ? v.map(abs) : v;\nconst isEqualNegative = (v1, v2, tolerance = undefined) => isEqual(v1, negative(v2), tolerance);\nconst isEqualAbs = (v1, v2, tolerance = undefined) => isEqual(abs(v1), abs(v2), tolerance);\nexport { isEqualNegative, isEqual, isEqualAbs };\n","import loglevelImport from 'loglevel';\nconst loglevel = loglevelImport.noConflict();\nif (typeof window !== 'undefined') {\n    window.log = loglevel;\n}\nexport function getRootLogger(name) {\n    const logger = loglevel.getLogger(name[0]);\n    logger.getLogger = (...names) => {\n        return getRootLogger(`${name}.${names.join('.')}`);\n    };\n    return logger;\n}\nexport function getLogger(...name) {\n    return getRootLogger(name.join('.'));\n}\nexport const cs3dLog = getRootLogger('cs3d');\nexport const coreLog = cs3dLog.getLogger('core');\nexport const toolsLog = cs3dLog.getLogger('tools');\nexport const loaderLog = cs3dLog.getLogger('dicomImageLoader');\nexport const aiLog = cs3dLog.getLogger('ai');\nexport const examplesLog = cs3dLog.getLogger('examples');\nexport const dicomConsistencyLog = getLogger('consistency', 'dicom');\nexport const imageConsistencyLog = getLogger('consistency', 'image');\n","import { get } from '../metaData';\nexport default function makeVolumeMetadata(imageIds) {\n    const imageId0 = imageIds[0];\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = get('imagePixelModule', imageId0);\n    const voiLut = [];\n    const voiLutModule = get('voiLutModule', imageId0);\n    let voiLUTFunction;\n    if (voiLutModule) {\n        const { windowWidth, windowCenter } = voiLutModule;\n        voiLUTFunction = voiLutModule?.voiLUTFunction;\n        if (Array.isArray(windowWidth)) {\n            for (let i = 0; i < windowWidth.length; i++) {\n                voiLut.push({\n                    windowWidth: windowWidth[i],\n                    windowCenter: windowCenter[i],\n                });\n            }\n        }\n        else {\n            voiLut.push({\n                windowWidth: windowWidth,\n                windowCenter: windowCenter,\n            });\n        }\n    }\n    else {\n        voiLut.push({\n            windowWidth: undefined,\n            windowCenter: undefined,\n        });\n    }\n    const { modality, seriesInstanceUID } = get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, } = get('imagePlaneModule', imageId0);\n    return {\n        BitsAllocated: bitsAllocated,\n        BitsStored: bitsStored,\n        SamplesPerPixel: samplesPerPixel,\n        HighBit: highBit,\n        PhotometricInterpretation: photometricInterpretation,\n        PixelRepresentation: pixelRepresentation,\n        Modality: modality,\n        ImageOrientationPatient: imageOrientationPatient,\n        PixelSpacing: pixelSpacing,\n        FrameOfReferenceUID: frameOfReferenceUID,\n        Columns: columns,\n        Rows: rows,\n        voiLut,\n        VOILUTFunction: voiLUTFunction,\n        SeriesInstanceUID: seriesInstanceUID,\n    };\n}\n","import { mat3 } from 'gl-matrix';\nfunction linePlaneIntersection(p0, p1, plane) {\n    const [x0, y0, z0] = p0;\n    const [x1, y1, z1] = p1;\n    const [A, B, C, D] = plane;\n    const a = x1 - x0;\n    const b = y1 - y0;\n    const c = z1 - z0;\n    const t = (-1 * (A * x0 + B * y0 + C * z0 - D)) / (A * a + B * b + C * c);\n    const X = a * t + x0;\n    const Y = b * t + y0;\n    const Z = c * t + z0;\n    return [X, Y, Z];\n}\nfunction planeEquation(normal, point, normalized = false) {\n    const [A, B, C] = normal;\n    const D = A * point[0] + B * point[1] + C * point[2];\n    if (normalized) {\n        const length = Math.sqrt(A * A + B * B + C * C);\n        return [A / length, B / length, C / length, D / length];\n    }\n    return [A, B, C, D];\n}\nfunction threePlaneIntersection(firstPlane, secondPlane, thirdPlane) {\n    const [A1, B1, C1, D1] = firstPlane;\n    const [A2, B2, C2, D2] = secondPlane;\n    const [A3, B3, C3, D3] = thirdPlane;\n    const m0 = mat3.fromValues(A1, A2, A3, B1, B2, B3, C1, C2, C3);\n    const m1 = mat3.fromValues(D1, D2, D3, B1, B2, B3, C1, C2, C3);\n    const m2 = mat3.fromValues(A1, A2, A3, D1, D2, D3, C1, C2, C3);\n    const m3 = mat3.fromValues(A1, A2, A3, B1, B2, B3, D1, D2, D3);\n    const x = mat3.determinant(m1) / mat3.determinant(m0);\n    const y = mat3.determinant(m2) / mat3.determinant(m0);\n    const z = mat3.determinant(m3) / mat3.determinant(m0);\n    return [x, y, z];\n}\nfunction planeDistanceToPoint(plane, point, signed = false) {\n    const [A, B, C, D] = plane;\n    const [x, y, z] = point;\n    const numerator = A * x + B * y + C * z - D;\n    const distance = Math.abs(numerator) / Math.sqrt(A * A + B * B + C * C);\n    const sign = signed ? Math.sign(numerator) : 1;\n    return sign * distance;\n}\nexport { linePlaneIntersection, planeEquation, threePlaneIntersection, planeDistanceToPoint, };\n","import { createPositionCallback } from './createPositionCallback';\nexport function pointInShapeCallback(imageData, options) {\n    const { pointInShapeFn, callback, boundsIJK, returnPoints = false } = options;\n    let scalarData;\n    if (imageData.getScalarData) {\n        scalarData = imageData.getScalarData();\n    }\n    else {\n        const scalars = imageData.getPointData().getScalars();\n        if (scalars) {\n            scalarData = scalars.getData();\n        }\n        else {\n            const { voxelManager } = imageData.get('voxelManager') || {};\n            if (voxelManager) {\n                scalarData = voxelManager.getCompleteScalarDataArray();\n            }\n        }\n    }\n    const dimensions = imageData.getDimensions();\n    const defaultBoundsIJK = [\n        [0, dimensions[0]],\n        [0, dimensions[1]],\n        [0, dimensions[2]],\n    ];\n    const bounds = boundsIJK || defaultBoundsIJK;\n    const pointsInShape = iterateOverPointsInShape({\n        imageData,\n        bounds,\n        scalarData,\n        pointInShapeFn,\n        callback,\n    });\n    return returnPoints ? pointsInShape : undefined;\n}\nexport function iterateOverPointsInShape({ imageData, bounds, scalarData, pointInShapeFn, callback, }) {\n    const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = bounds;\n    const { numComps } = imageData;\n    const dimensions = imageData.getDimensions();\n    const indexToWorld = createPositionCallback(imageData);\n    const pointIJK = [0, 0, 0];\n    const xMultiple = numComps ||\n        scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n    const yMultiple = dimensions[0] * xMultiple;\n    const zMultiple = dimensions[1] * yMultiple;\n    const pointsInShape = [];\n    for (let k = kMin; k <= kMax; k++) {\n        pointIJK[2] = k;\n        const indexK = k * zMultiple;\n        for (let j = jMin; j <= jMax; j++) {\n            pointIJK[1] = j;\n            const indexJK = indexK + j * yMultiple;\n            for (let i = iMin; i <= iMax; i++) {\n                pointIJK[0] = i;\n                const pointLPS = indexToWorld(pointIJK);\n                if (pointInShapeFn(pointLPS, pointIJK)) {\n                    const index = indexJK + i * xMultiple;\n                    let value;\n                    if (xMultiple > 2) {\n                        value = [\n                            scalarData[index],\n                            scalarData[index + 1],\n                            scalarData[index + 2],\n                        ];\n                    }\n                    else {\n                        value = scalarData[index];\n                    }\n                    pointsInShape.push({\n                        value,\n                        index,\n                        pointIJK,\n                        pointLPS: pointLPS.slice(),\n                    });\n                    callback({ value, index, pointIJK, pointLPS });\n                }\n            }\n        }\n    }\n    return pointsInShape;\n}\nexport function iterateOverPointsInShapeVoxelManager({ voxelManager, bounds, imageData, pointInShapeFn, callback, returnPoints, }) {\n    const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = bounds;\n    const indexToWorld = createPositionCallback(imageData);\n    const pointIJK = [0, 0, 0];\n    const pointsInShape = [];\n    for (let k = kMin; k <= kMax; k++) {\n        pointIJK[2] = k;\n        for (let j = jMin; j <= jMax; j++) {\n            pointIJK[1] = j;\n            for (let i = iMin; i <= iMax; i++) {\n                pointIJK[0] = i;\n                const pointLPS = indexToWorld(pointIJK);\n                if (pointInShapeFn(pointLPS, pointIJK)) {\n                    const index = voxelManager.toIndex(pointIJK);\n                    const value = voxelManager.getAtIndex(index);\n                    if (returnPoints) {\n                        pointsInShape.push({\n                            value,\n                            index,\n                            pointIJK: [...pointIJK],\n                            pointLPS: pointLPS.slice(),\n                        });\n                    }\n                    callback?.({ value, index, pointIJK, pointLPS });\n                }\n            }\n        }\n    }\n    return pointsInShape;\n}\n","import { vec3 } from 'gl-matrix';\nexport default function snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, deltaFrames) {\n    const { min, max, current } = sliceRange;\n    const posDiffFromFocalPoint = vec3.create();\n    vec3.sub(posDiffFromFocalPoint, position, focalPoint);\n    const steps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * steps;\n    let frameIndex = Math.round(floatingStepNumber);\n    let newFocalPoint = [\n        focalPoint[0] -\n            viewPlaneNormal[0] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[1] -\n            viewPlaneNormal[1] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[2] -\n            viewPlaneNormal[2] * floatingStepNumber * spacingInNormalDirection,\n    ];\n    frameIndex += deltaFrames;\n    if (frameIndex > steps) {\n        frameIndex = steps;\n    }\n    else if (frameIndex < 0) {\n        frameIndex = 0;\n    }\n    const newSlicePosFromMin = frameIndex * spacingInNormalDirection;\n    newFocalPoint = [\n        newFocalPoint[0] + viewPlaneNormal[0] * newSlicePosFromMin,\n        newFocalPoint[1] + viewPlaneNormal[1] * newSlicePosFromMin,\n        newFocalPoint[2] + viewPlaneNormal[2] * newSlicePosFromMin,\n    ];\n    const newPosition = [\n        newFocalPoint[0] + posDiffFromFocalPoint[0],\n        newFocalPoint[1] + posDiffFromFocalPoint[1],\n        newFocalPoint[2] + posDiffFromFocalPoint[2],\n    ];\n    return { newFocalPoint, newPosition };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport default function sortImageIdsAndGetSpacing(imageIds, scanAxisNormal) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    if (!scanAxisNormal) {\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        scanAxisNormal = vec3.create();\n        vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    }\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    const zSpacing = calculateSpacingBetweenImageIds(imageIds);\n    let sortedImageIds;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        vec3.sub(positionVector, referenceImagePositionPatient, imagePositionPatient);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        sortedImageIds = distanceImagePairs.map((a) => a.imageId);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        sortedImageIds = imageIds;\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        if (firstImageDistance - middleImageDistance < 0) {\n            sortedImageIds.reverse();\n        }\n    }\n    const { imagePositionPatient: origin } = metaData.get('imagePlaneModule', sortedImageIds[0]);\n    const result = {\n        zSpacing,\n        origin,\n        sortedImageIds,\n    };\n    return result;\n}\n","function getTransferFunctionNodes(transferFunction) {\n    const size = transferFunction.getSize();\n    const values = [];\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        transferFunction.getNodeValue(index, nodeValue1);\n        values.push(nodeValue1);\n    }\n    return values;\n}\nfunction setTransferFunctionNodes(transferFunction, nodes) {\n    if (!nodes?.length) {\n        return;\n    }\n    transferFunction.removeAllPoints();\n    nodes.forEach((node) => {\n        transferFunction.addRGBPoint(...node);\n    });\n}\nexport { getTransferFunctionNodes, setTransferFunctionNodes };\n","import transformWorldToIndex from './transformWorldToIndex';\nexport function transformCanvasToIJK(viewport, canvasPoint) {\n    const { imageData: vtkImageData } = viewport.getImageData();\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return transformWorldToIndex(vtkImageData, worldPoint);\n}\n","export default function transformIndexToWorld(imageData, voxelPos) {\n    return imageData.indexToWorld(voxelPos);\n}\n","export default function transformWorldToIndex(imageData, worldPos) {\n    const continuousIndex = imageData.worldToIndex(worldPos);\n    const index = continuousIndex.map(Math.round);\n    return index;\n}\nexport function transformWorldToIndexContinuous(imageData, worldPos) {\n    return imageData.worldToIndex(worldPos);\n}\n","function updateVTKImageDataWithCornerstoneImage(sourceImageData, image) {\n    const pixelData = image.voxelManager.getScalarData();\n    if (!sourceImageData.getPointData) {\n        return;\n    }\n    const scalarData = sourceImageData\n        .getPointData()\n        .getScalars()\n        .getData();\n    if (image.color && image.rgba) {\n        const newPixelData = new Uint8Array(image.columns * image.rows * 3);\n        for (let i = 0; i < image.columns * image.rows; i++) {\n            newPixelData[i * 3] = pixelData[i * 4];\n            newPixelData[i * 3 + 1] = pixelData[i * 4 + 1];\n            newPixelData[i * 3 + 2] = pixelData[i * 4 + 2];\n        }\n        image.rgba = false;\n        image.getPixelData = () => newPixelData;\n        scalarData.set(newPixelData);\n    }\n    else {\n        scalarData.set(pixelData);\n    }\n    sourceImageData.modified();\n}\nexport { updateVTKImageDataWithCornerstoneImage };\n","import VOILUTFunctionType from '../enums/VOILUTFunctionType';\nimport { logit } from './logit';\nfunction toWindowLevel(low, high) {\n    const windowWidth = Math.abs(high - low) + 1;\n    const windowCenter = (low + high + 1) / 2;\n    return { windowWidth, windowCenter };\n}\nfunction toLowHighRange(windowWidth, windowCenter, voiLUTFunction = VOILUTFunctionType.LINEAR) {\n    if (voiLUTFunction === VOILUTFunctionType.LINEAR) {\n        return {\n            lower: windowCenter - 0.5 - (windowWidth - 1) / 2,\n            upper: windowCenter - 0.5 + (windowWidth - 1) / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.LINEAR_EXACT) {\n        return {\n            lower: windowCenter - windowWidth / 2,\n            upper: windowCenter + windowWidth / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.SAMPLED_SIGMOID) {\n        const xLower = logit(0.01, windowCenter, windowWidth);\n        const xUpper = logit(0.99, windowCenter, windowWidth);\n        return {\n            lower: xLower,\n            upper: xUpper,\n        };\n    }\n    else {\n        throw new Error('Invalid VOI LUT function');\n    }\n}\nexport { toWindowLevel, toLowHighRange };\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","import { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport getViewportsForAnnotation from '../../../utilities/getViewportsForAnnotation';\nimport * as math from '../../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport { addAnnotation, removeAnnotation, getAllAnnotations, getChildAnnotations, addChildAnnotation, clearParentAnnotation, } from '../../../stateManagement/annotation/annotationState';\nimport { ContourWindingDirection } from '../../../types/ContourAnnotation';\nimport { triggerAnnotationModified } from '../../../stateManagement/annotation/helpers/state';\nimport updateContourPolyline from '../../../utilities/contours/updateContourPolyline';\nimport { addContourSegmentationAnnotation, areSameSegment, isContourSegmentationAnnotation, removeContourSegmentationAnnotation, } from '../../../utilities/contourSegmentation';\nimport { getToolGroupForViewport } from '../../../store/ToolGroupManager';\nimport { hasTool, hasToolByName } from '../../../store/addTool';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default async function contourSegmentationCompletedListener(evt) {\n    const sourceAnnotation = evt.detail\n        .annotation;\n    if (!isContourSegmentationAnnotation(sourceAnnotation)) {\n        return;\n    }\n    const viewport = getViewport(sourceAnnotation);\n    const contourSegmentationAnnotations = getValidContourSegmentationAnnotations(viewport, sourceAnnotation);\n    if (!contourSegmentationAnnotations.length) {\n        return;\n    }\n    const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);\n    const targetAnnotationInfo = findIntersectingContour(viewport, sourcePolyline, contourSegmentationAnnotations);\n    if (!targetAnnotationInfo) {\n        return;\n    }\n    const { targetAnnotation, targetPolyline, isContourHole } = targetAnnotationInfo;\n    if (isContourHole) {\n        const { contourHoleProcessingEnabled = false } = evt.detail;\n        if (!contourHoleProcessingEnabled) {\n            return;\n        }\n        createPolylineHole(viewport, targetAnnotation, sourceAnnotation);\n    }\n    else {\n        combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);\n    }\n}\nfunction isFreehandContourSegToolRegisteredForViewport(viewport, silent = false) {\n    const toolName = 'PlanarFreehandContourSegmentationTool';\n    const toolGroup = getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n    let errorMessage;\n    if (!toolGroup.hasTool(toolName)) {\n        errorMessage = `Tool ${toolName} not added to ${toolGroup.id} toolGroup`;\n    }\n    else if (!toolGroup.getToolOptions(toolName)) {\n        errorMessage = `Tool ${toolName} must be in active/passive state`;\n    }\n    if (errorMessage && !silent) {\n        console.warn(errorMessage);\n    }\n    return !errorMessage;\n}\nfunction getViewport(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    const viewportWithToolRegistered = viewports.find((viewport) => isFreehandContourSegToolRegisteredForViewport(viewport, true));\n    return viewportWithToolRegistered ?? viewports[0];\n}\nfunction convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nfunction getValidContourSegmentationAnnotations(viewport, sourceAnnotation) {\n    const { annotationUID: sourceAnnotationUID } = sourceAnnotation;\n    const allAnnotations = getAllAnnotations();\n    return allAnnotations.filter((targetAnnotation) => targetAnnotation.annotationUID &&\n        targetAnnotation.annotationUID !== sourceAnnotationUID &&\n        isContourSegmentationAnnotation(targetAnnotation) &&\n        areSameSegment(targetAnnotation, sourceAnnotation) &&\n        viewport.isReferenceViewable(targetAnnotation.metadata));\n}\nfunction findIntersectingContour(viewport, sourcePolyline, contourSegmentationAnnotations) {\n    const sourceAABB = math.polyline.getAABB(sourcePolyline);\n    for (let i = 0; i < contourSegmentationAnnotations.length; i++) {\n        const targetAnnotation = contourSegmentationAnnotations[i];\n        const targetPolyline = convertContourPolylineToCanvasSpace(targetAnnotation.data.contour.polyline, viewport);\n        const targetAABB = math.polyline.getAABB(targetPolyline);\n        const aabbIntersect = math.aabb.intersectAABB(sourceAABB, targetAABB);\n        const lineSegmentsIntersect = aabbIntersect &&\n            math.polyline.intersectPolyline(sourcePolyline, targetPolyline);\n        const isContourHole = aabbIntersect &&\n            !lineSegmentsIntersect &&\n            math.polyline.containsPoints(targetPolyline, sourcePolyline);\n        if (lineSegmentsIntersect || isContourHole) {\n            return { targetAnnotation, targetPolyline, isContourHole };\n        }\n    }\n}\nexport function createPolylineHole(viewport, targetAnnotation, holeAnnotation) {\n    const { windingDirection: targetWindingDirection } = targetAnnotation.data.contour;\n    const { windingDirection: holeWindingDirection } = holeAnnotation.data.contour;\n    addChildAnnotation(targetAnnotation, holeAnnotation);\n    removeContourSegmentationAnnotation(holeAnnotation);\n    const { contour: holeContour } = holeAnnotation.data;\n    const holePolyline = convertContourPolylineToCanvasSpace(holeContour.polyline, viewport);\n    updateContourPolyline(holeAnnotation, {\n        points: holePolyline,\n        closed: holeContour.closed,\n    }, viewport);\n    const { element } = viewport;\n    const updatedToolNames = new Set([\n        DEFAULT_CONTOUR_SEG_TOOL_NAME,\n        targetAnnotation.metadata.toolName,\n        holeAnnotation.metadata.toolName,\n    ]);\n    for (const toolName of updatedToolNames.values()) {\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n}\nfunction getContourHolesData(viewport, annotation) {\n    return getChildAnnotations(annotation).map((holeAnnotation) => {\n        const polyline = convertContourPolylineToCanvasSpace(holeAnnotation.data.contour.polyline, viewport);\n        return { annotation: holeAnnotation, polyline };\n    });\n}\nfunction combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline) {\n    if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME)) {\n        console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME} is not registered in cornerstone`);\n        return;\n    }\n    if (!isFreehandContourSegToolRegisteredForViewport(viewport)) {\n        return;\n    }\n    const sourceStartPoint = sourcePolyline[0];\n    const mergePolylines = math.polyline.containsPoint(targetPolyline, sourceStartPoint);\n    const contourHolesData = getContourHolesData(viewport, targetAnnotation);\n    const unassignedContourHolesSet = new Set(contourHolesData);\n    const reassignedContourHolesMap = new Map();\n    const assignHoleToPolyline = (parentPolyline, holeData) => {\n        let holes = reassignedContourHolesMap.get(parentPolyline);\n        if (!holes) {\n            holes = [];\n            reassignedContourHolesMap.set(parentPolyline, holes);\n        }\n        holes.push(holeData);\n        unassignedContourHolesSet.delete(holeData);\n    };\n    const newPolylines = [];\n    if (mergePolylines) {\n        const mergedPolyline = math.polyline.mergePolylines(targetPolyline, sourcePolyline);\n        newPolylines.push(mergedPolyline);\n        Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => assignHoleToPolyline(mergedPolyline, holeData));\n    }\n    else {\n        const subtractedPolylines = math.polyline.subtractPolylines(targetPolyline, sourcePolyline);\n        subtractedPolylines.forEach((newPolyline) => {\n            newPolylines.push(newPolyline);\n            Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => {\n                const containsHole = math.polyline.containsPoints(newPolyline, holeData.polyline);\n                if (containsHole) {\n                    assignHoleToPolyline(newPolyline, holeData);\n                    unassignedContourHolesSet.delete(holeData);\n                }\n            });\n        });\n    }\n    Array.from(reassignedContourHolesMap.values()).forEach((contourHolesDataArray) => contourHolesDataArray.forEach((contourHoleData) => clearParentAnnotation(contourHoleData.annotation)));\n    const { element } = viewport;\n    const enabledElement = getEnabledElement(element);\n    const { metadata, data } = targetAnnotation;\n    const { handles, segmentation } = data;\n    const { textBox } = handles;\n    removeAnnotation(sourceAnnotation.annotationUID);\n    removeAnnotation(targetAnnotation.annotationUID);\n    for (let i = 0; i < newPolylines.length; i++) {\n        const polyline = newPolylines[i];\n        const startPoint = viewport.canvasToWorld(polyline[0]);\n        const endPoint = viewport.canvasToWorld(polyline[polyline.length - 1]);\n        const newAnnotation = {\n            metadata: {\n                ...metadata,\n                toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n                originalToolName: metadata.originalToolName || metadata.toolName,\n            },\n            data: {\n                cachedStats: {},\n                handles: {\n                    points: [startPoint, endPoint],\n                    textBox: textBox ? { ...textBox } : undefined,\n                },\n                contour: {\n                    polyline: [],\n                    closed: true,\n                },\n                spline: targetAnnotation.data.spline,\n                segmentation: {\n                    ...segmentation,\n                },\n            },\n            annotationUID: csUtils.uuidv4(),\n            highlighted: true,\n            invalidated: true,\n            isLocked: false,\n            isVisible: undefined,\n            interpolationUID: targetAnnotation.interpolationUID,\n            interpolationCompleted: targetAnnotation.interpolationCompleted,\n        };\n        updateContourPolyline(newAnnotation, {\n            points: polyline,\n            closed: true,\n            targetWindingDirection: ContourWindingDirection.Clockwise,\n        }, viewport);\n        addAnnotation(newAnnotation, element);\n        addContourSegmentationAnnotation(newAnnotation);\n        triggerAnnotationModified(newAnnotation, viewport.element);\n        reassignedContourHolesMap\n            .get(polyline)\n            ?.forEach((holeData) => addChildAnnotation(newAnnotation, holeData.annotation));\n    }\n    updateViewports(enabledElement, targetAnnotation, sourceAnnotation);\n}\nfunction updateViewports(enabledElement, targetAnnotation, sourceAnnotation) {\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    const updatedTtoolNames = new Set([\n        DEFAULT_CONTOUR_SEG_TOOL_NAME,\n        targetAnnotation.metadata.toolName,\n        sourceAnnotation.metadata.toolName,\n    ]);\n    for (const toolName of updatedTtoolNames.values()) {\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    return new Promise((resolve) => window.requestAnimationFrame(resolve));\n}\n","import { BaseVolumeViewport, cache, utilities as csUtils, getEnabledElementByViewportId, volumeLoader, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { triggerSegmentationAdded } from './events/triggerSegmentationAdded';\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    viewportSegRepresentations: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        this._stackLabelmapImageIdReferenceMap = new Map();\n        this._labelmapImageIdReferenceMap = new Map();\n        uid ||= csUtils.uuidv4();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    updateState(updater) {\n        const newState = csUtils.deepClone(this.state);\n        updater(newState);\n        this.state = Object.freeze(newState);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    getNextColorLUTIndex() {\n        return this.state.colorLUT.length;\n    }\n    resetState() {\n        this._stackLabelmapImageIdReferenceMap.clear();\n        this._labelmapImageIdReferenceMap.clear();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    updateSegmentation(segmentationId, payload) {\n        this.updateState((draftState) => {\n            const segmentation = draftState.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n            if (!segmentation) {\n                console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);\n                return;\n            }\n            Object.assign(segmentation, payload);\n        });\n        triggerSegmentationModified(segmentationId);\n    }\n    addSegmentation(segmentation) {\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.updateState((state) => {\n            const newSegmentation = csUtils.deepClone(segmentation);\n            if (newSegmentation.representationData.Labelmap &&\n                'volumeId' in newSegmentation.representationData.Labelmap &&\n                !('imageIds' in newSegmentation.representationData.Labelmap)) {\n                const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);\n                newSegmentation.representationData\n                    .Labelmap.imageIds = imageIds;\n            }\n            state.segmentations.push(newSegmentation);\n        });\n        triggerSegmentationAdded(segmentation.segmentationId);\n    }\n    removeSegmentation(segmentationId) {\n        this.updateState((state) => {\n            const filteredSegmentations = state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n            state.segmentations.splice(0, state.segmentations.length, ...filteredSegmentations);\n        });\n        triggerSegmentationRemoved(segmentationId);\n    }\n    addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const existingRepresentations = this.getSegmentationRepresentations(viewportId, {\n            type: type,\n            segmentationId,\n        });\n        if (existingRepresentations.length > 0) {\n            console.debug('A segmentation representation of type', type, 'already exists in viewport', viewportId, 'for segmentation', segmentationId);\n            return;\n        }\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                state.viewportSegRepresentations[viewportId] = [];\n                segmentationStyle.setRenderInactiveSegmentations(viewportId, true);\n            }\n            if (type !== SegmentationRepresentations.Labelmap) {\n                this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig);\n            }\n            else {\n                this.addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig);\n            }\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId, type);\n    }\n    addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig) {\n        const segmentation = state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const segmentReps = {};\n        Object.keys(segmentation.segments).forEach((segmentIndex) => {\n            segmentReps[Number(segmentIndex)] = {\n                visible: true,\n            };\n        });\n        state.viewportSegRepresentations[viewportId].push({\n            segmentationId,\n            type,\n            active: true,\n            visible: true,\n            colorLUTIndex: renderingConfig?.colorLUTIndex || 0,\n            segments: segmentReps,\n            config: {\n                ...getDefaultRenderingConfig(type),\n                ...renderingConfig,\n            },\n        });\n        this._setActiveSegmentation(state, viewportId, segmentationId);\n    }\n    addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations.Labelmap)) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n        }\n        this.processLabelmapRepresentationAddition(viewportId, segmentationId);\n        this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n    }\n    async processLabelmapRepresentationAddition(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport;\n        const { representationData } = segmentation;\n        const isBaseVolumeSegmentation = 'volumeId' in representationData.Labelmap;\n        const viewport = enabledElement.viewport;\n        if (!volumeViewport && !isBaseVolumeSegmentation) {\n            !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);\n        }\n    }\n    _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {\n        const referenceImageId = viewport.getCurrentImageId();\n        let viewableLabelmapImageIdFound = false;\n        for (const labelmapImageId of labelmapImageIds) {\n            const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });\n            if (viewableImageId) {\n                viewableLabelmapImageIdFound = true;\n                this._stackLabelmapImageIdReferenceMap\n                    .get(segmentationId)\n                    .set(referenceImageId, labelmapImageId);\n                this._updateLabelmapImageIdReferenceMap({\n                    segmentationId,\n                    referenceImageId,\n                    labelmapImageId,\n                });\n            }\n        }\n        if (updateCallback) {\n            updateCallback(viewport, segmentationId, labelmapImageIds);\n        }\n        return viewableLabelmapImageIdFound\n            ? this._stackLabelmapImageIdReferenceMap\n                .get(segmentationId)\n                .get(referenceImageId)\n            : undefined;\n    }\n    updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);\n    }\n    _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport, segmentationId, labelmapImageIds) => {\n            const imageIds = stackViewport.getImageIds();\n            imageIds.forEach((referenceImageId, index) => {\n                for (const labelmapImageId of labelmapImageIds) {\n                    const viewableImageId = stackViewport.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });\n                    if (viewableImageId) {\n                        this._stackLabelmapImageIdReferenceMap\n                            .get(segmentationId)\n                            .set(referenceImageId, labelmapImageId);\n                        this._updateLabelmapImageIdReferenceMap({\n                            segmentationId,\n                            referenceImageId,\n                            labelmapImageId,\n                        });\n                    }\n                }\n            });\n        });\n    }\n    getLabelmapImageIds(representationData) {\n        const labelmapData = representationData.Labelmap;\n        let labelmapImageIds;\n        if (labelmapData.imageIds) {\n            labelmapImageIds = labelmapData\n                .imageIds;\n        }\n        else if (!labelmapImageIds &&\n            labelmapData.volumeId) {\n            const volumeId = labelmapData\n                .volumeId;\n            const volume = cache.getVolume(volumeId);\n            labelmapImageIds = volume.imageIds;\n        }\n        return labelmapImageIds;\n    }\n    getLabelmapImageIdsForImageId(imageId, segmentationId) {\n        const key = this._generateMapKey({\n            segmentationId,\n            referenceImageId: imageId,\n        });\n        return this._labelmapImageIdReferenceMap.get(key);\n    }\n    getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const referenceImageId = stackViewport.getCurrentImageId();\n        return this.getLabelmapImageIdsForImageId(referenceImageId, segmentationId);\n    }\n    getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const currentImageId = stackViewport.getCurrentImageId();\n        const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIdReferenceMap.get(currentImageId);\n    }\n    getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return [];\n        }\n        this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        const imageIds = viewport.getImageIds();\n        const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIds.map((imageId) => {\n            return associatedReferenceImageAndLabelmapImageIds.get(imageId);\n        });\n    }\n    removeSegmentationRepresentationsInternal(viewportId, specifier) {\n        const removedRepresentations = [];\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                return;\n            }\n            const currentRepresentations = state.viewportSegRepresentations[viewportId];\n            let activeRepresentationRemoved = false;\n            if (!specifier ||\n                Object.values(specifier).every((value) => value === undefined)) {\n                removedRepresentations.push(...currentRepresentations);\n                delete state.viewportSegRepresentations[viewportId];\n            }\n            else {\n                const { segmentationId, type } = specifier;\n                state.viewportSegRepresentations[viewportId] =\n                    currentRepresentations.filter((representation) => {\n                        const shouldRemove = (segmentationId &&\n                            type &&\n                            representation.segmentationId === segmentationId &&\n                            representation.type === type) ||\n                            (segmentationId &&\n                                !type &&\n                                representation.segmentationId === segmentationId) ||\n                            (!segmentationId && type && representation.type === type);\n                        if (shouldRemove) {\n                            removedRepresentations.push(representation);\n                            if (representation.active) {\n                                activeRepresentationRemoved = true;\n                            }\n                        }\n                        return !shouldRemove;\n                    });\n                if (state.viewportSegRepresentations[viewportId].length === 0) {\n                    delete state.viewportSegRepresentations[viewportId];\n                }\n                else if (activeRepresentationRemoved) {\n                    state.viewportSegRepresentations[viewportId][0].active = true;\n                }\n            }\n        });\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentations(viewportId, specifier) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        removedRepresentations.forEach((representation) => {\n            triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);\n        });\n        const remainingRepresentations = this.getSegmentationRepresentations(viewportId);\n        if (remainingRepresentations.length > 0 &&\n            remainingRepresentations[0].active) {\n            triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);\n        }\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        if (!suppressEvent) {\n            removedRepresentations.forEach(({ segmentationId, type }) => {\n                triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);\n            });\n        }\n        return removedRepresentations;\n    }\n    _updateLabelmapImageIdReferenceMap({ segmentationId, referenceImageId, labelmapImageId, }) {\n        const key = this._generateMapKey({ segmentationId, referenceImageId });\n        if (!this._labelmapImageIdReferenceMap.has(key)) {\n            this._labelmapImageIdReferenceMap.set(key, [labelmapImageId]);\n            return;\n        }\n        const currentValues = this._labelmapImageIdReferenceMap.get(key);\n        const newValues = Array.from(new Set([...currentValues, labelmapImageId]));\n        this._labelmapImageIdReferenceMap.set(key, newValues);\n    }\n    _setActiveSegmentation(state, viewportId, segmentationId) {\n        const viewport = state.viewportSegRepresentations[viewportId];\n        if (!viewport) {\n            return;\n        }\n        viewport.forEach((value) => {\n            value.active = value.segmentationId === segmentationId;\n        });\n    }\n    setActiveSegmentation(viewportId, segmentationId) {\n        this.updateState((state) => {\n            const viewport = state.viewportSegRepresentations[viewportId];\n            if (!viewport) {\n                return;\n            }\n            viewport.forEach((value) => {\n                value.active = value.segmentationId === segmentationId;\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId);\n    }\n    getActiveSegmentation(viewportId) {\n        if (!this.state.viewportSegRepresentations[viewportId]) {\n            return;\n        }\n        const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);\n        if (!activeSegRep) {\n            return;\n        }\n        return this.getSegmentation(activeSegRep.segmentationId);\n    }\n    getSegmentationRepresentations(viewportId, specifier = {}) {\n        const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];\n        if (!viewportRepresentations) {\n            return [];\n        }\n        if (!specifier.type && !specifier.segmentationId) {\n            return viewportRepresentations;\n        }\n        return viewportRepresentations.filter((representation) => {\n            const typeMatch = specifier.type\n                ? representation.type === specifier.type\n                : true;\n            const idMatch = specifier.segmentationId\n                ? representation.segmentationId === specifier.segmentationId\n                : true;\n            return typeMatch && idMatch;\n        });\n    }\n    getSegmentationRepresentation(viewportId, specifier) {\n        return this.getSegmentationRepresentations(viewportId, specifier)[0];\n    }\n    getSegmentationRepresentationVisibility(viewportId, specifier) {\n        const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);\n        return viewportRepresentation?.visible;\n    }\n    setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n        this.updateState((state) => {\n            const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);\n            if (!viewportRepresentations) {\n                return;\n            }\n            viewportRepresentations.forEach((representation) => {\n                representation.visible = visible;\n                Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {\n                    segment.visible = visible;\n                });\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        this.updateState((state) => {\n            if (state.colorLUT[lutIndex]) {\n                console.warn('Color LUT table already exists, overwriting');\n            }\n            state.colorLUT[lutIndex] = csUtils.deepClone(colorLUT);\n        });\n    }\n    removeColorLUT(colorLUTIndex) {\n        this.updateState((state) => {\n            delete state.colorLUT[colorLUTIndex];\n        });\n    }\n    _getStackIdForImageIds(imageIds) {\n        return imageIds\n            .map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15)))\n            .join('_');\n    }\n    getAllViewportSegmentationRepresentations() {\n        return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({\n            viewportId,\n            representations,\n        }));\n    }\n    getSegmentationRepresentationsBySegmentationId(segmentationId) {\n        const result = [];\n        Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {\n            const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);\n            if (filteredReps.length > 0) {\n                result.push({ viewportId, representations: filteredReps });\n            }\n        });\n        return result;\n    }\n    _generateMapKey({ segmentationId, referenceImageId }) {\n        return `${segmentationId}-${referenceImageId}`;\n    }\n}\nasync function internalComputeVolumeLabelmapFromStack({ imageIds, options, }) {\n    const segmentationImageIds = imageIds;\n    const volumeId = options?.volumeId || csUtils.uuidv4();\n    await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);\n    return { volumeId };\n}\nasync function internalConvertStackToVolumeLabelmap({ segmentationId, options, }) {\n    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n    const data = segmentation.representationData\n        .Labelmap;\n    const { volumeId } = await internalComputeVolumeLabelmapFromStack({\n        imageIds: data.imageIds,\n        options,\n    });\n    segmentation.representationData.Labelmap.volumeId = volumeId;\n}\nfunction getDefaultRenderingConfig(type) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    ofun.addPoint(0, 0);\n    if (type === SegmentationRepresentations.Labelmap) {\n        return {\n            cfun,\n            ofun,\n        };\n    }\n    else {\n        return {};\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { internalConvertStackToVolumeLabelmap, internalComputeVolumeLabelmapFromStack, defaultSegmentationStateManager, };\n","import { getActiveSegmentation as _getActiveSegmentation } from './getActiveSegmentation';\nimport { setActiveSegmentation as _setActiveSegmentation } from './setActiveSegmentation';\nfunction getActiveSegmentation(viewportId) {\n    return _getActiveSegmentation(viewportId);\n}\nfunction setActiveSegmentation(viewportId, segmentationId) {\n    _setActiveSegmentation(viewportId, segmentationId);\n}\nexport { getActiveSegmentation, setActiveSegmentation, };\n","import { addColorLUT as _addColorLUT } from '../addColorLUT';\nimport { getColorLUT as _getColorLUT } from '../getColorLUT';\nimport { getSegmentationRepresentations } from '../getSegmentationRepresentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    return _addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(viewportId, segmentationId, colorLUTsIndex) {\n    if (!_getColorLUT(colorLUTsIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n    if (!segmentationRepresentations) {\n        throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);\n    }\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        segmentationRepresentation.colorLUTIndex = colorLUTsIndex;\n    });\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nfunction getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n    });\n    if (!representations || representations.length === 0) {\n        return null;\n    }\n    const representation = representations[0];\n    const { colorLUTIndex } = representation;\n    const colorLUT = _getColorLUT(colorLUTIndex);\n    let colorValue = colorLUT[segmentIndex];\n    if (!colorValue) {\n        if (typeof segmentIndex !== 'number') {\n            console.warn(`Can't create colour for LUT index ${segmentIndex}`);\n            return null;\n        }\n        colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n    }\n    return colorValue;\n}\nfunction setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {\n    const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nexport { getSegmentIndexColor, addColorLUT, setColorLUT, setSegmentIndexColor };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentations(viewportId, specifier = {}) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n}\nexport function getSegmentationRepresentation(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    if (!specifier.segmentationId || !specifier.type) {\n        throw new Error('getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them');\n    }\n    const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n    return representations?.[0];\n}\nexport function getSegmentationRepresentationsBySegmentationId(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);\n}\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    return segments[segmentIndex].locked;\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    segments[segmentIndex].locked = locked;\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegmentIndices(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);\n    return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegmentIndices };\n","let svgNodeCache = {};\nexport function resetSvgNodeCache() {\n    svgNodeCache = {};\n}\nexport default svgNodeCache;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nconst { transformWorldToIndex } = csUtils;\nclass BidirectionalTool extends AnnotationTool {\n    static { this.toolName = 'Bidirectional'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            let canvasPoint1 = viewport.worldToCanvas(points[0]);\n            let canvasPoint2 = viewport.worldToCanvas(points[1]);\n            let line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            let distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            canvasPoint1 = viewport.worldToCanvas(points[2]);\n            canvasPoint2 = viewport.worldToCanvas(points[3]);\n            line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const data = annotation.data;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            hideElementCursor(element);\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            if (this.editData.handleIndex !== undefined) {\n                const { points } = data.handles;\n                const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n                const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n                if (secondLineSegmentLength > firstLineSegmentLength) {\n                    const longAxis = [[...points[2]], [...points[3]]];\n                    const shortAxisPoint0 = [...points[0]];\n                    const shortAxisPoint1 = [...points[1]];\n                    const longAxisVector = vec2.create();\n                    vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);\n                    const counterClockWisePerpendicularToLongAxis = vec2.create();\n                    vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);\n                    const currentShortAxisVector = vec2.create();\n                    vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);\n                    let shortAxis;\n                    if (vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {\n                        shortAxis = [shortAxisPoint0, shortAxisPoint1];\n                    }\n                    else {\n                        shortAxis = [shortAxisPoint1, shortAxisPoint0];\n                    }\n                    data.handles.points = [\n                        longAxis[0],\n                        longAxis[1],\n                        shortAxis[0],\n                        shortAxis[1],\n                    ];\n                }\n            }\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { worldToCanvas } = viewport;\n            const { annotation, viewportIdsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            data.handles.points[handleIndex] = [...worldPos];\n            const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n            const canvasCoords = {\n                longLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[0][0],\n                        y: canvasCoordPoints[0][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[1][0],\n                        y: canvasCoordPoints[1][1],\n                    },\n                },\n                shortLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[2][0],\n                        y: canvasCoordPoints[2][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[3][0],\n                        y: canvasCoordPoints[3][1],\n                    },\n                },\n            };\n            const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n            const shortAxisDistFromCenter = dist / 3;\n            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const vectorX = dx / length;\n            const vectorY = dy / length;\n            const xMid = (canvasCoords.longLineSegment.start.x +\n                canvasCoords.longLineSegment.end.x) /\n                2;\n            const yMid = (canvasCoords.longLineSegment.start.y +\n                canvasCoords.longLineSegment.end.y) /\n                2;\n            const startX = xMid + shortAxisDistFromCenter * vectorY;\n            const startY = yMid - shortAxisDistFromCenter * vectorX;\n            const endX = xMid - shortAxisDistFromCenter * vectorY;\n            const endY = yMid + shortAxisDistFromCenter * vectorX;\n            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            this.editData.hasMoved = true;\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragModifyHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragModifyHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotation, handleIndex: movingHandleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            const canvasCoordHandlesCurrent = [\n                viewport.worldToCanvas(data.handles.points[0]),\n                viewport.worldToCanvas(data.handles.points[1]),\n                viewport.worldToCanvas(data.handles.points[2]),\n                viewport.worldToCanvas(data.handles.points[3]),\n            ];\n            const firstLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[0][0],\n                    y: canvasCoordHandlesCurrent[0][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[1][0],\n                    y: canvasCoordHandlesCurrent[1][1],\n                },\n            };\n            const secondLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[2][0],\n                    y: canvasCoordHandlesCurrent[2][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[3][0],\n                    y: canvasCoordHandlesCurrent[3][1],\n                },\n            };\n            const proposedPoint = [...worldPos];\n            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n            if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];\n                const fixedHandleToProposedCoordVec = vec2.set(vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);\n                const fixedHandleToOldCoordVec = vec2.set(vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -\n                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -\n                    fixedHandleCanvasCoord[1]);\n                vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);\n                vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n                const proposedFirstLineSegment = {\n                    start: {\n                        x: fixedHandleCanvasCoord[0],\n                        y: fixedHandleCanvasCoord[1],\n                    },\n                    end: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                };\n                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {\n                    return;\n                }\n                const centerOfRotation = fixedHandleCanvasCoord;\n                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);\n                let firstPointX = canvasCoordHandlesCurrent[2][0];\n                let firstPointY = canvasCoordHandlesCurrent[2][1];\n                let secondPointX = canvasCoordHandlesCurrent[3][0];\n                let secondPointY = canvasCoordHandlesCurrent[3][1];\n                firstPointX -= centerOfRotation[0];\n                firstPointY -= centerOfRotation[1];\n                secondPointX -= centerOfRotation[0];\n                secondPointY -= centerOfRotation[1];\n                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n                firstPointX = rotatedFirstPoint + centerOfRotation[0];\n                firstPointY = rotatedFirstPointY + centerOfRotation[1];\n                secondPointX = rotatedSecondPoint + centerOfRotation[0];\n                secondPointY = rotatedSecondPointY + centerOfRotation[1];\n                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n                const newSecondPoint = viewport.canvasToWorld([\n                    secondPointX,\n                    secondPointY,\n                ]);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n                data.handles.points[2] = newFirstPoint;\n                data.handles.points[3] = newSecondPoint;\n            }\n            else {\n                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n                const canvasCoordsCurrent = {\n                    longLineSegment: {\n                        start: firstLineSegment.start,\n                        end: firstLineSegment.end,\n                    },\n                    shortLineSegment: {\n                        start: secondLineSegment.start,\n                        end: secondLineSegment.end,\n                    },\n                };\n                const longLineSegmentVec = vec2.subtract(vec2.create(), [\n                    canvasCoordsCurrent.longLineSegment.end.x,\n                    canvasCoordsCurrent.longLineSegment.end.y,\n                ], [\n                    canvasCoordsCurrent.longLineSegment.start.x,\n                    canvasCoordsCurrent.longLineSegment.start.y,\n                ]);\n                const longLineSegmentVecNormalized = vec2.normalize(vec2.create(), longLineSegmentVec);\n                const proposedToCurrentVec = vec2.subtract(vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [\n                    canvasCoordHandlesCurrent[movingHandleIndex][0],\n                    canvasCoordHandlesCurrent[movingHandleIndex][1],\n                ]);\n                const movementLength = vec2.length(proposedToCurrentVec);\n                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);\n                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n                const newTranslatedPoint = vec2.scaleAndAdd(vec2.create(), [\n                    canvasCoordHandlesCurrent[translateHandleIndex][0],\n                    canvasCoordHandlesCurrent[translateHandleIndex][1],\n                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);\n                if (this._movingLongAxisWouldPutItThroughShortAxis({\n                    start: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                    end: {\n                        x: newTranslatedPoint[0],\n                        y: newTranslatedPoint[1],\n                    },\n                }, {\n                    start: {\n                        x: canvasCoordsCurrent.longLineSegment.start.x,\n                        y: canvasCoordsCurrent.longLineSegment.start.y,\n                    },\n                    end: {\n                        x: canvasCoordsCurrent.longLineSegment.end.x,\n                        y: canvasCoordsCurrent.longLineSegment.end.y,\n                    },\n                })) {\n                    return;\n                }\n                const intersectionPoint = lineSegment.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n                if (!intersectionPoint) {\n                    return;\n                }\n                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {\n            const vectorInSecondLineDirection = vec2.create();\n            vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);\n            vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n            const extendedSecondLineSegment = {\n                start: {\n                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n                },\n                end: {\n                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n                },\n            };\n            const proposedIntersectionPoint = lineSegment.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n            const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n            return wouldPutThroughShortAxis;\n        };\n        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { element } = enabledElement.viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const worldPos3 = data.handles.points[2];\n            const worldPos4 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, dimensions } = image;\n                const index1 = transformWorldToIndex(imageData, worldPos1);\n                const index2 = transformWorldToIndex(imageData, worldPos2);\n                const index3 = transformWorldToIndex(imageData, worldPos3);\n                const index4 = transformWorldToIndex(imageData, worldPos4);\n                const handles1 = [index1, index2];\n                const handles2 = [index3, index4];\n                const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);\n                const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);\n                const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n                const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n                const length = dist1 > dist2 ? dist1 : dist2;\n                const width = dist1 > dist2 ? dist2 : dist1;\n                const unit = dist1 > dist2 ? units1 : units2;\n                const widthUnit = dist1 > dist2 ? units2 : units1;\n                this._isInsideVolume(index1, index2, index3, index4, dimensions)\n                    ? (this.isHandleOutsideImage = false)\n                    : (this.isHandleOutsideImage = true);\n                cachedStats[targetId] = {\n                    length,\n                    width,\n                    unit,\n                    widthUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions) &&\n                csUtils.indexWithinDimensions(index3, dimensions) &&\n                csUtils.indexWithinDimensions(index4, dimensions));\n        };\n        this._getSignedAngle = (vector1, vector2) => {\n            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(BidirectionalTool, enabledElement, [], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const { cachedStats, label } = data;\n    const { length, width, unit } = cachedStats[targetId];\n    const textLines = [];\n    if (label) {\n        textLines.push(label);\n    }\n    if (length === undefined) {\n        return textLines;\n    }\n    textLines.push(`L: ${csUtils.roundNumber(length)} ${unit || unit}`, `W: ${csUtils.roundNumber(width)} ${unit}`);\n    return textLines;\n}\nexport default BidirectionalTool;\n","import { getEnabledElement, eventTarget } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { Events, ToolModes, StrategyCallbacks } from '../../enums';\nimport { fillInsideSphere, thresholdInsideSphere, thresholdInsideSphereIsland, } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nimport { getStrategyData } from './strategies/utils/getStrategyData';\nclass BrushTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n                THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL: thresholdInsideSphereIsland,\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            brushSize: 25,\n            useCenterSegmentIndex: false,\n            preview: {\n                enabled: false,\n                previewColors: {\n                    0: [255, 255, 255, 128],\n                },\n                previewTimeMs: 250,\n                previewMoveDistance: 8,\n                dragMoveDistance: 4,\n                dragTimeMs: 500,\n            },\n            actions: {\n                [StrategyCallbacks.AcceptPreview]: {\n                    method: StrategyCallbacks.AcceptPreview,\n                    bindings: [\n                        {\n                            key: 'Enter',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.RejectPreview]: {\n                    method: StrategyCallbacks.RejectPreview,\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.Interpolate]: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'i',\n                        },\n                    ],\n                    configuration: {\n                        useBallStructuringElement: true,\n                        noUseDistanceTransform: true,\n                        noUseExtrapolation: true,\n                    },\n                },\n                interpolateExtrapolation: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'e',\n                        },\n                    ],\n                    configuration: {},\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolPassive = (evt) => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = (evt) => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this._editData = this.createEditData(element);\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            this._previewData.isDrag = false;\n            this._previewData.timerStart = Date.now();\n            const hoverData = this._hoverData || this.createHoverData(element);\n            triggerAnnotationRenderForViewportUIDs(hoverData.viewportIdsToRender);\n            const operationData = this.getOperationData(element);\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionStart);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n                if (!this.configuration.preview.enabled) {\n                    return;\n                }\n                const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;\n                const { currentPoints, element } = evt.detail;\n                const { canvas } = currentPoints;\n                const { startPoint, timer, timerStart, isDrag } = this._previewData;\n                if (isDrag) {\n                    return;\n                }\n                const delta = vec2.distance(canvas, startPoint);\n                const time = Date.now() - timerStart;\n                if (delta > previewMoveDistance ||\n                    (time > previewTimeMs && delta > dragMoveDistance)) {\n                    if (timer) {\n                        window.clearTimeout(timer);\n                        this._previewData.timer = null;\n                    }\n                    if (!isDrag) {\n                        this.rejectPreview(element);\n                    }\n                }\n                if (!this._previewData.timer) {\n                    const timer = window.setTimeout(this.previewCallback, 250);\n                    Object.assign(this._previewData, {\n                        timerStart: Date.now(),\n                        timer,\n                        startPoint: canvas,\n                        element,\n                    });\n                }\n            }\n        };\n        this.previewCallback = () => {\n            if (this._previewData.isDrag) {\n                this._previewData.timer = null;\n                return;\n            }\n            this._previewData.timer = null;\n            const operationData = this.getOperationData(this._previewData.element);\n            const enabledElement = getEnabledElement(this._previewData.element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const activeStrategy = this.configuration.activeStrategy;\n            const strategyData = getStrategyData({\n                operationData,\n                viewport,\n                strategy: activeStrategy,\n            });\n            if (!operationData) {\n                return;\n            }\n            const memo = this.createMemo(operationData.segmentationId, strategyData.segmentationVoxelManager);\n            this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), {\n                ...operationData,\n                ...strategyData,\n                memo,\n            }, StrategyCallbacks.Preview);\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this.updateCursor(evt);\n            const { viewportIdsToRender } = this._hoverData;\n            triggerAnnotationRenderForViewportUIDs(viewportIdsToRender);\n            const delta = vec2.distance(currentPoints.canvas, this._previewData.startPoint);\n            const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n            if (!this._previewData.isDrag &&\n                Date.now() - this._previewData.timerStart < dragTimeMs &&\n                delta < dragMoveDistance) {\n                return;\n            }\n            if (this._previewData.timer) {\n                window.clearTimeout(this._previewData.timer);\n                this._previewData.timer = null;\n            }\n            this._previewData.preview = this.applyActiveStrategy(enabledElement, this.getOperationData(element));\n            this._previewData.element = element;\n            this._previewData.timerStart = Date.now() + dragTimeMs;\n            this._previewData.isDrag = true;\n            this._previewData.startPoint = currentPoints.canvas;\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const operationData = this.getOperationData(element);\n            if (!this._previewData.preview && !this._previewData.isDrag) {\n                this.applyActiveStrategy(enabledElement, operationData);\n                this.doneEditMemo();\n            }\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.updateCursor(evt);\n            this._editData = null;\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionEnd);\n            if (!this._previewData.isDrag) {\n                this.acceptPreview(element);\n            }\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n        this.rejectPreview();\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        this._hoverData = this.createHoverData(element, centerCanvas);\n        this._calculateCursor(element, centerCanvas);\n        if (!this._hoverData) {\n            return;\n        }\n        triggerAnnotationRenderForViewportUIDs(this._hoverData.viewportIdsToRender);\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const camera = viewport.getCamera();\n        const { brushSize } = this.configuration;\n        const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n        const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const centerCursorInWorld = canvasToWorld([\n            centerCanvas[0],\n            centerCanvas[1],\n        ]);\n        const bottomCursorInWorld = vec3.create();\n        const topCursorInWorld = vec3.create();\n        const leftCursorInWorld = vec3.create();\n        const rightCursorInWorld = vec3.create();\n        for (let i = 0; i <= 2; i++) {\n            bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n            topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n            leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n            rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n        }\n        if (!this._hoverData) {\n            return;\n        }\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            bottomCursorInWorld,\n            topCursorInWorld,\n            leftCursorInWorld,\n            rightCursorInWorld,\n        ];\n        const activeStrategy = this.configuration.activeStrategy;\n        const strategy = this.configuration.strategies[activeStrategy];\n        if (typeof strategy?.computeInnerCircleRadius === 'function') {\n            strategy.computeInnerCircleRadius({\n                configuration: this.configuration,\n                viewport,\n            });\n        }\n        data.invalidated = false;\n    }\n    getStatistics(element, segmentIndices) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const stats = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.GetStatistics, segmentIndices);\n        return stats;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        super.acceptPreview(element);\n    }\n    interpolate(element, config) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this._previewData.preview = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.Interpolate, config.configuration);\n        this._previewData.isDrag = true;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData === undefined) {\n            return;\n        }\n        const { data } = this._hoverData.brushCursor;\n        const { viewport } = this._hoverData;\n        data.invalidated = true;\n        const { segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        if (!toolMetadata) {\n            return;\n        }\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n            lineDash: this.centerSegmentIndexInfo.segmentIndex === 0 ? [1, 2] : null,\n        });\n        const { dynamicRadiusInCanvas } = this.configuration?.threshold || {\n            dynamicRadiusInCanvas: 0,\n        };\n        if (dynamicRadiusInCanvas) {\n            const circleUID1 = '1';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {\n                color,\n            });\n        }\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getCanvasEllipseCorners, precalculatePointInEllipse, } from '../../../utilities/math/ellipse';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nimport { pointInSphere } from '../../../utilities/math/sphere';\nconst { transformWorldToIndex, isEqual } = csUtils;\nconst initializeCircle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const [topLeftCanvas, bottomRightCanvas] = getCanvasEllipseCorners(canvasCoordinates);\n        const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n        const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n        const circleCornersIJK = points.map((world) => {\n            return transformWorldToIndex(segmentationImageData, world);\n        });\n        const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());\n        operationData.isInObject = createPointInEllipse({\n            topLeftWorld,\n            bottomRightWorld,\n            center,\n        });\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInEllipse(worldInfo) {\n    const { topLeftWorld, bottomRightWorld, center } = worldInfo;\n    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n    const radius = Math.max(xRadius, yRadius, zRadius);\n    if (isEqual(xRadius, radius) &&\n        isEqual(yRadius, radius) &&\n        isEqual(zRadius, radius)) {\n        const sphereObj = {\n            center,\n            radius,\n            radius2: radius * radius,\n        };\n        return (pointLPS) => pointInSphere(sphereObj, pointLPS);\n    }\n    const ellipseObj = {\n        center: center,\n        xRadius,\n        yRadius,\n        zRadius,\n    };\n    const { precalculated } = precalculatePointInEllipse(ellipseObj, {});\n    return precalculated;\n}\nconst CIRCLE_STRATEGY = new BrushStrategy('Circle', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy('CircleThreshold', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;\nconst thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;\nexport function fillOutsideCircle() {\n    throw new Error('Not yet implemented');\n}\nexport { CIRCLE_STRATEGY, CIRCLE_THRESHOLD_STRATEGY, fillInsideCircle, thresholdInsideCircle, createPointInEllipse as createEllipseInPoint, };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils, StackViewport } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK, getBoundingBoxAroundShapeWorld, } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getStrategyData } from './utils/getStrategyData';\nimport { isAxisAlignedRectangle } from '../../../utilities/rectangleROITool/isAxisAlignedRectangle';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nconst { transformWorldToIndex } = csUtils;\nconst initializeRectangle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, imageVoxelManager, viewport, segmentationImageData, segmentationVoxelManager, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);\n        operationData.isInObject = pointInShapeFn;\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInRectangle(viewport, points, segmentationImageData) {\n    let rectangleCornersIJK = points.map((world) => {\n        return transformWorldToIndex(segmentationImageData, world);\n    });\n    rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n        return point.map((coord) => {\n            return Math.round(coord);\n        });\n    });\n    const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());\n    const isStackViewport = viewport instanceof StackViewport;\n    const isAligned = isStackViewport || isAxisAlignedRectangle(rectangleCornersIJK);\n    const direction = segmentationImageData.getDirection();\n    const spacing = segmentationImageData.getSpacing();\n    const { viewPlaneNormal } = viewport.getCamera();\n    const EPS = csUtils.getSpacingInNormalDirection({\n        direction,\n        spacing,\n    }, viewPlaneNormal);\n    const pointsBoundsLPS = getBoundingBoxAroundShapeWorld(points);\n    let [[xMin, xMax], [yMin, yMax], [zMin, zMax]] = pointsBoundsLPS;\n    xMin -= EPS;\n    xMax += EPS;\n    yMin -= EPS;\n    yMax += EPS;\n    zMin -= EPS;\n    zMax += EPS;\n    const pointInShapeFn = isAligned\n        ? () => true\n        : (pointLPS) => {\n            const [x, y, z] = pointLPS;\n            const xInside = x >= xMin && x <= xMax;\n            const yInside = y >= yMin && y <= yMax;\n            const zInside = z >= zMin && z <= zMax;\n            return xInside && yInside && zInside;\n        };\n    return { boundsIJK, pointInShapeFn };\n}\nconst RECTANGLE_STRATEGY = new BrushStrategy('Rectangle', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy('RectangleThreshold', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;\nconst thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;\nexport { RECTANGLE_STRATEGY, RECTANGLE_THRESHOLD_STRATEGY, fillInsideRectangle, thresholdInsideRectangle, };\n","import { utilities, BaseVolumeViewport, StackViewport, cache, metaData, } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nfunction annotationHydration(viewport, toolName, worldPoints, options) {\n    const viewReference = viewport.getViewReference();\n    const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;\n    const annotation = {\n        annotationUID: options?.annotationUID || utilities.uuidv4(),\n        data: {\n            handles: {\n                points: worldPoints,\n            },\n        },\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            toolName,\n            viewPlaneNormal,\n            FrameOfReferenceUID,\n            referencedImageId: getReferencedImageId(viewport, worldPoints[0], viewPlaneNormal),\n            ...options,\n        },\n    };\n    addAnnotation(annotation, viewport.element);\n    return annotation;\n}\nfunction getReferencedImageId(viewport, worldPos, viewPlaneNormal) {\n    let referencedImageId;\n    if (viewport instanceof StackViewport) {\n        referencedImageId = getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal);\n    }\n    else if (viewport instanceof BaseVolumeViewport) {\n        const targetId = getTargetId(viewport);\n        const volumeId = utilities.getVolumeId(targetId);\n        const imageVolume = cache.getVolume(volumeId);\n        referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n    }\n    else {\n        throw new Error('getReferencedImageId: viewport must be a StackViewport or BaseVolumeViewport');\n    }\n    return referencedImageId;\n}\nfunction getTargetId(viewport) {\n    const targetId = viewport.getViewReferenceId?.();\n    if (targetId) {\n        return targetId;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n        return `volumeId:${getTargetVolumeId(viewport)}`;\n    }\n    throw new Error('getTargetId: viewport must have a getTargetId method');\n}\nfunction getTargetVolumeId(viewport) {\n    const actorEntries = viewport.getActors();\n    if (!actorEntries) {\n        return;\n    }\n    return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;\n}\nfunction getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal) {\n    const imageIds = viewport.getImageIds();\n    if (!imageIds || !imageIds.length) {\n        return;\n    }\n    const distanceImagePairs = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = calculateDistanceToImage(worldPos, imagePositionPatient, viewPlaneNormal);\n        return { imageId, distance };\n    });\n    distanceImagePairs.sort((a, b) => a.distance - b.distance);\n    return distanceImagePairs[0].imageId;\n}\nfunction calculateDistanceToImage(worldPos, ImagePositionPatient, viewPlaneNormal) {\n    const dir = vec3.create();\n    vec3.sub(dir, worldPos, ImagePositionPatient);\n    const dot = vec3.dot(dir, viewPlaneNormal);\n    return Math.abs(dot);\n}\nexport { annotationHydration, getClosestImageIdForStackViewport };\n","function findNextLink(line, lines, contourPoints) {\n    let index = -1;\n    lines.forEach((cell, i) => {\n        if (index >= 0) {\n            return;\n        }\n        if (cell.a == line.b) {\n            index = i;\n        }\n    });\n    if (index >= 0) {\n        const nextLine = lines[index];\n        lines.splice(index, 1);\n        contourPoints.push(nextLine.b);\n        if (contourPoints[0] == nextLine.b) {\n            return {\n                remainingLines: lines,\n                contourPoints,\n                type: 'CLOSED_PLANAR',\n            };\n        }\n        return findNextLink(nextLine, lines, contourPoints);\n    }\n    return {\n        remainingLines: lines,\n        contourPoints,\n        type: 'OPEN_PLANAR',\n    };\n}\nexport function findContours(lines) {\n    if (lines.length == 0) {\n        return [];\n    }\n    const contourPoints = [];\n    const firstCell = lines.shift();\n    contourPoints.push(firstCell.a);\n    contourPoints.push(firstCell.b);\n    const result = findNextLink(firstCell, lines, contourPoints);\n    if (result.remainingLines.length == 0) {\n        return [\n            {\n                type: result.type,\n                contourPoints: result.contourPoints,\n            },\n        ];\n    }\n    else {\n        const extraContours = findContours(result.remainingLines);\n        extraContours.push({\n            type: result.type,\n            contourPoints: result.contourPoints,\n        });\n        return extraContours;\n    }\n}\nexport function findContoursFromReducedSet(lines) {\n    return findContours(lines);\n}\nexport default {\n    findContours,\n    findContoursFromReducedSet,\n};\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst { isEqual } = csUtils;\nexport default function findHandlePolylineIndex(annotation, handleIndex) {\n    const { polyline } = annotation.data.contour;\n    const { points } = annotation.data.handles;\n    const { length } = points;\n    if (handleIndex === length) {\n        return polyline.length;\n    }\n    if (handleIndex < 0) {\n        handleIndex = (handleIndex + length) % length;\n    }\n    if (handleIndex === 0) {\n        return 0;\n    }\n    const handle = points[handleIndex];\n    const index = polyline.findIndex((point) => isEqual(handle, point));\n    if (index !== -1) {\n        return index;\n    }\n    let closestDistance = Infinity;\n    return polyline.reduce((closestIndex, point, testIndex) => {\n        const distance = vec3.squaredDistance(point, handle);\n        if (distance < closestDistance) {\n            closestDistance = distance;\n            return testIndex;\n        }\n        return closestIndex;\n    }, -1);\n}\n","export function getDeduplicatedVTKPolyDataPoints(polyData, bypass = false) {\n    const points = polyData.getPoints();\n    const lines = polyData.getLines();\n    const pointsArray = new Array(points.getNumberOfPoints())\n        .fill(0)\n        .map((_, i) => points.getPoint(i).slice());\n    const linesArray = new Array(lines.getNumberOfCells()).fill(0).map((_, i) => {\n        const cell = lines.getCell(i * 3).slice();\n        return { a: cell[0], b: cell[1] };\n    });\n    if (bypass) {\n        return { points: pointsArray, lines: linesArray };\n    }\n    const newPoints = [];\n    for (const [i, pt] of pointsArray.entries()) {\n        const index = newPoints.findIndex((point) => point[0] === pt[0] && point[1] === pt[1] && point[2] === pt[2]);\n        if (index >= 0) {\n            linesArray.map((line) => {\n                if (line.a === i) {\n                    line.a = index;\n                }\n                if (line.b === i) {\n                    line.b = index;\n                }\n                return line;\n            });\n        }\n        else {\n            const newIndex = newPoints.length;\n            newPoints.push(pt);\n            linesArray.map((line) => {\n                if (line.a === i) {\n                    line.a = newIndex;\n                }\n                if (line.b === i) {\n                    line.b = newIndex;\n                }\n                return line;\n            });\n        }\n    }\n    const newLines = linesArray.filter((line) => line.a !== line.b);\n    return { points: newPoints, lines: newLines };\n}\nexport default { getDeduplicatedVTKPolyDataPoints };\n","import { Enums, utilities } from '@cornerstonejs/core';\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\nconst VOXEL_UNITS = 'voxels';\nconst SUPPORTED_REGION_DATA_TYPES = [\n    1,\n    2,\n    3,\n    4,\n];\nconst SUPPORTED_LENGTH_VARIANT = [\n    '3,3',\n    '4,7',\n];\nconst SUPPORTED_PROBE_VARIANT = [\n    '4,3',\n    '4,7',\n];\nconst UNIT_MAPPING = {\n    0: 'px',\n    1: 'percent',\n    2: 'dB',\n    3: 'cm',\n    4: 'seconds',\n    5: 'hertz',\n    6: 'dB/seconds',\n    7: 'cm/sec',\n    8: 'cm\\xb2',\n    9: 'cm\\xb2/s',\n    0xc: 'degrees',\n};\nconst EPS = 1e-3;\nconst SQUARE = '\\xb2';\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n    const { calibration, hasPixelSpacing } = image;\n    let unit = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n    const volumeUnit = hasPixelSpacing ? 'mm\\xb3' : VOXEL_UNITS;\n    let areaUnit = unit + SQUARE;\n    let scale = 1;\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { unit, areaUnit, scale, volumeUnit };\n    }\n    if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n        return {\n            unit: PIXEL_UNITS,\n            areaUnit: PIXEL_UNITS + SQUARE,\n            scale,\n            volumeUnit: VOXEL_UNITS,\n        };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        let imageIndex1, imageIndex2;\n        if (Array.isArray(handles) && handles.length === 2) {\n            [imageIndex1, imageIndex2] = handles;\n        }\n        else if (typeof handles === 'function') {\n            const points = handles();\n            imageIndex1 = points[0];\n            imageIndex2 = points[1];\n        }\n        let regions = calibration.sequenceOfUltrasoundRegions.filter((region) => imageIndex1[0] >= region.regionLocationMinX0 &&\n            imageIndex1[0] <= region.regionLocationMaxX1 &&\n            imageIndex1[1] >= region.regionLocationMinY0 &&\n            imageIndex1[1] <= region.regionLocationMaxY1 &&\n            imageIndex2[0] >= region.regionLocationMinX0 &&\n            imageIndex2[0] <= region.regionLocationMaxX1 &&\n            imageIndex2[1] >= region.regionLocationMinY0 &&\n            imageIndex2[1] <= region.regionLocationMaxY1);\n        if (!regions?.length) {\n            return { unit, areaUnit, scale, volumeUnit };\n        }\n        regions = regions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!regions.length) {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n        const region = regions[0];\n        const physicalDeltaX = Math.abs(region.physicalDeltaX);\n        const physicalDeltaY = Math.abs(region.physicalDeltaY);\n        const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);\n        if (isSamePhysicalDelta) {\n            scale = 1 / physicalDeltaX;\n            calibrationType = 'US Region';\n            unit = UNIT_MAPPING[region.physicalUnitsXDirection] || 'unknown';\n            areaUnit = unit + SQUARE;\n        }\n        else {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n    }\n    else if (calibration.scale) {\n        scale = calibration.scale;\n    }\n    const types = [\n        CalibrationTypes.ERMF,\n        CalibrationTypes.USER,\n        CalibrationTypes.ERROR,\n        CalibrationTypes.PROJECTION,\n    ];\n    if (types.includes(calibration?.type)) {\n        calibrationType = calibration.type;\n    }\n    return {\n        unit: unit + (calibrationType ? ` ${calibrationType}` : ''),\n        areaUnit: areaUnit + (calibrationType ? ` ${calibrationType}` : ''),\n        scale,\n        volumeUnit: volumeUnit + (calibrationType ? ` ${calibrationType}` : ''),\n    };\n};\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n    const [imageIndex] = handles;\n    const { calibration } = image;\n    let units = ['raw'];\n    let values = [null];\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { units, values };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!supportedRegionsMetadata?.length) {\n            return { units, values };\n        }\n        const region = supportedRegionsMetadata.find((region) => imageIndex[0] >= region.regionLocationMinX0 &&\n            imageIndex[0] <= region.regionLocationMaxX1 &&\n            imageIndex[1] >= region.regionLocationMinY0 &&\n            imageIndex[1] <= region.regionLocationMaxY1);\n        if (!region) {\n            return { units, values };\n        }\n        const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;\n        const { physicalDeltaX, physicalDeltaY } = region;\n        const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *\n            physicalDeltaY;\n        const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *\n            physicalDeltaX;\n        calibrationType = 'US Region';\n        values = [xValue, yValue];\n        units = [\n            UNIT_MAPPING[region.physicalUnitsXDirection],\n            UNIT_MAPPING[region.physicalUnitsYDirection],\n        ];\n    }\n    return {\n        units,\n        values,\n        calibrationType,\n    };\n};\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\nexport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue, };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getBoundingBoxAroundShapeIJK } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nfunction _getSphereBoundsInfo(circlePoints, imageData, directionVectors) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    const { boundsIJK, topLeftWorld, bottomRightWorld } = _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n        topLeftWorld: topLeftWorld,\n        bottomRightWorld: bottomRightWorld,\n    };\n}\nfunction getSphereBoundsInfo(circlePoints, imageData) {\n    const direction = imageData.getDirection();\n    const rowCosine = vec3.fromValues(direction[0], direction[1], direction[2]);\n    const columnCosine = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const scanAxis = vec3.fromValues(direction[6], direction[7], direction[8]);\n    const viewPlaneNormal = vec3.negate(vec3.create(), scanAxis);\n    const directionVectors = {\n        row: rowCosine,\n        column: columnCosine,\n        normal: viewPlaneNormal,\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction getSphereBoundsInfoFromViewport(circlePoints, imageData, viewport) {\n    if (!viewport) {\n        throw new Error('viewport is required in order to calculate the sphere bounds');\n    }\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const directionVectors = {\n        row: viewRight,\n        normal: viewPlaneNormal,\n        column: vec3.negate(vec3.create(), viewUp),\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld) {\n    const dimensions = imageData.getDimensions();\n    const { row: rowCosine, column: columnCosine, normal: vecNormal, } = directionVectors;\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, centerWorld, vecNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, centerWorld, vecNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, columnCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, columnCosine, radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, rowCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, rowCosine, radiusWorld);\n    const topLeftIJK = transformWorldToIndex(imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(imageData, bottomRightWorld);\n    const pointsIJK = circlePoints.map((p) => transformWorldToIndex(imageData, p));\n    const boundsIJK = getBoundingBoxAroundShapeIJK([topLeftIJK, bottomRightIJK, ...pointsIJK], dimensions);\n    return { boundsIJK, topLeftWorld, bottomRightWorld };\n}\nexport { getSphereBoundsInfo, getSphereBoundsInfoFromViewport };\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nexport default function getToolsWithModesForElement(element, modesFilter) {\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngineId, viewportId } = enabledElement;\n    const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n    if (!toolGroup) {\n        return [];\n    }\n    const enabledTools = [];\n    const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n    for (let j = 0; j < toolGroupToolNames.length; j++) {\n        const toolName = toolGroupToolNames[j];\n        const toolOptions = toolGroup.toolOptions[toolName];\n        if (!toolOptions) {\n            continue;\n        }\n        if (modesFilter.includes(toolOptions.mode)) {\n            const toolInstance = toolGroup.getToolInstance(toolName);\n            enabledTools.push(toolInstance);\n        }\n    }\n    return enabledTools;\n}\n","export class Calculator {\n}\nexport class InstanceCalculator {\n    constructor(options) {\n        this.storePointData = options.storePointData;\n    }\n    getStatistics() {\n        console.debug('InstanceCalculator getStatistics called');\n    }\n}\n","export default function pointInEllipse(ellipse, pointLPS, inverts = {}) {\n    if (!inverts.precalculated) {\n        precalculatePointInEllipse(ellipse, inverts);\n    }\n    return inverts.precalculated(pointLPS);\n}\nconst precalculatePointInEllipse = (ellipse, inverts = {}) => {\n    const { xRadius, yRadius, zRadius } = ellipse;\n    if (inverts.invXRadiusSq === undefined ||\n        inverts.invYRadiusSq === undefined ||\n        inverts.invZRadiusSq === undefined) {\n        inverts.invXRadiusSq = xRadius !== 0 ? 1 / xRadius ** 2 : 0;\n        inverts.invYRadiusSq = yRadius !== 0 ? 1 / yRadius ** 2 : 0;\n        inverts.invZRadiusSq = zRadius !== 0 ? 1 / zRadius ** 2 : 0;\n    }\n    const { invXRadiusSq, invYRadiusSq, invZRadiusSq } = inverts;\n    const { center } = ellipse;\n    const [centerL, centerP, centerS] = center;\n    inverts.precalculated = (pointLPS) => {\n        const dx = pointLPS[0] - centerL;\n        let inside = dx * dx * invXRadiusSq;\n        if (inside > 1) {\n            return false;\n        }\n        const dy = pointLPS[1] - centerP;\n        inside += dy * dy * invYRadiusSq;\n        if (inside > 1) {\n            return false;\n        }\n        const dz = pointLPS[2] - centerS;\n        inside += dz * dz * invZRadiusSq;\n        return inside <= 1;\n    };\n    return inverts;\n};\nexport { precalculatePointInEllipse };\n","import distanceToPointSquaredInfo from './distanceToPointSquaredInfo';\nexport default function distanceToPointSquared(lineStart, lineEnd, point) {\n    return distanceToPointSquaredInfo(lineStart, lineEnd, point).distanceSquared;\n}\n","import { distanceToPointSquared } from '../point';\nexport default function distanceToPointSquaredInfo(lineStart, lineEnd, point) {\n    let closestPoint;\n    const distanceSquared = distanceToPointSquared(lineStart, lineEnd);\n    if (lineStart[0] === lineEnd[0] && lineStart[1] === lineEnd[1]) {\n        closestPoint = lineStart;\n    }\n    if (!closestPoint) {\n        const dotProduct = ((point[0] - lineStart[0]) * (lineEnd[0] - lineStart[0]) +\n            (point[1] - lineStart[1]) * (lineEnd[1] - lineStart[1])) /\n            distanceSquared;\n        if (dotProduct < 0) {\n            closestPoint = lineStart;\n        }\n        else if (dotProduct > 1) {\n            closestPoint = lineEnd;\n        }\n        else {\n            closestPoint = [\n                lineStart[0] + dotProduct * (lineEnd[0] - lineStart[0]),\n                lineStart[1] + dotProduct * (lineEnd[1] - lineStart[1]),\n            ];\n        }\n    }\n    return {\n        point: [...closestPoint],\n        distanceSquared: distanceToPointSquared(point, closestPoint),\n    };\n}\n","const ORIENTATION_TOLERANCE = 1e-2;\nexport default function isPointOnLineSegment(lineStart, lineEnd, point) {\n    const minX = lineStart[0] <= lineEnd[0] ? lineStart[0] : lineEnd[0];\n    const maxX = lineStart[0] >= lineEnd[0] ? lineStart[0] : lineEnd[0];\n    const minY = lineStart[1] <= lineEnd[1] ? lineStart[1] : lineEnd[1];\n    const maxY = lineStart[1] >= lineEnd[1] ? lineStart[1] : lineEnd[1];\n    const aabbContainsPoint = point[0] >= minX - ORIENTATION_TOLERANCE &&\n        point[0] <= maxX + ORIENTATION_TOLERANCE &&\n        point[1] >= minY - ORIENTATION_TOLERANCE &&\n        point[1] <= maxY + ORIENTATION_TOLERANCE;\n    if (!aabbContainsPoint) {\n        return false;\n    }\n    const orientation = (lineEnd[1] - lineStart[1]) * (point[0] - lineEnd[0]) -\n        (lineEnd[0] - lineStart[0]) * (point[1] - lineEnd[1]);\n    const absOrientation = orientation >= 0 ? orientation : -orientation;\n    return absOrientation <= ORIENTATION_TOLERANCE;\n}\n","export default function distanceToPointSquared(p1, p2) {\n    if (p1.length !== p2.length) {\n        throw Error('Both points should have the same dimensionality');\n    }\n    const [x1, y1, z1 = 0] = p1;\n    const [x2, y2, z2 = 0] = p2;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const dz = z2 - z1;\n    return dx * dx + dy * dy + dz * dz;\n}\n","import distanceToPointSquared from './distanceToPointSquared';\nexport default function distanceToPoint(p1, p2) {\n    return Math.sqrt(distanceToPointSquared(p1, p2));\n}\n","export default function mirror(mirrorPoint, staticPoint) {\n    const [x1, y1] = mirrorPoint;\n    const [x2, y2] = staticPoint;\n    const newX = 2 * x2 - x1;\n    const newY = 2 * y2 - y1;\n    return [newX, newY];\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { vec2, vec3 } from 'gl-matrix';\nconst addCanvasPointsToArray = (element, canvasPoints, newCanvasPoint, commonData) => {\n    const { xDir, yDir, spacing } = commonData;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    if (!canvasPoints.length) {\n        canvasPoints.push(newCanvasPoint);\n        console.log('>>>>> !canvasPoints. :: RETURN');\n        return 1;\n    }\n    const lastWorldPos = viewport.canvasToWorld(canvasPoints[canvasPoints.length - 1]);\n    const newWorldPos = viewport.canvasToWorld(newCanvasPoint);\n    const worldPosDiff = vec3.create();\n    vec3.subtract(worldPosDiff, newWorldPos, lastWorldPos);\n    const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n    const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n    const numPointsToAdd = Math.max(Math.floor(xDist / spacing[0]), Math.floor(yDist / spacing[0]));\n    if (numPointsToAdd > 1) {\n        const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];\n        const canvasDist = vec2.dist(lastCanvasPoint, newCanvasPoint);\n        const canvasDir = vec2.create();\n        vec2.subtract(canvasDir, newCanvasPoint, lastCanvasPoint);\n        vec2.set(canvasDir, canvasDir[0] / canvasDist, canvasDir[1] / canvasDist);\n        const distPerPoint = canvasDist / numPointsToAdd;\n        for (let i = 1; i <= numPointsToAdd; i++) {\n            canvasPoints.push([\n                lastCanvasPoint[0] + distPerPoint * canvasDir[0] * i,\n                lastCanvasPoint[1] + distPerPoint * canvasDir[1] * i,\n            ]);\n        }\n    }\n    else {\n        canvasPoints.push(newCanvasPoint);\n    }\n    return numPointsToAdd;\n};\nexport default addCanvasPointsToArray;\n","export default function areLineSegmentsIntersecting(p1, q1, p2, q2) {\n    let result = false;\n    const line1MinX = p1[0] < q1[0] ? p1[0] : q1[0];\n    const line1MinY = p1[1] < q1[1] ? p1[1] : q1[1];\n    const line1MaxX = p1[0] > q1[0] ? p1[0] : q1[0];\n    const line1MaxY = p1[1] > q1[1] ? p1[1] : q1[1];\n    const line2MinX = p2[0] < q2[0] ? p2[0] : q2[0];\n    const line2MinY = p2[1] < q2[1] ? p2[1] : q2[1];\n    const line2MaxX = p2[0] > q2[0] ? p2[0] : q2[0];\n    const line2MaxY = p2[1] > q2[1] ? p2[1] : q2[1];\n    if (line1MinX > line2MaxX ||\n        line1MaxX < line2MinX ||\n        line1MinY > line2MaxY ||\n        line1MaxY < line2MinY) {\n        return false;\n    }\n    const orient = [\n        orientation(p1, q1, p2),\n        orientation(p1, q1, q2),\n        orientation(p2, q2, p1),\n        orientation(p2, q2, q1),\n    ];\n    if (orient[0] !== orient[1] && orient[2] !== orient[3]) {\n        return true;\n    }\n    if (orient[0] === 0 && onSegment(p1, p2, q1)) {\n        result = true;\n    }\n    else if (orient[1] === 0 && onSegment(p1, q2, q1)) {\n        result = true;\n    }\n    else if (orient[2] === 0 && onSegment(p2, p1, q2)) {\n        result = true;\n    }\n    else if (orient[3] === 0 && onSegment(p2, q1, q2)) {\n        result = true;\n    }\n    return result;\n}\nfunction orientation(p, q, r) {\n    const orientationValue = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n    if (orientationValue === 0) {\n        return 0;\n    }\n    return orientationValue > 0 ? 1 : 2;\n}\nfunction onSegment(p, q, r) {\n    if (q[0] <= Math.max(p[0], r[0]) &&\n        q[0] >= Math.min(p[0], r[0]) &&\n        q[1] <= Math.max(p[1], r[1]) &&\n        q[1] >= Math.min(p[1], r[1])) {\n        return true;\n    }\n    return false;\n}\n","import * as mathPoint from '../point';\nimport getLineSegmentIntersectionsIndexes from './getLineSegmentIntersectionsIndexes';\nimport containsPoint from './containsPoint';\nimport getNormal2 from './getNormal2';\nimport { glMatrix, vec3 } from 'gl-matrix';\nimport getLinesIntersection from './getLinesIntersection';\nvar PolylinePointType;\n(function (PolylinePointType) {\n    PolylinePointType[PolylinePointType[\"Vertex\"] = 0] = \"Vertex\";\n    PolylinePointType[PolylinePointType[\"Intersection\"] = 1] = \"Intersection\";\n})(PolylinePointType || (PolylinePointType = {}));\nvar PolylinePointPosition;\n(function (PolylinePointPosition) {\n    PolylinePointPosition[PolylinePointPosition[\"Outside\"] = -1] = \"Outside\";\n    PolylinePointPosition[PolylinePointPosition[\"Edge\"] = 0] = \"Edge\";\n    PolylinePointPosition[PolylinePointPosition[\"Inside\"] = 1] = \"Inside\";\n})(PolylinePointPosition || (PolylinePointPosition = {}));\nvar PolylinePointDirection;\n(function (PolylinePointDirection) {\n    PolylinePointDirection[PolylinePointDirection[\"Exiting\"] = -1] = \"Exiting\";\n    PolylinePointDirection[PolylinePointDirection[\"Unknown\"] = 0] = \"Unknown\";\n    PolylinePointDirection[PolylinePointDirection[\"Entering\"] = 1] = \"Entering\";\n})(PolylinePointDirection || (PolylinePointDirection = {}));\nfunction ensuresNextPointers(polylinePoints) {\n    for (let i = 0, len = polylinePoints.length; i < len; i++) {\n        const currentPoint = polylinePoints[i];\n        if (!currentPoint.next) {\n            currentPoint.next = polylinePoints[i === len - 1 ? 0 : i + 1];\n        }\n    }\n}\nfunction getSourceAndTargetPointsList(targetPolyline, sourcePolyline) {\n    const targetPolylinePoints = [];\n    const sourcePolylinePoints = [];\n    const sourceIntersectionsCache = new Map();\n    const isFirstPointInside = containsPoint(sourcePolyline, targetPolyline[0]);\n    let intersectionPointDirection = isFirstPointInside\n        ? PolylinePointDirection.Exiting\n        : PolylinePointDirection.Entering;\n    for (let i = 0, len = targetPolyline.length; i < len; i++) {\n        const p1 = targetPolyline[i];\n        const pointInside = containsPoint(sourcePolyline, p1);\n        const vertexPoint = {\n            type: PolylinePointType.Vertex,\n            coordinates: p1,\n            position: pointInside\n                ? PolylinePointPosition.Inside\n                : PolylinePointPosition.Outside,\n            visited: false,\n            next: null,\n        };\n        targetPolylinePoints.push(vertexPoint);\n        const q1 = targetPolyline[i === len - 1 ? 0 : i + 1];\n        const intersectionsInfo = getLineSegmentIntersectionsIndexes(sourcePolyline, p1, q1).map((intersectedLineSegment) => {\n            const sourceLineSegmentId = intersectedLineSegment[0];\n            const p2 = sourcePolyline[intersectedLineSegment[0]];\n            const q2 = sourcePolyline[intersectedLineSegment[1]];\n            const intersectionCoordinate = getLinesIntersection(p1, q1, p2, q2);\n            const targetStartPointDistSquared = mathPoint.distanceToPointSquared(p1, intersectionCoordinate);\n            return {\n                sourceLineSegmentId,\n                coordinate: intersectionCoordinate,\n                targetStartPointDistSquared,\n            };\n        });\n        intersectionsInfo.sort((left, right) => left.targetStartPointDistSquared - right.targetStartPointDistSquared);\n        intersectionsInfo.forEach((intersectionInfo) => {\n            const { sourceLineSegmentId, coordinate: intersectionCoordinate } = intersectionInfo;\n            const targetEdgePoint = {\n                type: PolylinePointType.Intersection,\n                coordinates: intersectionCoordinate,\n                position: PolylinePointPosition.Edge,\n                direction: intersectionPointDirection,\n                visited: false,\n                next: null,\n            };\n            const sourceEdgePoint = {\n                ...targetEdgePoint,\n                direction: PolylinePointDirection.Unknown,\n                cloned: true,\n            };\n            if (intersectionPointDirection === PolylinePointDirection.Entering) {\n                targetEdgePoint.next = sourceEdgePoint;\n            }\n            else {\n                sourceEdgePoint.next = targetEdgePoint;\n            }\n            let sourceIntersectionPoints = sourceIntersectionsCache.get(sourceLineSegmentId);\n            if (!sourceIntersectionPoints) {\n                sourceIntersectionPoints = [];\n                sourceIntersectionsCache.set(sourceLineSegmentId, sourceIntersectionPoints);\n            }\n            targetPolylinePoints.push(targetEdgePoint);\n            sourceIntersectionPoints.push(sourceEdgePoint);\n            intersectionPointDirection *= -1;\n        });\n    }\n    for (let i = 0, len = sourcePolyline.length; i < len; i++) {\n        const lineSegmentId = i;\n        const p1 = sourcePolyline[i];\n        const vertexPoint = {\n            type: PolylinePointType.Vertex,\n            coordinates: p1,\n            visited: false,\n            next: null,\n        };\n        sourcePolylinePoints.push(vertexPoint);\n        const sourceIntersectionPoints = sourceIntersectionsCache.get(lineSegmentId);\n        if (!sourceIntersectionPoints?.length) {\n            continue;\n        }\n        sourceIntersectionPoints\n            .map((intersectionPoint) => ({\n            intersectionPoint,\n            lineSegStartDistSquared: mathPoint.distanceToPointSquared(p1, intersectionPoint.coordinates),\n        }))\n            .sort((left, right) => left.lineSegStartDistSquared - right.lineSegStartDistSquared)\n            .map(({ intersectionPoint }) => intersectionPoint)\n            .forEach((intersectionPoint) => sourcePolylinePoints.push(intersectionPoint));\n    }\n    ensuresNextPointers(targetPolylinePoints);\n    ensuresNextPointers(sourcePolylinePoints);\n    return { targetPolylinePoints, sourcePolylinePoints };\n}\nfunction getUnvisitedOutsidePoint(polylinePoints) {\n    for (let i = 0, len = polylinePoints.length; i < len; i++) {\n        const point = polylinePoints[i];\n        if (!point.visited && point.position === PolylinePointPosition.Outside) {\n            return point;\n        }\n    }\n}\nfunction mergePolylines(targetPolyline, sourcePolyline) {\n    const targetNormal = getNormal2(targetPolyline);\n    const sourceNormal = getNormal2(sourcePolyline);\n    const dotNormals = vec3.dot(sourceNormal, targetNormal);\n    if (!glMatrix.equals(1, dotNormals)) {\n        sourcePolyline = sourcePolyline.slice().reverse();\n    }\n    const { targetPolylinePoints } = getSourceAndTargetPointsList(targetPolyline, sourcePolyline);\n    const startPoint = getUnvisitedOutsidePoint(targetPolylinePoints);\n    if (!startPoint) {\n        return targetPolyline.slice();\n    }\n    const mergedPolyline = [startPoint.coordinates];\n    let currentPoint = startPoint.next;\n    while (currentPoint !== startPoint) {\n        if (currentPoint.type === PolylinePointType.Intersection &&\n            currentPoint.cloned) {\n            currentPoint = currentPoint.next;\n            continue;\n        }\n        mergedPolyline.push(currentPoint.coordinates);\n        currentPoint = currentPoint.next;\n    }\n    return mergedPolyline;\n}\nfunction subtractPolylines(targetPolyline, sourcePolyline) {\n    const targetNormal = getNormal2(targetPolyline);\n    const sourceNormal = getNormal2(sourcePolyline);\n    const dotNormals = vec3.dot(sourceNormal, targetNormal);\n    if (!glMatrix.equals(-1, dotNormals)) {\n        sourcePolyline = sourcePolyline.slice().reverse();\n    }\n    const { targetPolylinePoints } = getSourceAndTargetPointsList(targetPolyline, sourcePolyline);\n    let startPoint = null;\n    const subtractedPolylines = [];\n    while ((startPoint = getUnvisitedOutsidePoint(targetPolylinePoints))) {\n        const subtractedPolyline = [startPoint.coordinates];\n        let currentPoint = startPoint.next;\n        startPoint.visited = true;\n        while (currentPoint !== startPoint) {\n            currentPoint.visited = true;\n            if (currentPoint.type === PolylinePointType.Intersection &&\n                currentPoint.cloned) {\n                currentPoint = currentPoint.next;\n                continue;\n            }\n            subtractedPolyline.push(currentPoint.coordinates);\n            currentPoint = currentPoint.next;\n        }\n        subtractedPolylines.push(subtractedPolyline);\n    }\n    return subtractedPolylines;\n}\nexport { mergePolylines, subtractPolylines };\n","import isClosed from './isClosed';\nexport default function containsPoint(polyline, point, options = {\n    closed: undefined,\n}) {\n    if (polyline.length < 3) {\n        return false;\n    }\n    const numPolylinePoints = polyline.length;\n    let numIntersections = 0;\n    const { closed, holes } = options;\n    if (holes?.length) {\n        for (const hole of holes) {\n            if (containsPoint(hole, point)) {\n                return false;\n            }\n        }\n    }\n    const shouldClose = !(closed === undefined ? isClosed(polyline) : closed);\n    const maxSegmentIndex = polyline.length - (shouldClose ? 1 : 2);\n    for (let i = 0; i <= maxSegmentIndex; i++) {\n        const p1 = polyline[i];\n        const p2Index = i === numPolylinePoints - 1 ? 0 : i + 1;\n        const p2 = polyline[p2Index];\n        const maxX = p1[0] >= p2[0] ? p1[0] : p2[0];\n        const maxY = p1[1] >= p2[1] ? p1[1] : p2[1];\n        const minY = p1[1] <= p2[1] ? p1[1] : p2[1];\n        const mayIntersectLineSegment = point[0] <= maxX && point[1] >= minY && point[1] < maxY;\n        if (mayIntersectLineSegment) {\n            const isVerticalLine = p1[0] === p2[0];\n            let intersects = isVerticalLine;\n            if (!intersects) {\n                const xIntersection = ((point[1] - p1[1]) * (p2[0] - p1[0])) / (p2[1] - p1[1]) + p1[0];\n                intersects = point[0] <= xIntersection;\n            }\n            numIntersections += intersects ? 1 : 0;\n        }\n    }\n    return !!(numIntersections % 2);\n}\n","import containsPoint from './containsPoint';\nexport default function containsPoints(polyline, points) {\n    for (let i = 0, numPoint = points.length; i < numPoint; i++) {\n        if (!containsPoint(polyline, points[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n","import * as mathLine from '../line';\nconst DEFAULT_EPSILON = 0.1;\nexport default function decimate(polyline, epsilon = DEFAULT_EPSILON) {\n    const numPoints = polyline.length;\n    if (numPoints < 3) {\n        return polyline;\n    }\n    const epsilonSquared = epsilon * epsilon;\n    const partitionQueue = [[0, numPoints - 1]];\n    const polylinePointFlags = new Array(numPoints).fill(false);\n    let numDecimatedPoints = 2;\n    polylinePointFlags[0] = true;\n    polylinePointFlags[numPoints - 1] = true;\n    while (partitionQueue.length) {\n        const [startIndex, endIndex] = partitionQueue.pop();\n        if (endIndex - startIndex === 1) {\n            continue;\n        }\n        const startPoint = polyline[startIndex];\n        const endPoint = polyline[endIndex];\n        let maxDistSquared = -Infinity;\n        let maxDistIndex = -1;\n        for (let i = startIndex + 1; i < endIndex; i++) {\n            const currentPoint = polyline[i];\n            const distSquared = mathLine.distanceToPointSquared(startPoint, endPoint, currentPoint);\n            if (distSquared > maxDistSquared) {\n                maxDistSquared = distSquared;\n                maxDistIndex = i;\n            }\n        }\n        if (maxDistSquared < epsilonSquared) {\n            continue;\n        }\n        polylinePointFlags[maxDistIndex] = true;\n        numDecimatedPoints++;\n        partitionQueue.push([maxDistIndex, endIndex]);\n        partitionQueue.push([startIndex, maxDistIndex]);\n    }\n    const decimatedPolyline = new Array(numDecimatedPoints);\n    for (let srcIndex = 0, dstIndex = 0; srcIndex < numPoints; srcIndex++) {\n        if (polylinePointFlags[srcIndex]) {\n            decimatedPolyline[dstIndex++] = polyline[srcIndex];\n        }\n    }\n    return decimatedPolyline;\n}\n","export default function getAABB(polyline, options) {\n    let polylineToUse = polyline;\n    const numDimensions = options?.numDimensions || 2;\n    const is3D = numDimensions === 3;\n    if (!Array.isArray(polyline[0])) {\n        const currentPolyline = polyline;\n        const totalPoints = currentPolyline.length / numDimensions;\n        polylineToUse = new Array(currentPolyline.length / numDimensions);\n        for (let i = 0, len = totalPoints; i < len; i++) {\n            polylineToUse[i] = [\n                currentPolyline[i * numDimensions],\n                currentPolyline[i * numDimensions + 1],\n            ];\n            if (is3D) {\n                polylineToUse[i].push(currentPolyline[i * numDimensions + 2]);\n            }\n        }\n    }\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    let minZ = Infinity;\n    let maxZ = -Infinity;\n    polylineToUse = polylineToUse;\n    for (let i = 0, len = polylineToUse.length; i < len; i++) {\n        const [x, y, z] = polylineToUse[i];\n        minX = minX < x ? minX : x;\n        minY = minY < y ? minY : y;\n        maxX = maxX > x ? maxX : x;\n        maxY = maxY > y ? maxY : y;\n        if (is3D) {\n            minZ = minZ < z ? minZ : z;\n            maxZ = maxZ > z ? maxZ : z;\n        }\n    }\n    return is3D\n        ? { minX, maxX, minY, maxY, minZ, maxZ }\n        : { minX, maxX, minY, maxY };\n}\n","export default function getArea(points) {\n    const n = points.length;\n    let area = 0.0;\n    let j = n - 1;\n    for (let i = 0; i < n; i++) {\n        area += (points[j][0] + points[i][0]) * (points[j][1] - points[i][1]);\n        j = i;\n    }\n    return Math.abs(area / 2.0);\n}\n","import { vec2 } from 'gl-matrix';\nimport areLineSegmentsIntersecting from './areLineSegmentsIntersecting';\nexport default function getClosestLineSegmentIntersection(points, p1, q1, closed = true) {\n    let initialQ2Index;\n    let p2Index;\n    if (closed) {\n        p2Index = points.length - 1;\n        initialQ2Index = 0;\n    }\n    else {\n        p2Index = 0;\n        initialQ2Index = 1;\n    }\n    const intersections = [];\n    for (let q2Index = initialQ2Index; q2Index < points.length; q2Index++) {\n        const p2 = points[p2Index];\n        const q2 = points[q2Index];\n        if (areLineSegmentsIntersecting(p1, q1, p2, q2)) {\n            intersections.push([p2Index, q2Index]);\n        }\n        p2Index = q2Index;\n    }\n    if (intersections.length === 0) {\n        return;\n    }\n    const distances = [];\n    intersections.forEach((intersection) => {\n        const intersectionPoints = [\n            points[intersection[0]],\n            points[intersection[1]],\n        ];\n        const midpoint = [\n            (intersectionPoints[0][0] + intersectionPoints[1][0]) / 2,\n            (intersectionPoints[0][1] + intersectionPoints[1][1]) / 2,\n        ];\n        distances.push(vec2.distance(midpoint, p1));\n    });\n    const minDistance = Math.min(...distances);\n    const indexOfMinDistance = distances.indexOf(minDistance);\n    return {\n        segment: intersections[indexOfMinDistance],\n        distance: minDistance,\n    };\n}\n","import areLineSegmentsIntersecting from './areLineSegmentsIntersecting';\nexport default function getFirstLineSegmentIntersectionIndexes(points, p1, q1, closed = true) {\n    let initialI;\n    let j;\n    if (closed) {\n        j = points.length - 1;\n        initialI = 0;\n    }\n    else {\n        j = 0;\n        initialI = 1;\n    }\n    for (let i = initialI; i < points.length; i++) {\n        const p2 = points[j];\n        const q2 = points[i];\n        if (areLineSegmentsIntersecting(p1, q1, p2, q2)) {\n            return [j, i];\n        }\n        j = i;\n    }\n}\n","import getLineSegmentIntersectionsIndexes from './getLineSegmentIntersectionsIndexes';\nimport getLinesIntersection from './getLinesIntersection';\nexport default function getLineSegmentIntersectionsCoordinates(points, p1, q1, closed = true) {\n    const result = [];\n    const polylineIndexes = getLineSegmentIntersectionsIndexes(points, p1, q1, closed);\n    for (let i = 0; i < polylineIndexes.length; i++) {\n        const p2 = points[polylineIndexes[i][0]];\n        const q2 = points[polylineIndexes[i][1]];\n        const intersection = getLinesIntersection(p1, q1, p2, q2);\n        result.push(intersection);\n    }\n    return result;\n}\n","import areLineSegmentsIntersecting from './areLineSegmentsIntersecting';\nexport default function getLineSegmentIntersectionsIndexes(polyline, p1, q1, closed = true) {\n    const intersections = [];\n    const numPoints = polyline.length;\n    const maxI = numPoints - (closed ? 1 : 2);\n    for (let i = 0; i <= maxI; i++) {\n        const p2 = polyline[i];\n        const j = i === numPoints - 1 ? 0 : i + 1;\n        const q2 = polyline[j];\n        if (areLineSegmentsIntersecting(p1, q1, p2, q2)) {\n            intersections.push([i, j]);\n        }\n    }\n    return intersections;\n}\n","import * as mathLine from '../line';\nconst PARALLEL_LINES_TOLERANCE = 1e-2;\nexport default function getLinesIntersection(p1, q1, p2, q2) {\n    const diffQ1P1 = [q1[0] - p1[0], q1[1] - p1[1]];\n    const diffQ2P2 = [q2[0] - p2[0], q2[1] - p2[1]];\n    const denominator = diffQ2P2[1] * diffQ1P1[0] - diffQ2P2[0] * diffQ1P1[1];\n    const absDenominator = denominator >= 0 ? denominator : -denominator;\n    if (absDenominator < PARALLEL_LINES_TOLERANCE) {\n        const line1AABB = [\n            p1[0] < q1[0] ? p1[0] : q1[0],\n            p1[0] > q1[0] ? p1[0] : q1[0],\n            p1[1] < q1[1] ? p1[1] : q1[1],\n            p1[1] > q1[1] ? p1[1] : q1[1],\n        ];\n        const line2AABB = [\n            p2[0] < q2[0] ? p2[0] : q2[0],\n            p2[0] > q2[0] ? p2[0] : q2[0],\n            p2[1] < q2[1] ? p2[1] : q2[1],\n            p2[1] > q2[1] ? p2[1] : q2[1],\n        ];\n        const aabbIntersects = line1AABB[0] <= line2AABB[1] &&\n            line1AABB[1] >= line2AABB[0] &&\n            line1AABB[2] <= line2AABB[3] &&\n            line1AABB[3] >= line2AABB[2];\n        if (!aabbIntersects) {\n            return;\n        }\n        const overlap = mathLine.isPointOnLineSegment(p1, q1, p2) ||\n            mathLine.isPointOnLineSegment(p1, q1, q2) ||\n            mathLine.isPointOnLineSegment(p2, q2, p1);\n        if (!overlap) {\n            return;\n        }\n        const minX = line1AABB[0] > line2AABB[0] ? line1AABB[0] : line2AABB[0];\n        const maxX = line1AABB[1] < line2AABB[1] ? line1AABB[1] : line2AABB[1];\n        const minY = line1AABB[2] > line2AABB[2] ? line1AABB[2] : line2AABB[2];\n        const maxY = line1AABB[3] < line2AABB[3] ? line1AABB[3] : line2AABB[3];\n        const midX = (minX + maxX) * 0.5;\n        const midY = (minY + maxY) * 0.5;\n        return [midX, midY];\n    }\n    let a = p1[1] - p2[1];\n    let b = p1[0] - p2[0];\n    const numerator1 = diffQ2P2[0] * a - diffQ2P2[1] * b;\n    const numerator2 = diffQ1P1[0] * a - diffQ1P1[1] * b;\n    a = numerator1 / denominator;\n    b = numerator2 / denominator;\n    const resultX = p1[0] + a * diffQ1P1[0];\n    const resultY = p1[1] + a * diffQ1P1[1];\n    return [resultX, resultY];\n}\n","import getSignedArea from './getSignedArea';\nexport default function getNormal2(polyline) {\n    const area = getSignedArea(polyline);\n    return [0, 0, area / Math.abs(area)];\n}\n","import { vec3 } from 'gl-matrix';\nfunction _getAreaVector(polyline) {\n    const vecArea = vec3.create();\n    const refPoint = polyline[0];\n    for (let i = 0, len = polyline.length; i < len; i++) {\n        const p1 = polyline[i];\n        const p2Index = i === len - 1 ? 0 : i + 1;\n        const p2 = polyline[p2Index];\n        const aX = p1[0] - refPoint[0];\n        const aY = p1[1] - refPoint[1];\n        const aZ = p1[2] - refPoint[2];\n        const bX = p2[0] - refPoint[0];\n        const bY = p2[1] - refPoint[1];\n        const bZ = p2[2] - refPoint[2];\n        vecArea[0] += aY * bZ - aZ * bY;\n        vecArea[1] += aZ * bX - aX * bZ;\n        vecArea[2] += aX * bY - aY * bX;\n    }\n    vec3.scale(vecArea, vecArea, 0.5);\n    return vecArea;\n}\nexport default function getNormal3(polyline) {\n    const vecArea = _getAreaVector(polyline);\n    return vec3.normalize(vecArea, vecArea);\n}\n","export default function getSignedArea(polyline) {\n    if (polyline.length < 3) {\n        return 0;\n    }\n    const refPoint = polyline[0];\n    let area = 0;\n    for (let i = 0, len = polyline.length; i < len; i++) {\n        const p1 = polyline[i];\n        const p2Index = i === len - 1 ? 0 : i + 1;\n        const p2 = polyline[p2Index];\n        const aX = p1[0] - refPoint[0];\n        const aY = p1[1] - refPoint[1];\n        const bX = p2[0] - refPoint[0];\n        const bY = p2[1] - refPoint[1];\n        area += aX * bY - aY * bX;\n    }\n    area *= 0.5;\n    return area;\n}\n","import { StackViewport } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst EPSILON = 1e-3;\nconst getSubPixelSpacingAndXYDirections = (viewport, subPixelResolution) => {\n    let spacing;\n    let xDir;\n    let yDir;\n    if (viewport instanceof StackViewport) {\n        const imageData = viewport.getImageData();\n        if (!imageData) {\n            return;\n        }\n        xDir = imageData.direction.slice(0, 3);\n        yDir = imageData.direction.slice(3, 6);\n        spacing = imageData.spacing;\n    }\n    else {\n        const imageData = viewport.getImageData();\n        const { direction, spacing: volumeSpacing } = imageData;\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        const iVector = direction.slice(0, 3);\n        const jVector = direction.slice(3, 6);\n        const kVector = direction.slice(6, 9);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const absViewRightDotI = Math.abs(vec3.dot(viewRight, iVector));\n        const absViewRightDotJ = Math.abs(vec3.dot(viewRight, jVector));\n        const absViewRightDotK = Math.abs(vec3.dot(viewRight, kVector));\n        let xSpacing;\n        if (Math.abs(1 - absViewRightDotI) < EPSILON) {\n            xSpacing = volumeSpacing[0];\n            xDir = iVector;\n        }\n        else if (Math.abs(1 - absViewRightDotJ) < EPSILON) {\n            xSpacing = volumeSpacing[1];\n            xDir = jVector;\n        }\n        else if (Math.abs(1 - absViewRightDotK) < EPSILON) {\n            xSpacing = volumeSpacing[2];\n            xDir = kVector;\n        }\n        else {\n            throw new Error('No support yet for oblique plane planar contours');\n        }\n        const absViewUpDotI = Math.abs(vec3.dot(viewUp, iVector));\n        const absViewUpDotJ = Math.abs(vec3.dot(viewUp, jVector));\n        const absViewUpDotK = Math.abs(vec3.dot(viewUp, kVector));\n        let ySpacing;\n        if (Math.abs(1 - absViewUpDotI) < EPSILON) {\n            ySpacing = volumeSpacing[0];\n            yDir = iVector;\n        }\n        else if (Math.abs(1 - absViewUpDotJ) < EPSILON) {\n            ySpacing = volumeSpacing[1];\n            yDir = jVector;\n        }\n        else if (Math.abs(1 - absViewUpDotK) < EPSILON) {\n            ySpacing = volumeSpacing[2];\n            yDir = kVector;\n        }\n        else {\n            throw new Error('No support yet for oblique plane planar contours');\n        }\n        spacing = [xSpacing, ySpacing];\n    }\n    const subPixelSpacing = [\n        spacing[0] / subPixelResolution,\n        spacing[1] / subPixelResolution,\n    ];\n    return { spacing: subPixelSpacing, xDir, yDir };\n};\nexport default getSubPixelSpacingAndXYDirections;\n","import getSignedArea from './getSignedArea';\nexport default function getWindingDirection(polyline) {\n    const signedArea = getSignedArea(polyline);\n    return signedArea >= 0 ? 1 : -1;\n}\n","import getFirstLineSegmentIntersectionIndexes from './getFirstLineSegmentIntersectionIndexes';\nexport default function intersectPolyline(sourcePolyline, targetPolyline) {\n    for (let i = 0, sourceLen = sourcePolyline.length; i < sourceLen; i++) {\n        const sourceP1 = sourcePolyline[i];\n        const sourceP2Index = i === sourceLen - 1 ? 0 : i + 1;\n        const sourceP2 = sourcePolyline[sourceP2Index];\n        const intersectionPointIndexes = getFirstLineSegmentIntersectionIndexes(targetPolyline, sourceP1, sourceP2);\n        if (intersectionPointIndexes?.length === 2) {\n            return true;\n        }\n    }\n    return false;\n}\n","import { glMatrix } from 'gl-matrix';\nimport { distanceToPointSquared } from '../point';\nexport default function isClosed(polyline) {\n    if (polyline.length < 3) {\n        return false;\n    }\n    const numPolylinePoints = polyline.length;\n    const firstPoint = polyline[0];\n    const lastPoint = polyline[numPolylinePoints - 1];\n    const distFirstToLastPoints = distanceToPointSquared(firstPoint, lastPoint);\n    return glMatrix.equals(0, distFirstToLastPoints);\n}\n","import containsPoint from './containsPoint';\nimport { projectTo2D } from './projectTo2D';\nexport function isPointInsidePolyline3D(point, polyline, options = {}) {\n    const { sharedDimensionIndex, projectedPolyline } = projectTo2D(polyline);\n    const { holes } = options;\n    const projectedHoles = [];\n    if (holes) {\n        for (let i = 0; i < holes.length; i++) {\n            const hole = holes[i];\n            const hole2D = [];\n            for (let j = 0; j < hole.length; j++) {\n                hole2D.push([\n                    hole[j][(sharedDimensionIndex + 1) % 3],\n                    hole[j][(sharedDimensionIndex + 2) % 3],\n                ]);\n            }\n            projectedHoles.push(hole2D);\n        }\n    }\n    const point2D = [\n        point[(sharedDimensionIndex + 1) % 3],\n        point[(sharedDimensionIndex + 2) % 3],\n    ];\n    return containsPoint(projectedPolyline, point2D, { holes: projectedHoles });\n}\n","import { vec2 } from 'gl-matrix';\nconst pointCanProjectOnLine = (p, p1, p2, proximity) => {\n    const p1p = [p[0] - p1[0], p[1] - p1[1]];\n    const p1p2 = [p2[0] - p1[0], p2[1] - p1[1]];\n    const dot = p1p[0] * p1p2[0] + p1p[1] * p1p2[1];\n    if (dot < 0) {\n        return false;\n    }\n    const p1p2Mag = Math.sqrt(p1p2[0] * p1p2[0] + p1p2[1] * p1p2[1]);\n    if (p1p2Mag === 0) {\n        return false;\n    }\n    const projectionVectorMag = dot / p1p2Mag;\n    const p1p2UnitVector = [p1p2[0] / p1p2Mag, p1p2[1] / p1p2Mag];\n    const projectionVector = [\n        p1p2UnitVector[0] * projectionVectorMag,\n        p1p2UnitVector[1] * projectionVectorMag,\n    ];\n    const projectionPoint = [\n        p1[0] + projectionVector[0],\n        p1[1] + projectionVector[1],\n    ];\n    const distance = vec2.distance(p, projectionPoint);\n    if (distance > proximity) {\n        return false;\n    }\n    if (vec2.distance(p1, projectionPoint) > vec2.distance(p1, p2)) {\n        return false;\n    }\n    return true;\n};\nexport default pointCanProjectOnLine;\n","import { vec2 } from 'gl-matrix';\nconst pointsAreWithinCloseContourProximity = (p1, p2, closeContourProximity) => {\n    return vec2.dist(p1, p2) < closeContourProximity;\n};\nexport default pointsAreWithinCloseContourProximity;\n","import { utilities } from '@cornerstonejs/core';\nconst epsilon = 1e-6;\nexport function projectTo2D(polyline) {\n    let sharedDimensionIndex;\n    const testPoints = utilities.getRandomSampleFromArray(polyline, 50);\n    for (let i = 0; i < 3; i++) {\n        if (testPoints.every((point, index, array) => Math.abs(point[i] - array[0][i]) < epsilon)) {\n            sharedDimensionIndex = i;\n            break;\n        }\n    }\n    if (sharedDimensionIndex === undefined) {\n        throw new Error('Cannot find a shared dimension index for polyline, probably oblique plane');\n    }\n    const points2D = [];\n    const firstDim = (sharedDimensionIndex + 1) % 3;\n    const secondDim = (sharedDimensionIndex + 2) % 3;\n    for (let i = 0; i < polyline.length; i++) {\n        points2D.push([polyline[i][firstDim], polyline[i][secondDim]]);\n    }\n    return {\n        sharedDimensionIndex,\n        projectedPolyline: points2D,\n    };\n}\n","import filterAnnotationsWithinSlice from './filterAnnotationsWithinSlice';\nimport getWorldWidthAndHeightFromCorners from './getWorldWidthAndHeightFromCorners';\nimport filterAnnotationsForDisplay from './filterAnnotationsForDisplay';\nimport getWorldWidthAndHeightFromTwoPoints from './getWorldWidthAndHeightFromTwoPoints';\nimport { getPointInLineOfSightWithCriteria, getPointsInLineOfSight, } from './getPointInLineOfSightWithCriteria';\nimport { isPlaneIntersectingAABB } from './isPlaneIntersectingAABB';\nimport { filterAnnotationsWithinSamePlane } from './filterAnnotationsWithinPlane';\nexport default {\n    filterAnnotationsWithinSlice,\n    getWorldWidthAndHeightFromCorners,\n    getWorldWidthAndHeightFromTwoPoints,\n    filterAnnotationsForDisplay,\n    getPointInLineOfSightWithCriteria,\n    isPlaneIntersectingAABB,\n    filterAnnotationsWithinSamePlane,\n    getPointsInLineOfSight,\n};\nexport { filterAnnotationsWithinSlice, getWorldWidthAndHeightFromCorners, getWorldWidthAndHeightFromTwoPoints, filterAnnotationsForDisplay, getPointInLineOfSightWithCriteria, isPlaneIntersectingAABB, filterAnnotationsWithinSamePlane, getPointsInLineOfSight, };\n","import { vec3 } from 'gl-matrix';\nimport { createIsInSegment, isLineInSegment } from './isLineInSegment';\nconst EPSILON = 1e-2;\nexport default function findLargestBidirectional(contours, segVolumeId, segment) {\n    const { sliceContours } = contours;\n    const { segmentIndex, containedSegmentIndices } = segment;\n    let maxBidirectional;\n    const isInSegment = createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices);\n    for (const sliceContour of sliceContours) {\n        const bidirectional = createBidirectionalForSlice(sliceContour, isInSegment, maxBidirectional);\n        if (!bidirectional) {\n            continue;\n        }\n        maxBidirectional = bidirectional;\n    }\n    if (maxBidirectional) {\n        Object.assign(maxBidirectional, segment);\n    }\n    return maxBidirectional;\n}\nexport function createBidirectionalForSlice(sliceContour, isInSegment, currentMax = { maxMajor: 0, maxMinor: 0 }) {\n    const { points } = sliceContour.polyData;\n    const { maxMinor: currentMaxMinor, maxMajor: currentMaxMajor } = currentMax;\n    let maxMajor = currentMaxMajor * currentMaxMajor;\n    let maxMinor = currentMaxMinor * currentMaxMinor;\n    let maxMajorPoints;\n    for (let index1 = 0; index1 < points.length; index1++) {\n        for (let index2 = index1 + 1; index2 < points.length; index2++) {\n            const point1 = points[index1];\n            const point2 = points[index2];\n            const distance2 = vec3.sqrDist(point1, point2);\n            if (distance2 < maxMajor) {\n                continue;\n            }\n            if (distance2 - EPSILON < maxMajor + EPSILON && maxMajorPoints) {\n                continue;\n            }\n            if (!isInSegment.testCenter(point1, point2)) {\n                continue;\n            }\n            if (!isLineInSegment(point1, point2, isInSegment)) {\n                continue;\n            }\n            maxMajor = distance2 - EPSILON;\n            maxMajorPoints = [index1, index2];\n            maxMinor = 0;\n        }\n    }\n    if (!maxMajorPoints) {\n        return;\n    }\n    maxMajor = Math.sqrt(maxMajor + EPSILON);\n    const handle0 = points[maxMajorPoints[0]];\n    const handle1 = points[maxMajorPoints[1]];\n    const unitMajor = vec3.sub(vec3.create(), handle0, handle1);\n    vec3.scale(unitMajor, unitMajor, 1 / maxMajor);\n    let maxMinorPoints;\n    for (let index1 = 0; index1 < points.length; index1++) {\n        for (let index2 = index1 + 1; index2 < points.length; index2++) {\n            const point1 = points[index1];\n            const point2 = points[index2];\n            const distance2 = vec3.sqrDist(point1, point2);\n            if (distance2 <= maxMinor) {\n                continue;\n            }\n            const delta = vec3.sub(vec3.create(), point1, point2);\n            const dot = Math.abs(vec3.dot(delta, unitMajor)) / Math.sqrt(distance2);\n            if (dot > EPSILON) {\n                continue;\n            }\n            if (!isInSegment.testCenter(point1, point2)) {\n                continue;\n            }\n            if (!isLineInSegment(point1, point2, isInSegment)) {\n                continue;\n            }\n            maxMinor = distance2;\n            maxMinorPoints = [index1, index2];\n        }\n    }\n    if (!maxMinorPoints) {\n        return;\n    }\n    maxMinor = Math.sqrt(maxMinor);\n    const handle2 = points[maxMinorPoints[0]];\n    const handle3 = points[maxMinorPoints[1]];\n    const bidirectional = {\n        majorAxis: [handle0, handle1],\n        minorAxis: [handle2, handle3],\n        maxMajor,\n        maxMinor,\n        ...sliceContour,\n    };\n    return bidirectional;\n}\n","import { cache } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nexport default function isLineInSegment(point1, point2, isInSegment) {\n    const ijk1 = isInSegment.toIJK(point1);\n    const ijk2 = isInSegment.toIJK(point2);\n    const testPoint = vec3.create();\n    const { testIJK } = isInSegment;\n    const delta = vec3.sub(vec3.create(), ijk1, ijk2);\n    const testSize = Math.round(Math.max(...delta.map(Math.abs)));\n    if (testSize < 2) {\n        return true;\n    }\n    const unitDelta = vec3.scale(vec3.create(), delta, 1 / testSize);\n    for (let i = 1; i < testSize; i++) {\n        vec3.scaleAndAdd(testPoint, ijk2, unitDelta, i);\n        if (!testIJK(testPoint)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction createIsInSegmentMetadata({ dimensions, imageData, voxelManager, segmentIndex, containedSegmentIndices, }) {\n    const width = dimensions[0];\n    const pixelsPerSlice = width * dimensions[1];\n    return {\n        testCenter: (point1, point2) => {\n            const point = vec3.add(vec3.create(), point1, point2).map((it) => it / 2);\n            const ijk = imageData.worldToIndex(point).map(Math.round);\n            const [i, j, k] = ijk;\n            const index = i + j * width + k * pixelsPerSlice;\n            const value = voxelManager.getAtIndex(index);\n            return value === segmentIndex || containedSegmentIndices?.has(value);\n        },\n        toIJK: (point) => imageData.worldToIndex(point),\n        testIJK: (ijk) => {\n            const [i, j, k] = ijk;\n            const index = Math.round(i) + Math.round(j) * width + Math.round(k) * pixelsPerSlice;\n            const value = voxelManager.getAtIndex(index);\n            return value === segmentIndex || containedSegmentIndices?.has(value);\n        },\n    };\n}\nfunction createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices) {\n    const vol = cache.getVolume(segVolumeId);\n    if (!vol) {\n        console.warn(`No volume found for ${segVolumeId}`);\n        return;\n    }\n    return createIsInSegmentMetadata({\n        dimensions: vol.dimensions,\n        imageData: vol.imageData,\n        voxelManager: vol.voxelManager,\n        segmentIndex,\n        containedSegmentIndices,\n    });\n}\nexport { createIsInSegment, createIsInSegmentMetadata, isLineInSegment };\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getToolGroup } from '../store/ToolGroupManager';\nexport function triggerAnnotationRenderForToolGroupIds(toolGroupIds) {\n    toolGroupIds.forEach((toolGroupId) => {\n        const toolGroup = getToolGroup(toolGroupId);\n        if (!toolGroup) {\n            console.warn(`ToolGroup not available for ${toolGroupId}`);\n            return;\n        }\n        const viewportsInfo = toolGroup.getViewportsInfo();\n        viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            if (!renderingEngine) {\n                console.warn(`RenderingEngine not available for ${renderingEngineId}`);\n                return;\n            }\n            const viewport = renderingEngine.getViewport(viewportId);\n            triggerAnnotationRender(viewport.element);\n        });\n    });\n}\nexport default triggerAnnotationRenderForToolGroupIds;\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nexport function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {\n    if (!viewportIdsToRender.length) {\n        return;\n    }\n    viewportIdsToRender.forEach((viewportId) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const { viewport } = enabledElement;\n        if (!viewport) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const element = viewport.element;\n        triggerAnnotationRender(element);\n    });\n}\nexport default triggerAnnotationRenderForViewportIds;\n","import { InstanceVolumetricCalculator } from './VolumetricCalculator';\nexport default class SegmentStatsCalculator {\n    static { this.calculators = new Map(); }\n    static { this.indices = []; }\n    static { this.mode = 'collective'; }\n    static statsInit(options) {\n        const { storePointData, indices, mode } = options;\n        this.mode = mode;\n        this.indices = indices;\n        this.calculators.clear();\n        if (this.mode === 'individual') {\n            indices.forEach((index) => {\n                this.calculators.set(index, new InstanceVolumetricCalculator({ storePointData }));\n            });\n        }\n        else {\n            this.calculators.set(indices, new InstanceVolumetricCalculator({ storePointData }));\n        }\n    }\n    static statsCallback(data) {\n        const { segmentIndex, ...statsData } = data;\n        if (!segmentIndex) {\n            throw new Error('Segment index is required for stats calculation');\n        }\n        const calculator = this.mode === 'individual'\n            ? this.calculators.get(segmentIndex)\n            : this.calculators.get(this.indices);\n        if (!calculator) {\n            throw new Error(`No calculator found for segment ${segmentIndex}`);\n        }\n        calculator.statsCallback(statsData);\n    }\n    static getStatistics(options) {\n        if (this.mode === 'individual') {\n            const result = {};\n            this.calculators.forEach((calculator, segmentIndex) => {\n                result[segmentIndex] = calculator.getStatistics(options);\n            });\n            return result;\n        }\n        const calculator = this.calculators.get(this.indices);\n        return calculator.getStatistics(options);\n    }\n}\n","import { triggerEvent, eventTarget, Enums, getRenderingEngines, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations, Events as csToolsEvents, } from '../../enums';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport surfaceDisplay from '../../tools/displayTools/Surface/surfaceDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport { addTool } from '../../store/addTool';\nimport { state } from '../../store/state';\nimport PlanarFreehandContourSegmentationTool from '../../tools/annotation/PlanarFreehandContourSegmentationTool';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst renderers = {\n    [Representations.Labelmap]: labelmapDisplay,\n    [Representations.Contour]: contourDisplay,\n    [Representations.Surface]: surfaceDisplay,\n};\nconst planarContourToolName = PlanarFreehandContourSegmentationTool.toolName;\nclass SegmentationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._getAllViewports = () => {\n            const renderingEngine = getRenderingEngines();\n            return renderingEngine.flatMap((renderingEngine) => renderingEngine.getViewports());\n        };\n        this._renderFlaggedSegmentations = () => {\n            this._throwIfDestroyed();\n            const viewportIds = Array.from(this._needsRender);\n            viewportIds.forEach((viewportId) => {\n                this._triggerRender(viewportId);\n            });\n            this._needsRender.clear();\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n        };\n    }\n    renderSegmentationsForViewport(viewportId) {\n        const viewportIds = viewportId\n            ? [viewportId]\n            : this._getViewportIdsForSegmentation();\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderSegmentation(segmentationId) {\n        const viewportIds = this._getViewportIdsForSegmentation(segmentationId);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    _getViewportIdsForSegmentation(segmentationId) {\n        const viewports = this._getAllViewports();\n        const viewportIds = [];\n        for (const viewport of viewports) {\n            const viewportId = viewport.id;\n            if (segmentationId) {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n            else {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n        }\n        return viewportIds;\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(viewportId) {\n        const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n        if (!segmentationRepresentations?.length) {\n            return;\n        }\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (!viewport) {\n            return;\n        }\n        const viewportRenderList = [];\n        const segmentationRenderList = segmentationRepresentations.map((representation) => {\n            if (representation.type === SegmentationRepresentations.Contour) {\n                this._addPlanarFreeHandToolIfAbsent(viewport);\n            }\n            const display = renderers[representation.type];\n            try {\n                const viewportId = display.render(viewport, representation);\n                viewportRenderList.push(viewportId);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return Promise.resolve({\n                segmentationId: representation.segmentationId,\n                type: representation.type,\n            });\n        });\n        Promise.allSettled(segmentationRenderList).then((results) => {\n            const segmentationDetails = results\n                .filter((r) => r.status === 'fulfilled')\n                .map((r) => r.value);\n            function onSegmentationRender(evt) {\n                const { element, viewportId } = evt.detail;\n                element.removeEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n                segmentationDetails.forEach((detail) => {\n                    const eventDetail = {\n                        viewportId,\n                        segmentationId: detail.segmentationId,\n                        type: detail.type,\n                    };\n                    triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n                        ...eventDetail,\n                    });\n                });\n            }\n            const element = viewport.element;\n            element.addEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n            viewport.render();\n        });\n    }\n    _addPlanarFreeHandToolIfAbsent(viewport) {\n        if (!(planarContourToolName in state.tools)) {\n            addTool(PlanarFreehandContourSegmentationTool);\n        }\n        const toolGroup = getToolGroupForViewport(viewport.id);\n        if (!toolGroup.hasTool(planarContourToolName)) {\n            toolGroup.addTool(planarContourToolName);\n            toolGroup.setToolPassive(planarContourToolName);\n        }\n    }\n}\nfunction triggerSegmentationRender(viewportId) {\n    segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);\n}\nfunction triggerSegmentationRenderBySegmentationId(segmentationId) {\n    segmentationRenderingEngine.renderSegmentation(segmentationId);\n}\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\nexport { triggerSegmentationRender, triggerSegmentationRenderBySegmentationId, segmentationRenderingEngine, };\n","import { quat, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { getSphereBoundsInfo } from '../../getSphereBoundsInfo';\nconst { transformWorldToIndex } = csUtils;\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst POSITIVE_SEED_VARIANCE = 0.1;\nconst NEGATIVE_SEED_VARIANCE = 0.8;\nfunction _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo) {\n    const { topLeftWorld, bottomRightWorld } = sphereBoundsInfo;\n    const topLeftIJK = transformWorldToIndex(referencedVolume.imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(referencedVolume.imageData, bottomRightWorld);\n    return {\n        ...sphereBoundsInfo,\n        topLeftIJK,\n        bottomRightIJK,\n    };\n}\nfunction _getSphereBoundsInfo(referencedVolume, sphereInfo) {\n    const direction = referencedVolume.imageData.getDirection();\n    const vecColumn = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const { center: sphereCenterPoint, radius: sphereRadius } = sphereInfo;\n    const refVolImageData = referencedVolume.imageData;\n    const topCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, -sphereRadius);\n    const bottomCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, sphereRadius);\n    const sphereBoundsInfo = getSphereBoundsInfo([bottomCirclePoint, topCirclePoint], refVolImageData);\n    return _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo);\n}\nfunction _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport) {\n    const refVolImageData = referencedVolume.imageData;\n    const camera = viewport.getCamera();\n    const { ijkVecRowDir, ijkVecColDir } = csUtils.getVolumeDirectionVectors(refVolImageData, camera);\n    const obliqueView = [ijkVecRowDir, ijkVecColDir].some((vec) => !csUtils.isEqual(Math.abs(vec[0]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[1]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[2]), 1));\n    if (obliqueView) {\n        console.warn('Oblique view is not supported!');\n        return;\n    }\n    const { boundsIJK: sphereBoundsIJK } = _getSphereBoundsInfo(referencedVolume, sphereInfo);\n    const subVolumeBoundsIJK = {\n        minX: sphereBoundsIJK[0][0],\n        maxX: sphereBoundsIJK[0][1] + 1,\n        minY: sphereBoundsIJK[1][0],\n        maxY: sphereBoundsIJK[1][1] + 1,\n        minZ: sphereBoundsIJK[2][0],\n        maxZ: sphereBoundsIJK[2][1] + 1,\n    };\n    return csUtils.createSubVolume(referencedVolume.volumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n}\nfunction _setPositiveSeedValues(referencedVolume, labelmap, sphereInfo, options) {\n    const refVolumePixelData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    const worldStartPos = sphereInfo.center;\n    const [width, height, numSlices] = referencedVolume.dimensions;\n    const numPixelsPerSlice = width * height;\n    const ijkStartPosition = transformWorldToIndex(referencedVolume.imageData, worldStartPos);\n    const referencePixelValue = refVolumePixelData[ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0]];\n    const positiveSeedValue = options.positiveSeedValue ?? POSITIVE_SEED_VALUE;\n    const positiveSeedVariance = options.positiveSeedVariance ?? POSITIVE_SEED_VARIANCE;\n    const positiveSeedVarianceValue = Math.abs(referencePixelValue * positiveSeedVariance);\n    const minPositivePixelValue = referencePixelValue - positiveSeedVarianceValue;\n    const maxPositivePixelValue = referencePixelValue + positiveSeedVarianceValue;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    const startVoxelIndex = ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0];\n    labelmap.voxelManager.setAtIndex(startVoxelIndex, positiveSeedValue);\n    const queue = [ijkStartPosition];\n    while (queue.length) {\n        const ijkVoxel = queue.shift();\n        const [x, y, z] = ijkVoxel;\n        for (let i = 0, len = neighborsCoordDelta.length; i < len; i++) {\n            const neighborCoordDelta = neighborsCoordDelta[i];\n            const nx = x + neighborCoordDelta[0];\n            const ny = y + neighborCoordDelta[1];\n            const nz = z + neighborCoordDelta[2];\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborVoxelIndex = nz * numPixelsPerSlice + ny * width + nx;\n            const neighborPixelValue = refVolumePixelData[neighborVoxelIndex];\n            const neighborLabelmapValue = labelmap.voxelManager.getAtIndex(neighborVoxelIndex);\n            if (neighborLabelmapValue === positiveSeedValue ||\n                neighborPixelValue < minPositivePixelValue ||\n                neighborPixelValue > maxPositivePixelValue) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(neighborVoxelIndex, positiveSeedValue);\n            queue.push([nx, ny, nz]);\n        }\n    }\n}\nfunction _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options) {\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [columns, rows, numSlices] = labelmap.dimensions;\n    const numPixelsPerSlice = columns * rows;\n    const { worldVecRowDir, worldVecSliceDir } = csUtils.getVolumeDirectionVectors(labelmap.imageData, viewport.getCamera());\n    const ijkSphereCenter = transformWorldToIndex(subVolume.imageData, sphereInfo.center);\n    const referencePixelValue = subVolPixelData[ijkSphereCenter[2] * columns * rows +\n        ijkSphereCenter[1] * columns +\n        ijkSphereCenter[0]];\n    const negativeSeedVariance = options.negativeSeedVariance ?? NEGATIVE_SEED_VARIANCE;\n    const negativeSeedValue = options?.negativeSeedValue ?? NEGATIVE_SEED_VALUE;\n    const negativeSeedVarianceValue = Math.abs(referencePixelValue * negativeSeedVariance);\n    const minNegativePixelValue = referencePixelValue - negativeSeedVarianceValue;\n    const maxNegativePixelValue = referencePixelValue + negativeSeedVarianceValue;\n    const numCirclePoints = 360;\n    const rotationAngle = (2 * Math.PI) / numCirclePoints;\n    const worldQuat = quat.setAxisAngle(quat.create(), worldVecSliceDir, rotationAngle);\n    const vecRotation = vec3.clone(worldVecRowDir);\n    for (let i = 0; i < numCirclePoints; i++) {\n        const worldCircleBorderPoint = vec3.scaleAndAdd(vec3.create(), sphereInfo.center, vecRotation, sphereInfo.radius);\n        const ijkCircleBorderPoint = transformWorldToIndex(labelmap.imageData, worldCircleBorderPoint);\n        const [x, y, z] = ijkCircleBorderPoint;\n        vec3.transformQuat(vecRotation, vecRotation, worldQuat);\n        if (x < 0 ||\n            x >= columns ||\n            y < 0 ||\n            y >= rows ||\n            z < 0 ||\n            z >= numSlices) {\n            continue;\n        }\n        const offset = x + y * columns + z * numPixelsPerSlice;\n        const pixelValue = subVolPixelData[offset];\n        if (pixelValue < minNegativePixelValue ||\n            pixelValue > maxNegativePixelValue) {\n            labelmap.voxelManager.setAtIndex(offset, negativeSeedValue);\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options) {\n    const labelmap = await volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, sphereInfo, options);\n    _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options);\n    return labelmap;\n}\nasync function runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const subVolume = _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport);\n    const labelmap = await _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForSphere as default, runGrowCutForSphere };\n","export const POSITIVE_SEED_LABEL = 254;\nexport const NEGATIVE_SEED_LABEL = 255;\nexport const DEFAULT_NEIGHBORHOOD_RADIUS = 1;\nexport const DEFAULT_POSITIVE_STD_DEV_MULTIPLIER = 1.8;\nexport const DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER = 3.2;\nexport const DEFAULT_NEGATIVE_SEED_MARGIN = 30;\nexport const DEFAULT_NEGATIVE_SEEDS_COUNT = 70;\nexport const MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER = 50;\n","import { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { POSITIVE_SEED_LABEL, NEGATIVE_SEED_LABEL, DEFAULT_NEIGHBORHOOD_RADIUS, DEFAULT_POSITIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_SEED_MARGIN, DEFAULT_NEGATIVE_SEEDS_COUNT, MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER, } from './constants';\nconst { transformWorldToIndex } = csUtils;\nconst MAX_POSITIVE_SEEDS = 100000;\nfunction calculateGrowCutSeeds(referencedVolume, worldPosition, options) {\n    const { dimensions, imageData: refImageData } = referencedVolume;\n    const [width, height, numSlices] = dimensions;\n    const referenceVolumeVoxelManager = referencedVolume.voxelManager;\n    const scalarData = referenceVolumeVoxelManager.getCompleteScalarDataArray();\n    const numPixelsPerSlice = width * height;\n    const neighborhoodRadius = options?.initialNeighborhoodRadius ?? DEFAULT_NEIGHBORHOOD_RADIUS;\n    const positiveK = options?.positiveStdDevMultiplier ?? DEFAULT_POSITIVE_STD_DEV_MULTIPLIER;\n    const negativeK = options?.negativeStdDevMultiplier ?? DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER;\n    const negativeSeedMargin = options?.negativeSeedMargin ?? DEFAULT_NEGATIVE_SEED_MARGIN;\n    const negativeSeedsTargetPatches = options?.negativeSeedsTargetPatches ?? DEFAULT_NEGATIVE_SEEDS_COUNT;\n    const ijkStart = transformWorldToIndex(refImageData, worldPosition).map(Math.round);\n    const startIndex = referenceVolumeVoxelManager.toIndex(ijkStart);\n    if (ijkStart[0] < 0 ||\n        ijkStart[0] >= width ||\n        ijkStart[1] < 0 ||\n        ijkStart[1] >= height ||\n        ijkStart[2] < 0 ||\n        ijkStart[2] >= numSlices) {\n        console.warn('Click position is outside volume bounds.');\n        return null;\n    }\n    const initialStats = csUtils.calculateNeighborhoodStats(scalarData, dimensions, ijkStart, neighborhoodRadius);\n    if (initialStats.count === 0) {\n        initialStats.mean = scalarData[startIndex];\n        initialStats.stdDev = 0;\n    }\n    const positiveIntensityMin = initialStats.mean - positiveK * initialStats.stdDev;\n    const positiveIntensityMax = initialStats.mean + positiveK * initialStats.stdDev;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    let minX = Infinity, minY = Infinity, minZ = Infinity;\n    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n    const positiveSeedIndices = new Set();\n    const queue = [];\n    const startValue = scalarData[startIndex];\n    if (startValue >= positiveIntensityMin &&\n        startValue <= positiveIntensityMax) {\n        positiveSeedIndices.add(startIndex);\n        queue.push(ijkStart);\n        minX = maxX = ijkStart[0];\n        minY = maxY = ijkStart[1];\n        minZ = maxZ = ijkStart[2];\n    }\n    else {\n        console.warn('Clicked voxel intensity is outside the calculated positive range. No positive seeds generated.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let currentQueueIndex = 0;\n    while (currentQueueIndex < queue.length &&\n        positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n        const [x, y, z] = queue[currentQueueIndex++];\n        minX = Math.min(x, minX);\n        minY = Math.min(y, minY);\n        minZ = Math.min(z, minZ);\n        maxX = Math.max(x, maxX);\n        maxY = Math.max(y, maxY);\n        maxZ = Math.max(z, maxZ);\n        for (let i = 0; i < neighborsCoordDelta.length; i++) {\n            const [dx, dy, dz] = neighborsCoordDelta[i];\n            const nx = x + dx;\n            const ny = y + dy;\n            const nz = z + dz;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborIndex = nz * numPixelsPerSlice + ny * width + nx;\n            if (positiveSeedIndices.has(neighborIndex)) {\n                continue;\n            }\n            const neighborValue = scalarData[neighborIndex];\n            if (neighborValue >= positiveIntensityMin &&\n                neighborValue <= positiveIntensityMax) {\n                positiveSeedIndices.add(neighborIndex);\n                if (positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n                    queue.push([nx, ny, nz]);\n                }\n            }\n        }\n    }\n    if (positiveSeedIndices.size >= MAX_POSITIVE_SEEDS) {\n        console.debug(`Reached maximum number of positive seeds (${MAX_POSITIVE_SEEDS}). Stopping BFS.`);\n    }\n    if (positiveSeedIndices.size === 0) {\n        console.warn('No positive seeds found after BFS.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let positiveSum = 0;\n    let positiveSumSq = 0;\n    positiveSeedIndices.forEach((index) => {\n        const value = scalarData[index];\n        positiveSum += value;\n        positiveSumSq += value * value;\n    });\n    const positiveCount = positiveSeedIndices.size;\n    const positiveMean = positiveSum / positiveCount;\n    const positiveVariance = positiveSumSq / positiveCount - positiveMean * positiveMean;\n    const positiveStdDev = Math.sqrt(Math.max(0, positiveVariance));\n    const negativeDiffThreshold = negativeK * positiveStdDev;\n    const minXm = Math.max(0, minX - negativeSeedMargin);\n    const minYm = Math.max(0, minY - negativeSeedMargin);\n    const minZm = Math.max(0, minZ - negativeSeedMargin);\n    const maxXm = Math.min(width - 1, maxX + negativeSeedMargin);\n    const maxYm = Math.min(height - 1, maxY + negativeSeedMargin);\n    const maxZm = Math.min(numSlices - 1, maxZ + negativeSeedMargin);\n    const negativeSeedIndices = new Set();\n    let attempts = 0;\n    let patchesAdded = 0;\n    const maxAttempts = negativeSeedsTargetPatches * MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER;\n    while (patchesAdded < negativeSeedsTargetPatches && attempts < maxAttempts) {\n        attempts++;\n        const rx = Math.floor(Math.random() * (maxXm - minXm + 1) + minXm);\n        const ry = Math.floor(Math.random() * (maxYm - minYm + 1) + minYm);\n        const rz = Math.floor(Math.random() * (maxZm - minZm + 1) + minZm);\n        const centerIndex = rz * numPixelsPerSlice + ry * width + rx;\n        if (positiveSeedIndices.has(centerIndex) ||\n            negativeSeedIndices.has(centerIndex)) {\n            continue;\n        }\n        const centerValue = scalarData[centerIndex];\n        if (Math.abs(centerValue - positiveMean) > negativeDiffThreshold) {\n            let patchContributed = false;\n            for (let dy = -1; dy <= 1; dy++) {\n                const ny = ry + dy;\n                if (ny < 0 || ny >= height) {\n                    continue;\n                }\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = rx + dx;\n                    if (nx < 0 || nx >= width) {\n                        continue;\n                    }\n                    const neighborIndex = rz * numPixelsPerSlice + ny * width + nx;\n                    if (positiveSeedIndices.has(neighborIndex) ||\n                        negativeSeedIndices.has(neighborIndex)) {\n                        continue;\n                    }\n                    negativeSeedIndices.add(neighborIndex);\n                    patchContributed = true;\n                }\n            }\n            if (patchContributed) {\n                patchesAdded++;\n            }\n        }\n    }\n    if (negativeSeedIndices.size === 0) {\n        console.warn('Could not find any negative seeds. GrowCut might fail or produce poor results.');\n    }\n    console.debug('positiveSeedIndices', positiveSeedIndices.size);\n    console.debug('negativeSeedIndices', negativeSeedIndices.size);\n    return { positiveSeedIndices, negativeSeedIndices };\n}\nasync function runOneClickGrowCut({ referencedVolumeId, worldPosition, options, }) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(referencedVolumeId);\n    labelmap.voxelManager.forEach(({ index, value }) => {\n        if (value !== 0) {\n            labelmap.voxelManager.setAtIndex(index, 0);\n        }\n    });\n    const seeds = options.seeds ??\n        calculateGrowCutSeeds(referencedVolume, worldPosition, options);\n    const positiveSeedLabel = options?.positiveSeedValue ?? POSITIVE_SEED_LABEL;\n    const negativeSeedLabel = options?.negativeSeedValue ?? NEGATIVE_SEED_LABEL;\n    if (!seeds) {\n        return null;\n    }\n    const { positiveSeedIndices, negativeSeedIndices } = seeds;\n    if (positiveSeedIndices.size < 10 ||\n        positiveSeedIndices.size > MAX_POSITIVE_SEEDS ||\n        negativeSeedIndices.size < 10) {\n        console.warn('Not enough seeds found. GrowCut might fail or produce poor results.');\n        return labelmap;\n    }\n    positiveSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, positiveSeedLabel);\n    });\n    negativeSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, negativeSeedLabel);\n    });\n    await run(referencedVolumeId, labelmap.volumeId, options);\n    return labelmap;\n}\nexport { runOneClickGrowCut as default, runOneClickGrowCut, calculateGrowCutSeeds, };\n","import { expose } from 'comlink';\nimport { utilities } from '@cornerstonejs/core';\nimport SegmentStatsCalculator from '../utilities/segmentation/SegmentStatsCalculator';\nimport { getSegmentLargestBidirectional } from '../utilities/segmentation';\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { getDeduplicatedVTKPolyDataPoints } from '../utilities/contours/getDeduplicatedVTKPolyDataPoints';\nimport { findContoursFromReducedSet } from '../utilities/contours/contourFinder';\nimport { createBidirectionalForSlice } from '../utilities/segmentation/findLargestBidirectional';\nimport { createIsInSegmentMetadata } from '../utilities/segmentation/isLineInSegment';\nconst { VoxelManager } = utilities;\nconst computeWorker = {\n    createVoxelManager: (dimensions, scalarData) => {\n        return VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n    },\n    createDataStructure: (info) => {\n        const { scalarData, dimensions, spacing, origin, direction } = info;\n        const voxelManager = computeWorker.createVoxelManager(dimensions, scalarData);\n        return {\n            voxelManager,\n            dimensions,\n            spacing,\n            origin,\n            direction,\n            scalarData,\n        };\n    },\n    createVTKImageData: (dimensions, origin, direction, spacing, scalarData) => {\n        const imageData = vtkImageData.newInstance();\n        imageData.setDimensions(dimensions);\n        imageData.setOrigin(origin);\n        imageData.setDirection(direction);\n        imageData.setSpacing(spacing);\n        if (!scalarData) {\n            return imageData;\n        }\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Scalars',\n            numberOfComponents: 1,\n            values: scalarData,\n        });\n        imageData.getPointData().setScalars(scalarArray);\n        return imageData;\n    },\n    processSegmentStatistics: ({ segVoxelManager, imageVoxelManager, indices, bounds, imageData, }) => {\n        segVoxelManager.forEach(({ value, pointIJK, pointLPS, index }) => {\n            if (indices.indexOf(value) === -1) {\n                return;\n            }\n            const imageValue = imageVoxelManager.getAtIndex(index);\n            SegmentStatsCalculator.statsCallback({\n                segmentIndex: value,\n                value: imageValue,\n                pointIJK,\n                pointLPS,\n            });\n        }, {\n            boundsIJK: bounds || imageVoxelManager.getDefaultBounds(),\n            imageData,\n        });\n    },\n    performMarchingSquares: (imageData, sliceIndex = null, slicingMode = null) => {\n        const options = {};\n        if (sliceIndex !== null) {\n            options.slice = sliceIndex;\n        }\n        if (slicingMode !== null) {\n            options.slicingMode = slicingMode;\n        }\n        const mSquares = vtkImageMarchingSquares.newInstance(options);\n        mSquares.setInputData(imageData);\n        mSquares.setContourValues([1]);\n        mSquares.setMergePoints(false);\n        return mSquares.getOutputData();\n    },\n    createContoursFromPolyData: (msOutput, sliceIndex = null) => {\n        const reducedSet = getDeduplicatedVTKPolyDataPoints(msOutput);\n        if (reducedSet.points?.length) {\n            const contours = findContoursFromReducedSet(reducedSet.lines);\n            return {\n                contours,\n                polyData: reducedSet,\n            };\n        }\n        return null;\n    },\n    createSegmentsFromIndices: (indices) => {\n        return [null, ...indices.map((index) => ({ segmentIndex: index }))];\n    },\n    getArgsFromInfo: (args) => {\n        const { segmentationInfo, imageInfo } = args;\n        const getSegmentationData = () => {\n            return computeWorker.createDataStructure(segmentationInfo);\n        };\n        const getImageData = () => {\n            return computeWorker.createDataStructure(imageInfo);\n        };\n        return {\n            segmentation: segmentationInfo && getSegmentationData(),\n            image: imageInfo && getImageData(),\n        };\n    },\n    calculateSegmentsStatisticsVolume: (args) => {\n        const { mode, indices } = args;\n        const { segmentation, image } = computeWorker.getArgsFromInfo(args);\n        const { voxelManager: segVoxelManager, spacing: segmentationSpacing } = segmentation;\n        const { voxelManager: imageVoxelManager } = image;\n        const imageData = computeWorker.createVTKImageData(segmentation.dimensions, segmentation.origin, segmentation.direction, segmentation.spacing);\n        SegmentStatsCalculator.statsInit({ storePointData: false, indices, mode });\n        computeWorker.processSegmentStatistics({\n            segVoxelManager,\n            imageVoxelManager,\n            indices,\n            imageData,\n        });\n        const stats = SegmentStatsCalculator.getStatistics({\n            spacing: segmentationSpacing,\n            unit: 'mm',\n            mode,\n        });\n        return stats;\n    },\n    computeMetabolicStats({ segmentationInfo, imageInfo }) {\n        const { scalarData, dimensions, spacing, origin, direction } = segmentationInfo;\n        const { spacing: imageSpacing, dimensions: imageDimensions, direction: imageDirection, origin: imageOrigin, scalarData: imageScalarData, } = imageInfo;\n        const segVoxelManager = computeWorker.createVoxelManager(segmentationInfo.dimensions, segmentationInfo.scalarData);\n        const refVoxelManager = computeWorker.createVoxelManager(imageDimensions, imageScalarData);\n        let suv = 0;\n        let numVoxels = 0;\n        const scalarDataLength = segVoxelManager.getScalarDataLength();\n        for (let i = 0; i < scalarDataLength; i++) {\n            if (segVoxelManager.getAtIndex(i) !== 0) {\n                suv += refVoxelManager.getAtIndex(i);\n                numVoxels++;\n            }\n        }\n        const tmtv = 1e-3 * numVoxels * spacing[0] * spacing[1] * spacing[2];\n        const averageSuv = numVoxels > 0 ? suv / numVoxels : 0;\n        const tlg = averageSuv *\n            numVoxels *\n            imageSpacing[0] *\n            imageSpacing[1] *\n            imageSpacing[2] *\n            1e-3;\n        return {\n            tmtv,\n            tlg,\n        };\n    },\n    calculateSegmentsStatisticsStack: (args) => {\n        const { segmentationInfo, imageInfo, indices, mode } = args;\n        SegmentStatsCalculator.statsInit({ storePointData: true, indices, mode });\n        for (let i = 0; i < segmentationInfo.length; i++) {\n            const segInfo = segmentationInfo[i];\n            const imgInfo = imageInfo[i];\n            const segDimensions = [\n                segInfo.dimensions[0],\n                segInfo.dimensions[1],\n                1,\n            ];\n            const segVoxelManager = computeWorker.createVoxelManager(segDimensions, segInfo.scalarData);\n            const imageVoxelManager = computeWorker.createVoxelManager(segDimensions, imgInfo.scalarData);\n            const imageData = computeWorker.createVTKImageData(segDimensions, segInfo.origin, segInfo.direction, segInfo.spacing);\n            computeWorker.processSegmentStatistics({\n                segVoxelManager,\n                imageVoxelManager,\n                indices,\n                imageData,\n            });\n        }\n        const spacing = segmentationInfo[0].spacing;\n        const stats = SegmentStatsCalculator.getStatistics({\n            spacing,\n            mode,\n        });\n        return stats;\n    },\n    getSegmentLargestBidirectionalInternal: (args) => {\n        const { segmentationInfo, imageInfo, indices, mode, isStack } = args;\n        let segmentation;\n        if (!isStack) {\n            ({ segmentation } = computeWorker.getArgsFromInfo(args));\n        }\n        else {\n            ({ segmentation } = computeWorker.getArgsFromInfo({\n                segmentationInfo: segmentationInfo[0],\n            }));\n        }\n        return isStack\n            ? computeWorker.calculateBidirectionalStack({\n                segmentationInfo,\n                indices,\n                mode,\n            })\n            : computeWorker.calculateVolumetricBidirectional({\n                segmentation,\n                indices,\n                mode,\n            });\n    },\n    findLargestBidirectionalFromContours: (contours, isInSegment, segmentIndex) => {\n        let maxBidirectional;\n        for (const sliceContour of contours) {\n            const bidirectional = createBidirectionalForSlice(sliceContour, isInSegment, maxBidirectional);\n            if (!bidirectional) {\n                continue;\n            }\n            maxBidirectional = bidirectional;\n        }\n        if (maxBidirectional) {\n            return {\n                segmentIndex,\n                majorAxis: maxBidirectional.majorAxis,\n                minorAxis: maxBidirectional.minorAxis,\n                maxMajor: maxBidirectional.maxMajor,\n                maxMinor: maxBidirectional.maxMinor,\n            };\n        }\n        return null;\n    },\n    calculateBidirectionalStack: ({ segmentationInfo, indices, mode }) => {\n        const segments = computeWorker.createSegmentsFromIndices(indices);\n        let bidirectionalResults = [];\n        for (let i = 0; i < segmentationInfo.length; i++) {\n            const segInfo = segmentationInfo[i];\n            const dimensions = segInfo.dimensions;\n            const segScalarData = segInfo.scalarData;\n            const { spacing, direction, origin } = segInfo;\n            const voxelManager = computeWorker.createVoxelManager(dimensions, segScalarData);\n            const pixelsPerSlice = dimensions[0] * dimensions[1];\n            for (let segIndex = 1; segIndex < segments.length; segIndex++) {\n                const segment = segments[segIndex];\n                if (!segment) {\n                    continue;\n                }\n                const segmentIndex = segment.segmentIndex;\n                if (computeWorker.isSliceEmptyForSegmentVolume(0, segScalarData, pixelsPerSlice, segmentIndex)) {\n                    continue;\n                }\n                const sliceContours = [];\n                const filteredData = new Uint8Array(segScalarData.length);\n                for (let i = 0; i < segScalarData.length; i++) {\n                    filteredData[i] = segScalarData[i] === segmentIndex ? 1 : 0;\n                }\n                const scalarArray = vtkDataArray.newInstance({\n                    name: 'Pixels',\n                    numberOfComponents: 1,\n                    values: filteredData,\n                });\n                const imageData = computeWorker.createVTKImageData(dimensions, origin, direction, [spacing[0], spacing[1], 1]);\n                imageData.getPointData().setScalars(scalarArray);\n                try {\n                    const msOutput = computeWorker.performMarchingSquares(imageData, null, 2);\n                    const contourData = computeWorker.createContoursFromPolyData(msOutput);\n                    if (contourData) {\n                        sliceContours.push(contourData);\n                    }\n                }\n                catch (e) {\n                    console.warn(e);\n                }\n                const isInSegment = createIsInSegmentMetadata({\n                    dimensions,\n                    imageData,\n                    voxelManager,\n                    segmentIndex,\n                });\n                const bidirectionalResult = computeWorker.findLargestBidirectionalFromContours(sliceContours, isInSegment, segmentIndex);\n                if (bidirectionalResult) {\n                    bidirectionalResults.push(bidirectionalResult);\n                }\n            }\n        }\n        return bidirectionalResults;\n    },\n    calculateVolumetricBidirectional: ({ segmentation, indices, mode }) => {\n        const { voxelManager, dimensions, origin, direction, spacing } = segmentation;\n        const imageData = computeWorker.createVTKImageData(dimensions, origin, direction, spacing);\n        const contourSets = computeWorker.generateContourSetsFromLabelmapVolume({\n            segmentation,\n            indices,\n            imageData,\n            mode,\n        });\n        const bidirectionalResults = [];\n        for (let i = 0; i < contourSets.length; i++) {\n            const contourSet = contourSets[i];\n            const { segmentIndex } = contourSet.segment;\n            const contours = contourSet.sliceContours;\n            const isInSegment = createIsInSegmentMetadata({\n                dimensions,\n                imageData,\n                voxelManager,\n                segmentIndex,\n            });\n            const bidirectionalResult = computeWorker.findLargestBidirectionalFromContours(contours, isInSegment, segmentIndex);\n            if (bidirectionalResult) {\n                bidirectionalResults.push(bidirectionalResult);\n            }\n        }\n        return bidirectionalResults;\n    },\n    generateContourSetsFromLabelmapVolume: (args) => {\n        const { segmentation, indices, imageData } = args;\n        const { voxelManager, dimensions, scalarData, origin, direction, spacing } = segmentation;\n        const numSlices = dimensions[2];\n        const pixelsPerSlice = dimensions[0] * dimensions[1];\n        const segments = computeWorker.createSegmentsFromIndices(indices);\n        for (let z = 0; z < numSlices; z++) {\n            for (let y = 0; y < dimensions[1]; y++) {\n                const index = y * dimensions[0] + z * pixelsPerSlice;\n                scalarData[index] = 0;\n                scalarData[index + dimensions[0] - 1] = 0;\n            }\n        }\n        const ContourSets = [];\n        const numSegments = segments.length;\n        for (let segIndex = 0; segIndex < numSegments; segIndex++) {\n            const segment = segments[segIndex];\n            if (!segment) {\n                continue;\n            }\n            const segmentIndex = segment.segmentIndex;\n            const sliceContours = [];\n            const scalars = vtkDataArray.newInstance({\n                name: 'Scalars',\n                numberOfComponents: 1,\n                size: pixelsPerSlice * numSlices,\n                dataType: 'Uint8Array',\n            });\n            for (let sliceIndex = 0; sliceIndex < numSlices; sliceIndex++) {\n                if (computeWorker.isSliceEmptyForSegmentVolume(sliceIndex, scalarData, pixelsPerSlice, segmentIndex)) {\n                    continue;\n                }\n                const frameStart = sliceIndex * pixelsPerSlice;\n                try {\n                    for (let i = 0; i < pixelsPerSlice; i++) {\n                        const value = scalarData[i + frameStart];\n                        if (value === segmentIndex) {\n                            scalars.setValue(i + frameStart, 1);\n                        }\n                        else {\n                            scalars.setValue(i, 0);\n                        }\n                    }\n                    const imageDataCopy = vtkImageData.newInstance();\n                    imageDataCopy.shallowCopy(imageData);\n                    imageDataCopy.getPointData().setScalars(scalars);\n                    const msOutput = computeWorker.performMarchingSquares(imageDataCopy, sliceIndex);\n                    const contourData = computeWorker.createContoursFromPolyData(msOutput, sliceIndex);\n                    if (contourData) {\n                        sliceContours.push(contourData);\n                    }\n                }\n                catch (e) {\n                    console.warn(sliceIndex);\n                    console.warn(e);\n                }\n            }\n            const ContourSet = {\n                sliceContours,\n                segment,\n            };\n            ContourSets.push(ContourSet);\n        }\n        return ContourSets;\n    },\n    isSliceEmptyForSegmentVolume: (sliceIndex, segData, pixelsPerSlice, segIndex) => {\n        const startIdx = sliceIndex * pixelsPerSlice;\n        const endIdx = startIdx + pixelsPerSlice;\n        for (let i = startIdx; i < endIdx; i++) {\n            if (segData[i] === segIndex) {\n                return false;\n            }\n        }\n        return true;\n    },\n};\nexpose(computeWorker);\n","const DataTypeByteSize = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\nconst VtkDataTypes = {\n  VOID: '',\n  // not sure to know what that should be\n  CHAR: 'Int8Array',\n  SIGNED_CHAR: 'Int8Array',\n  UNSIGNED_CHAR: 'Uint8Array',\n  UNSIGNED_CHAR_CLAMPED: 'Uint8ClampedArray',\n  // should be used for VTK.js internal purpose only\n  SHORT: 'Int16Array',\n  UNSIGNED_SHORT: 'Uint16Array',\n  INT: 'Int32Array',\n  UNSIGNED_INT: 'Uint32Array',\n  FLOAT: 'Float32Array',\n  DOUBLE: 'Float64Array'\n};\nconst DefaultDataType = VtkDataTypes.FLOAT;\nvar Constants = {\n  DefaultDataType,\n  DataTypeByteSize,\n  VtkDataTypes\n};\n\nexport { DataTypeByteSize, DefaultDataType, VtkDataTypes, Constants as default };\n","const AttributeTypes = {\n  SCALARS: 0,\n  VECTORS: 1,\n  NORMALS: 2,\n  TCOORDS: 3,\n  TENSORS: 4,\n  GLOBALIDS: 5,\n  PEDIGREEIDS: 6,\n  EDGEFLAG: 7,\n  NUM_ATTRIBUTES: 8\n};\nconst AttributeLimitTypes = {\n  MAX: 0,\n  EXACT: 1,\n  NOLIMIT: 2\n};\nconst CellGhostTypes = {\n  DUPLICATECELL: 1,\n  // the cell is present on multiple processors\n  HIGHCONNECTIVITYCELL: 2,\n  // the cell has more neighbors than in a regular mesh\n  LOWCONNECTIVITYCELL: 4,\n  // the cell has less neighbors than in a regular mesh\n  REFINEDCELL: 8,\n  // other cells are present that refines it.\n  EXTERIORCELL: 16,\n  // the cell is on the exterior of the data set\n  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst PointGhostTypes = {\n  DUPLICATEPOINT: 1,\n  // the cell is present on multiple processors\n  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst AttributeCopyOperations = {\n  COPYTUPLE: 0,\n  INTERPOLATE: 1,\n  PASSDATA: 2,\n  ALLCOPY: 3 // all of the above\n};\n\nconst ghostArrayName = 'vtkGhostType';\nconst DesiredOutputPrecision = {\n  DEFAULT: 0,\n  // use the point type that does not truncate any data\n  SINGLE: 1,\n  // use Float32Array\n  DOUBLE: 2 // use Float64Array\n};\n\nvar Constants = {\n  AttributeCopyOperations,\n  AttributeLimitTypes,\n  AttributeTypes,\n  CellGhostTypes,\n  DesiredOutputPrecision,\n  PointGhostTypes,\n  ghostArrayName\n};\n\nexport { AttributeCopyOperations, AttributeLimitTypes, AttributeTypes, CellGhostTypes, DesiredOutputPrecision, PointGhostTypes, Constants as default, ghostArrayName };\n","import { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkEdgeLocator from '../../Common/DataModel/EdgeLocator.js';\nimport vtkCaseTable from './ImageMarchingSquares/caseTable.js';\n\nconst {\n  vtkErrorMacro,\n  vtkDebugMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkImageMarchingSquares methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageMarchingSquares(publicAPI, model) {\n  /**\n   * Get the X,Y kernels based on the set slicing mode.\n   * @returns {[number, number]}\n   */\n  function getKernels() {\n    let kernelX = 0; // default K slicing mode\n    let kernelY = 1;\n    if (model.slicingMode === 1) {\n      kernelX = 0;\n      kernelY = 2;\n    } else if (model.slicingMode === 0) {\n      kernelX = 1;\n      kernelY = 2;\n    }\n    return [kernelX, kernelY];\n  }\n\n  // Set our className\n  model.classHierarchy.push('vtkImageMarchingSquares');\n\n  /**\n   * Get the list of contour values.\n   * @returns {number[]}\n   */\n  publicAPI.getContourValues = () => model.contourValues;\n\n  /**\n   * Set the list contour values.\n   * @param {number[]} cValues\n   */\n  publicAPI.setContourValues = cValues => {\n    model.contourValues = cValues;\n    publicAPI.modified();\n  };\n  const ids = [];\n  const pixelScalars = [];\n  const pixelPts = [];\n  const edgeLocator = vtkEdgeLocator.newInstance();\n\n  /**\n   * Retrieve scalars and pixel coordinates.\n   * @param {Vector3} ijk origin of the pixel\n   * @param {Vector3} dims dimensions of the image\n   * @param {TypedArray} scalars list of scalar values\n   * @param {Vector3} increments IJK slice increments\n   * @param {number} kernelX index of the X element\n   * @param {number} kernelY index of the Y element\n   */\n  publicAPI.getPixelScalars = (ijk, dims, scalars, increments, kernelX, kernelY) => {\n    const [i, j, k] = ijk;\n\n    // First get the indices for the pixel\n    ids[0] = k * dims[1] * dims[0] + j * dims[0] + i; // i, j, k\n    ids[1] = ids[0] + increments[kernelX]; // i+1, j, k\n    ids[2] = ids[0] + increments[kernelY]; // i, j+1, k\n    ids[3] = ids[2] + increments[kernelX]; // i+1, j+1, k\n\n    // Now retrieve the scalars\n    for (let ii = 0; ii < 4; ++ii) {\n      pixelScalars[ii] = scalars[ids[ii]];\n    }\n  };\n\n  /**\n   * Retrieve pixel coordinates.\n   * @param {Vector3} ijk origin of the pixel\n   * @param {Vector3} origin origin of the image\n   * @param {Vector3} spacing spacing of the image\n   * @param {number} kernelX index of the X element\n   * @param {number} kernelY index of the Y element\n   */\n  publicAPI.getPixelPoints = (ijk, origin, spacing, kernelX, kernelY) => {\n    const i = ijk[kernelX];\n    const j = ijk[kernelY];\n\n    // (i,i+1),(j,j+1),(k,k+1) - i varies fastest; then j; then k\n    pixelPts[0] = origin[kernelX] + i * spacing[kernelX]; // 0\n    pixelPts[1] = origin[kernelY] + j * spacing[kernelY];\n    pixelPts[2] = pixelPts[0] + spacing[kernelX]; // 1\n    pixelPts[3] = pixelPts[1];\n    pixelPts[4] = pixelPts[0]; // 2\n    pixelPts[5] = pixelPts[1] + spacing[kernelY];\n    pixelPts[6] = pixelPts[2]; // 3\n    pixelPts[7] = pixelPts[5];\n  };\n\n  /**\n   * Produce points and lines for the polydata.\n   * @param {number[]} cVal list of contour values\n   * @param {Vector3} ijk origin of the pixel\n   * @param {Vector3} dims dimensions of the image\n   * @param {Vector3} origin origin of the image\n   * @param {Vector3} spacing sapcing of the image\n   * @param {TypedArray} scalars list of scalar values\n   * @param {number[]} points list of points\n   * @param {number[]} lines list of lines\n   * @param {Vector3} increments IJK slice increments\n   * @param {number} kernelX index of the X element\n   * @param {number} kernelY index of the Y element\n   */\n  publicAPI.produceLines = (cVal, ijk, dims, origin, spacing, scalars, points, lines, increments, kernelX, kernelY) => {\n    const k = ijk[model.slicingMode];\n    const CASE_MASK = [1, 2, 8, 4]; // case table is actually for quad\n    const xyz = [];\n    let pId;\n    publicAPI.getPixelScalars(ijk, dims, scalars, increments, kernelX, kernelY);\n    let index = 0;\n    for (let idx = 0; idx < 4; idx++) {\n      if (pixelScalars[idx] >= cVal) {\n        index |= CASE_MASK[idx]; // eslint-disable-line no-bitwise\n      }\n    }\n\n    const pixelLines = vtkCaseTable.getCase(index);\n    if (pixelLines[0] < 0) {\n      return; // don't get the pixel coordinates, nothing to do\n    }\n\n    publicAPI.getPixelPoints(ijk, origin, spacing, kernelX, kernelY);\n    const z = origin[model.slicingMode] + k * spacing[model.slicingMode];\n    for (let idx = 0; pixelLines[idx] >= 0; idx += 2) {\n      lines.push(2);\n      for (let eid = 0; eid < 2; eid++) {\n        const edgeVerts = vtkCaseTable.getEdge(pixelLines[idx + eid]);\n        pId = undefined;\n        if (model.mergePoints) {\n          pId = edgeLocator.isInsertedEdge(ids[edgeVerts[0]], ids[edgeVerts[1]])?.value;\n        }\n        if (pId === undefined) {\n          const t = (cVal - pixelScalars[edgeVerts[0]]) / (pixelScalars[edgeVerts[1]] - pixelScalars[edgeVerts[0]]);\n          const x0 = pixelPts.slice(edgeVerts[0] * 2, (edgeVerts[0] + 1) * 2);\n          const x1 = pixelPts.slice(edgeVerts[1] * 2, (edgeVerts[1] + 1) * 2);\n          xyz[kernelX] = x0[0] + t * (x1[0] - x0[0]);\n          xyz[kernelY] = x0[1] + t * (x1[1] - x0[1]);\n          xyz[model.slicingMode] = z;\n          pId = points.length / 3;\n          points.push(xyz[0], xyz[1], xyz[2]);\n          if (model.mergePoints) {\n            edgeLocator.insertEdge(ids[edgeVerts[0]], ids[edgeVerts[1]], pId);\n          }\n        }\n        lines.push(pId);\n      }\n    }\n  };\n  publicAPI.requestData = (inData, outData) => {\n    // implement requestData\n    const input = inData[0];\n    if (!input) {\n      vtkErrorMacro('Invalid or missing input');\n      return;\n    }\n    if (model.slicingMode == null || model.slicingMode < 0 || model.slicingMode > 2) {\n      vtkErrorMacro('Invalid or missing slicing mode');\n      return;\n    }\n    console.time('msquares');\n\n    // Retrieve output and volume data\n    const origin = input.getOrigin();\n    const spacing = input.getSpacing();\n    const dims = input.getDimensions();\n    const extent = input.getExtent();\n    const increments = input.computeIncrements(extent);\n    const scalars = input.getPointData().getScalars().getData();\n    const [kernelX, kernelY] = getKernels();\n\n    // Points - dynamic array\n    const points = [];\n\n    // Cells - dynamic array\n    const lines = [];\n\n    // Ensure slice is valid\n    let k = Math.round(model.slice);\n    if (k >= dims[model.slicingMode]) {\n      k = 0;\n    }\n\n    // Loop over all contour values, and then pixels, determine case and process\n    const ijk = [0, 0, 0];\n    ijk[model.slicingMode] = k;\n    for (let cv = 0; cv < model.contourValues.length; ++cv) {\n      for (let j = 0; j < dims[kernelY] - 1; ++j) {\n        ijk[kernelY] = j;\n        for (let i = 0; i < dims[kernelX] - 1; ++i) {\n          ijk[kernelX] = i;\n          publicAPI.produceLines(model.contourValues[cv], ijk, dims, origin, spacing, scalars, points, lines, increments, kernelX, kernelY);\n        }\n      }\n      edgeLocator.initialize();\n    }\n\n    // Update output\n    const polydata = vtkPolyData.newInstance();\n    polydata.getPoints().setData(new Float32Array(points), 3);\n    polydata.getLines().setData(new Uint32Array(lines));\n    outData[0] = polydata;\n    vtkDebugMacro('Produced output');\n    console.timeEnd('msquares');\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  contourValues: [],\n  slicingMode: 2,\n  slice: 0,\n  mergePoints: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Make this a VTK object\n  macro.obj(publicAPI, model);\n\n  // Also make it an algorithm with one input and one output\n  macro.algo(publicAPI, model, 1, 1);\n  macro.setGet(publicAPI, model, ['slicingMode', 'slice', 'mergePoints']);\n\n  // Object specific methods\n  macro.algo(publicAPI, model, 1, 1);\n  vtkImageMarchingSquares(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageMarchingSquares');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageMarchingSquares$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImageMarchingSquares$1 as default, extend, newInstance };\n","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n"],"names":["enabledElement","invalidated","image","canvas","start","stats","lastGetPixelDataTime","lastStoredPixelDataToCanvasImageDataTime","lastPutImageDataTime","lastRenderTime","lastLutGenerateTime","render","viewport","colormap","color","renderTimeInMs","invalid","needsRedraw","scale","transform","displayedArea","translate","width","height","angle","rotation","rotate","Math","PI","widthScale","heightScale","brhc","x","tlhc","y","presentationSizeMode","rowPixelSpacing","columnPixelSpacing","verticalScale","horizontalScale","min","translation","undefined","hflip","vflip","modality","Error","scaleFactor","voi","isPreScaled","windowWidth","windowCenter","Array","isArray","invert","pixelReplication","modalityLUT","voiLUT","columns","rows","GenerateImageType","DEFAULT_SETTINGS","Symbol","RUNTIME_SETTINGS","OBJECT_SETTINGS_MAP","DICTIONARY","Settings","constructor","base","dictionary","Object","create","seal","defineProperty","this","value","set","key","get","unset","name","endsWith","deleteCount","namespace","slice","deleteAll","length","prototype","hasOwnProperty","call","startsWith","forEach","callback","iterate","extend","import","root","isPlainObject","keys","dump","context","deepSet","assert","subject","getRuntimeSettings","getDefaultSettings","subfield","defaultSettings","settingObj","setting","split","runtimeSettings","getObjectSettings","from","settings","objectSettingsMap","WeakMap","extendRuntimeSettings","references","last","current","previous","indexOf","isValidKey","prefix","record","failCount","has","add","field","delete","setAll","WeakSet","getPrototypeOf","separator","subKey","subContext","subContextValue","imageLoaders","unknownImageLoader","loadImageFromImageLoader","imageId","options","cachedImageLoadObject","getImageLoadObject","handleImageLoadPromise","promise","scheme","loader","imageLoadObject","imagePromise","Promise","resolve","then","voxelManager","numberOfComponents","createImageVoxelManager","scalarData","getPixelData","getScalarData","imageFrame","pixelData","ensureVoxelManager","IMAGE_LOADED","catch","error","errorDetails","IMAGE_LOAD_FAILED","loadImage","priority","requestType","loadAndCacheImage","putImageLoadObject","createAndCacheDerivedImage","referencedImageId","skipCreateBuffer","onCacheAdd","voxelRepresentation","imagePlaneModule","TypedArrayConstructor","targetBuffer","type","imageScalarData","derivedImageId","referencedImagePlaneMetadata","metadata","referencedImageGeneralSeriesMetadata","instanceNumber","imagePixelModule","bitsAllocated","bitsStored","highBit","samplesPerPixel","pixelRepresentation","localImage","createAndCacheLocalImage","dimensions","spacing","origin","imagePositionPatient","direction","imageOrientationPatient","frameOfReferenceUID","putImageSync","createAndCacheDerivedImages","referencedImageIds","derivedImageIds","map","index","newOptions","getDerivedImageId","push","rowCosines","columnCosines","pixelSpacing","scalarDataToUse","Uint8Array","Float32Array","Uint16Array","Int16Array","photometricInterpretation","id","RLE","createRLEImageVoxelManager","minPixelValue","maxPixelValue","i","intercept","dataType","slope","getCanvas","rgba","FrameOfReferenceUID","sizeInBytes","byteLength","FrameRange","frameRangeExtractor","imageIdToFrames","match","range","it","Number","imageIdToFrameEnd","imageIdToFrameStart","framesToString","String","framesToImageId","newRangeString","replace","PointsManager","configuration","_dimensions","_length","_byteSize","growSize","initialSize","itemLength","array","ArrayBuffer","data","func","getPoint","dimensionLength","offset","subarray","getPointArray","grow","additionalSize","newSize","newArray","newData","reverse","midLength","floor","indexStart","indexEnd","dimension","valueStart","getTypedArray","point","f","mapData","points","p","toXYZ","xyz","z","fromXYZ","create3","subselect","count","selected","max","newPoints","create2","ProgressiveIterator","as","iterator","v","e","reject","reason","done","nextValue","waiting","rejectReason","getRecent","asyncIterator","errorCallback","console","warn","generate","processFunction","bind","nextPromise","donePromise","getNextPromise","getDonePromise","ADJACENT_ALL","ADJACENT_SINGLE_PLANE","ADJACENT_IN","ADJACENT_OUT","RLEVoxelMap","copyMap","destination","source","row","structuredClone","depth","Map","jMultiple","kMultiple","numComps","pixelDataConstructor","updateScalarData","fill","rle","end","j","getRLE","defaultValue","getRun","k","runIndex","rleIndex","findIndex","rle1","rle0","oldValue","rleInsert","isAfter","insertIndex","rlePrev","rleNext","splice","nextnext","ArrayType","Uint8ClampedArray","frameSize","toIJK","toIndex","newRle","iEnd","rowModified","baseIndex","rowToUse","forEachRow","clear","rowOffset","comp","floodFill","stack","replaceValue","flood","sourceValue","sum","planar","diagonals","singlePlane","childOptions","top","pop","adjacents","findAdjacents","filter","adjacent","fillFrom","getter","boundsIJK","item","adjacentsDelta","leftRle","rightRle","delta","delta1","delta2","testJ","testK","testRle","newAdjacentDelta","isImageActor","actorEntry","actorIsA","actorType","actorToCheck","actor","isA","applyPreset","preset","colorTransferArray","colorTransfer","parseFloat","shiftRange","Infinity","center","getShiftRange","cfun","normColorTransferValuePoints","r","g","b","rescaled","removeAllPoints","addRGBPoint","applyPointsToRGBFunction","getProperty","setRGBTransferFunction","scalarOpacityArray","scalarOpacity","ofun","normPoints","opacity","pwf","addPoint","applyPointsToPiecewiseFunction","property","setScalarOpacity","gradientMinValue","gradientMinOpacity","gradientMaxValue","gradientMaxOpacity","gradientOpacity","setUseGradientOpacity","setGradientOpacityMinimumValue","setGradientOpacityMinimumOpacity","setGradientOpacityMaximumValue","setGradientOpacityMaximumOpacity","interpolation","setInterpolationTypeToFastLinear","setShade","shade","ambient","diffuse","specular","specularPower","setAmbient","setDiffuse","setSpecular","setSpecularPower","volumeId","renderingEngineAndViewportIds","renderingEnginesArray","renderingEngine","viewports","viewportIds","getRenderingEngineAndViewportsContainingVolume","hasBeenDestroyed","renderViewports","getImagePlaneModule","newImagePlaneModule","MetadataModules","IMAGE_PLANE","buildMetadata","voiLUTFunction","imageIdScalingFactor","calibration","CALIBRATION","voiLUTFunctionEnum","values","VOILUTFunctionType","includes","LINEAR","getValidVOILUTFunction","scalingFactor","calculateSpacingBetweenImageIds","imageIds","referenceImagePositionPatient","rowCosineVec","colCosineVec","scanAxisNormal","refIppVec","getDistance","positionVector","ippVec","prefetchedImageIds","metadataForMiddleImage","middleIppVec","distanceBetweenFirstAndMiddleImages","abs","distanceImagePairs","distance","sort","a","numImages","sliceThickness","spacingBetweenSlices","strictZSpacingForVolumeViewport","rendering","isNaN","debug","clamp","_colormaps","registerColormap","Name","getColormap","getColormapNames","findMatchingColormap","rgbPoints","colormapsVTK","rgbPresetNames","presetName","getPresetByName","colormapsCS3D","colormapName","matchedColormap","concat","find","RGBPoints","presetRGBPoints","opacityPoints","getScalarOpacity","getDataPointer","createLinearRGBTransferFunction","voiRange","lower","upper","createSigmoidRGBTransferFunction","approximationNodes","table","_","flatMap","buildFunctionFromArray","decimate","list","interleave","interleaveIndices","deepClone","obj","clonedObj","fnv1aHash","str","hash","charCodeAt","toString","getClosestImageId","imageVolume","worldPos","viewPlaneNormal","kVector","dotProducts","EPSILON","halfSpacingInNormalDirection","imageIdForTool","dir","dot","getImageDataMetadata","xSpacing","ySpacing","xVoxels","yVoxels","zSpacing","_getNumCompsFromPhotometricInterpretation","numVoxels","camera","getCamera","spacingInNormalDirection","focalPoint","getActors","referencedId","uid","volumeActor","sliceRange","numberOfSlices","round","imageIndex","getScalingParameters","modalityLutModule","generalSeriesModule","scalingParameters","rescaleSlope","rescaleIntercept","suvFactor","suvbw","suvbsa","suvlbm","SMALL_EPSILON","isOne","isUnit","off","isOrthonormal","getSliceRange","imageData","getMapper","getInputData","corners","getDirection","dx","dy","dz","getDimensions","indexToWorld","buildFromDegree","identity","rotateFromDirections","pt","apply","transformedFocalPoint","currentSlice","minX","maxX","getSpacingInNormalDirection","iVector","jVector","projectedSpacing","EPSILON_PART","isPrimaryVolume","volume","getVolumeLoaderSchemes","starts","substring","getTargetVolumeAndSpacingInNormalDir","targetId","useSlabThickness","volumeActors","actorUID","imageVolumes","va","getVolume","iv","targetVolumeId","imageVolumeIndex","getSpacingInNormal","smallest","hasPrimaryVolume","slabThickness","getProperties","renderingEngines","targetViewports","filteredViewports","getVolumeViewports","vp","hasVolumeId","getVoiFromSigmoidRGBTransferFunction","cfunRange","getRange","getTable","cfunDomain","y1","logy1","log","x1","y2","logy2","x2","ww","wc","getVolumeActorCorners","bounds","extentToBounds","getExtent","getVolumeId","getActor","numScrollSteps","floatingStepNumber","currentStepIndex","sliceRangeInfo","hasFloatScalingParameters","some","isInteger","hasNaNValues","input","imageIdToURI","colonIndex","retrieveConfigurationState","IMAGE_RETRIEVE_CONFIGURATION","imageRetrieveMetadataProvider","payload","clone","restore","state","queries","query","addProvider","EventListenerPhases","TargetEventListeners","target","_eventListeners","_children","_target","isEmpty","size","addEventListener","dotIndex","namespaceToken","childElementEventListener","_addEventListener","removeEventListener","_removeEventListener","reset","entries","child","_unregisterAllEvents","listenersMap","listenerPhase","capture","Capture","Bubble","registeredPhases","None","callbackItem","newListenerPhase","_unregisterAllListeners","listener","eventPhases","currentPhase","useCapture","MultiTargetEventListenerManager","_targetsEventListeners","eventListeners","targetEventListeners","scaleRGBTransferFunction","rgbTransferFunction","getSize","nodeValue1","getNodeValue","setNodeValue","getMinMax","storedPixelData","storedPixel","numPixels","LAST_RUNTIME_ID","GLOBAL_CONTEXT","DEFAULT_MAX","DEFAULT_SEPARATOR","getRuntimeId","symbol","idComponents","carry","n","getNextRuntimeId","join","imageURI","isOpposite","v1","v2","tolerance","indexWithinDimensions","targetViewport","renderingEngineId","getRenderingEngine","sameVolumesViewports","targetActors","vpActors","every","vpActor","preScale","scaled","renderToCanvasGPU","imageOrVolume","viewportOptions","displayArea","imageArea","HTMLCanvasElement","isVolume","viewportId","element","document","createElement","devicePixelRatio","window","originalWidth","originalHeight","style","visibility","position","body","appendChild","uniqueId","setAttribute","temporaryCanvas","getOrCreateCanvas","RenderingEngine","getViewport","viewportInput","ViewportType","ORTHOGRAPHIC","STACK","defaultOptions","suppressEvents","enableElement","elementRendered","viewReference","onImageRendered","eventDetail","useViewRef","setViewReference","getContext","drawImage","canvasToWorld","topRight","bottomLeft","rightVector","downVector","Events","IMAGE_RENDERED","setTimeout","disableElement","querySelectorAll","remove","thicknessMm","setVolumes","renderImageObject","resetCamera","setProperties","renderToCanvasCPU","_renderingEngineId","_viewportOptions","getDefaultViewport","renderingTools","calculateTransform","drawImageSync","loadImageToCanvas","RequestType","Thumbnail","useCPURendering","thumbnail","imageAspect","baseViewportOptions","renderFn","successCallback","metaData","useRGBA","cache","imageLoadPoolManager","addRequest","imageIdIndex","HistoryMemo","label","redoAvailable","undoAvailable","ring","_size","undo","items","restoreMemo","eventTarget","dispatchEvent","CustomEvent","detail","isUndo","operationType","memo","undoIf","condition","redo","newPosition","createMemo","DefaultHistoryMemo","worldCoords","newOrigin","sub","imageToWorldCoords","imageCoords","imageCoordsInWorld","getViewportsWithImageURI","getViewports","hasImageURI","getClosestStackImageIndexForPoint","minimalDistance","getImageIds","currentImageIdIndex","getCurrentImageIdIndex","planeMetadata","targetImagePlane","rowVec","colVec","planeNormal","getPlaneMetadata","plane","planeEquation","planeDistanceToPoint","closestStack","higherImageIds","lowerImageIds","calculateMinimalDistanceForStackViewport","getCurrentVolumeViewportSlice","canvasWidth","canvasHeight","sliceToIndexMatrix","indexToSliceMatrix","getSliceViewInfo","ijkOriginPoint","transformCanvasToIJK","ijkRowPoint","ijkColPoint","ijkRowVec","ijkColVec","ijkSliceVec","maxIJKRowVec","maxIJKColVec","getImageData","sliceViewInfo","getSliceData","spatialRegistrationMetadataProvider","viewportId1","viewportId2","entryId","entryIdReverse","viewport1","viewport2","imageId1","getSliceIndex","imageId2","imagePlaneModule1","imagePlaneModule2","iop2","imagePositionPatient1","imagePositionPatient2","mat","getViewportImageCornersInWorld","ratio","topRightCanvas","bottomRightCanvas","bottomLeftCanvas","topLeftWorld","topRightWorld","bottomRightWorld","bottomLeftWorld","topLeftImage","worldToIndex","topRightImage","bottomRightImage","bottomLeftImage","topLeftImageWorld","_isInBounds","topRightImageWorld","bottomRightImageWorld","bottomLeftImageWorld","_getStackViewportImageCorners","imageCoord","getEnabledElement","StackViewport","getCornerstoneImage","isValidVolume","imageId0","seriesInstanceUID","usingDefaultValues","baseMetadata","validVolume","isEqual","videoUIDs","Set","isVideoTransferSyntax","uidOrUids","async","convertStackToVolumeViewport","uuidv4","getUnknownVolumeLoaderSchema","prevViewPresentation","getViewPresentation","prevViewReference","getViewReference","background","orientation","createAndCacheVolume","load","volumeViewport","volumeViewportNewVolumeHandler","VOLUME_VIEWPORT_NEW_VOLUME","setViewPresentation","convertVolumeToStackViewport","ImageVolume","prevView","stackViewport","setStack","roundToPrecision","roundNumber","precision","absValue","fixedPrecision","toFixed","convertToGrayscale","isRGBA","isRGB","newScalarData","destOffset","increment","getRandomSampleFromArray","clonedArray","shuffleArray","random","componentToHex","c","hex","rgbToHex","hexToRgb","result","exec","parseInt","deepEqual","obj1","obj2","JSON","stringify","groupBy","reduce","rv","test4DTag","IPPGroups","value_getter","frame_groups","first_frame_value_set","positions","frame_value_set","frames","frame_value","setEquals","getTagValue","tag","getPhilipsPrivateBValue","InlineBinary","value_bytes","atob","ary_buf","dv","DataView","setUint8","getSiemensPrivateBValue","getGEPrivateBValue","set_a","set_b","getPetFrameReferenceTime","moduleInfo","positionGroups","ippMetadata","frame_count","getIPPGroups","imageIdGroups","splittingTag","tags","fncList2","timePoints","isDynamicVolume","scaleArray","arrayLength","clip","val","low","high","scrollSlabs","getVolumeViewportScrollInfo","newFocalPoint","snapFocalPointToSlice","setCamera","desiredStepIndex","VolumeScrollEventDetail","currentImageId","getCurrentImageId","triggerEvent","VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS","VOLUME_VIEWPORT_SCROLL","scrollVolume","eventData","STACK_SCROLL_OUT_OF_BOUNDS","scroll","debounceLoading","loop","jumpToSlice","currentImageIndex","getTargetImageIdIndex","getNumberOfSlices","_getImageSliceData","imageIndexToJump","lastSliceIndex","_getImageIndexToJump","createSubVolume","referencedVolumeId","referencedVolume","refVolumeDim","minY","maxY","minZ","maxZ","ijkTopLeft","boundingBoxOriginWorld","transformIndexToWorld","subVolumeOptions","subVolume","createLocalVolume","subVolumeData","getCompleteScalarDataArray","subVolumeSliceSize","refVolumeSliceSize","refVolumeData","rowStartWorld","refVolumeRowStartIJK","transformWorldToIndex","refVolumeRowStartOffset","rowData","subVolumeLineStartOffset","setCompleteScalarDataArray","getVolumeDirectionVectors","viewUp","ijkOrigin","worldVecColDir","worldVecSliceDir","worldVecRowDir","ijkVecColDir","ijkVecSliceDir","ijkVecRowDir","calculateNeighborhoodStats","centerIjk","radius","numSlices","numPixelsPerSlice","sumSq","cx","cy","cz","centerIndex","mean","stdDev","variance","sqrt","getViewportModality","Modality","_getViewportModality","invertRgbTransferFunction","areNumbersEqualWithTolerance","num1","num2","isNumberType","isNumberArrayLike","arr1","arr2","areArraysEqual","negative","isEqualNegative","isEqualAbs","loglevel","getRootLogger","logger","getLogger","names","cs3dLog","coreLog","toolsLog","loaderLog","aiLog","examplesLog","dicomConsistencyLog","imageConsistencyLog","makeVolumeMetadata","voiLut","voiLutModule","BitsAllocated","BitsStored","SamplesPerPixel","HighBit","PhotometricInterpretation","PixelRepresentation","ImageOrientationPatient","PixelSpacing","Columns","Rows","VOILUTFunction","SeriesInstanceUID","linePlaneIntersection","p0","p1","x0","y0","z0","z1","A","B","C","D","t","normal","normalized","threePlaneIntersection","firstPlane","secondPlane","thirdPlane","A1","B1","C1","D1","A2","B2","C2","D2","A3","B3","C3","D3","m0","m1","m2","m3","signed","numerator","sign","pointInShapeCallback","pointInShapeFn","returnPoints","scalars","getPointData","getScalars","getData","defaultBoundsIJK","pointsInShape","iMin","iMax","jMin","jMax","kMin","kMax","pointIJK","xMultiple","yMultiple","zMultiple","indexK","indexJK","pointLPS","iterateOverPointsInShape","iterateOverPointsInShapeVoxelManager","getAtIndex","deltaFrames","posDiffFromFocalPoint","steps","frameIndex","newSlicePosFromMin","sortImageIdsAndGetSpacing","usingWadoUri","sortedImageIds","getTransferFunctionNodes","transferFunction","setTransferFunctionNodes","nodes","node","canvasPoint","vtkImageData","worldPoint","voxelPos","transformWorldToIndexContinuous","updateVTKImageDataWithCornerstoneImage","sourceImageData","newPixelData","modified","toWindowLevel","toLowHighRange","LINEAR_EXACT","SAMPLED_SIGMOID","ChangeTypes","Swipe","DEFAULT_CONTOUR_SEG_TOOL_NAME","convertContourPolylineToCanvasSpace","polyline","numPoints","projectedPolyline","worldToCanvas","createPolylineHole","targetAnnotation","holeAnnotation","windingDirection","targetWindingDirection","contour","holeWindingDirection","addChildAnnotation","removeContourSegmentationAnnotation","holeContour","holePolyline","closed","updatedToolNames","toolName","viewportIdsToRender","getViewportIdsWithToolToRender","initialDefaultState","colorLUT","segmentations","viewportSegRepresentations","getDefaultRenderingConfig","SegmentationRepresentations","Labelmap","defaultSegmentationStateManager","_stackLabelmapImageIdReferenceMap","_labelmapImageIdReferenceMap","freeze","getState","updateState","updater","newState","getColorLUT","lutIndex","getNextColorLUTIndex","resetState","getSegmentation","segmentationId","segmentation","updateSegmentation","draftState","assign","triggerSegmentationModified","addSegmentation","newSegmentation","representationData","getLabelmapImageIds","removeSegmentation","filteredSegmentations","triggerSegmentationRemoved","addSegmentationRepresentation","renderingConfig","getEnabledElementByViewportId","getSegmentationRepresentations","setRenderInactiveSegmentations","addDefaultSegmentationRepresentation","addLabelmapRepresentation","triggerSegmentationRepresentationModified","segmentReps","segments","segmentIndex","visible","active","colorLUTIndex","config","_setActiveSegmentation","processLabelmapRepresentationAddition","BaseVolumeViewport","isBaseVolumeSegmentation","updateLabelmapSegmentationImageReferences","_updateLabelmapSegmentationReferences","labelmapImageIds","updateCallback","referenceImageId","viewableLabelmapImageIdFound","labelmapImageId","isReferenceViewable","asOverlay","_updateLabelmapImageIdReferenceMap","_updateAllLabelmapSegmentationImageReferences","sliceIndex","withNavigation","labelmapData","getLabelmapImageIdsForImageId","_generateMapKey","getCurrentLabelmapImageIdsForViewport","getCurrentLabelmapImageIdForViewport","getStackSegmentationImageIdsForViewport","associatedReferenceImageAndLabelmapImageIds","removeSegmentationRepresentationsInternal","specifier","removedRepresentations","currentRepresentations","activeRepresentationRemoved","representation","shouldRemove","removeSegmentationRepresentations","triggerSegmentationRepresentationRemoved","remainingRepresentations","removeSegmentationRepresentation","suppressEvent","currentValues","newValues","setActiveSegmentation","getActiveSegmentation","activeSegRep","segRep","viewportRepresentations","typeMatch","idMatch","getSegmentationRepresentation","getSegmentationRepresentationVisibility","viewportRepresentation","setSegmentationRepresentationVisibility","segment","addColorLUT","removeColorLUT","_getStackIdForImageIds","getAllViewportSegmentationRepresentations","representations","getSegmentationRepresentationsBySegmentationId","viewportReps","filteredReps","getSegmentIndexColor","colorValue","setSegmentIndexColor","colorReference","segmentationStateManager","getLockedSegmentIndices","locked","svgNodeCache","BidirectionalTool","toolProps","defaultToolProps","supportedInteractionTypes","preventHandleOutsideImage","getTextLines","defaultGetTextLines","super","isPointNearTool","annotation","canvasCoords","proximity","handles","canvasPoint1","canvasPoint2","line","distanceToPoint","toolSelectedCallback","evt","highlighted","getToolName","editData","movingTextBox","_activateModify","hideElementCursor","preventDefault","handleSelectedCallback","handle","handleIndex","worldPosition","_endCallback","newAnnotation","hasMoved","doneEditMemo","activeHandleIndex","_deactivateModify","_deactivateDraw","resetElementCursor","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","isHandleOutsideImage","removeAnnotation","annotationUID","triggerAnnotationCompleted","isDrawing","_dragDrawCallback","currentPoints","world","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","triggerAnnotationModified","HandlesUpdated","_dragModifyCallback","deltaPoints","worldPosDelta","textBox","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","cos","sin","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","cancel","_activateDraw","isInteractingWithTool","MOUSE_UP","MOUSE_DRAG","MOUSE_MOVE","MOUSE_CLICK","TOUCH_TAP","TOUCH_END","TOUCH_DRAG","renderAnnotation","svgDrawingHelper","renderStatus","annotations","getAnnotations","filterInteractableAnnotationsForElement","getTargetId","styleSpecifier","toolGroupId","canvasCoordinates","lineWidth","lineDash","shadow","getAnnotationStyle","cachedStats","unit","_throttledCalculateCachedStats","_calculateCachedStats","activeHandleCanvasCoords","isAnnotationVisible","isAnnotationLocked","handleGroupUID","drawHandles","dataId1","dataId2","lineUID","drawLine","secondLineUID","getLinkedTextBoxStyle","worldBoundingBox","topLeft","bottomRight","textLines","canvasTextBoxCoords","getTextBoxCoordsCanvas","textBoxPosition","textBoxUID","boundingBox","drawLinkedTextBox","left","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos1","worldPos2","worldPos3","worldPos4","targetIds","getTargetImageData","index1","index2","index3","index4","handles1","handles2","scale1","units1","scale2","units2","dist1","_calculateLength","dist2","widthUnit","_isInsideVolume","StatsUpdated","vector1","vector2","atan2","trailing","addNewAnnotation","getReferencedImageId","getFrameOfReferenceUID","addAnnotation","hydrate","axis","instance","hydrateBase","majorAxis","minorAxis","major0","major1","minor0","minor1","utilities","autoGenerated","isLocked","isVisible","pos1","pos2","BrushTool","strategies","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL","defaultStrategy","activeStrategy","brushSize","useCenterSegmentIndex","preview","enabled","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","actions","StrategyCallbacks","AcceptPreview","method","bindings","RejectPreview","Interpolate","useBallStructuringElement","noUseDistanceTransform","noUseExtrapolation","interpolateExtrapolation","onSetToolPassive","disableCursor","onSetToolEnabled","onSetToolDisabled","preMouseDownCallback","_editData","createEditData","_previewData","isDrag","timerStart","Date","now","hoverData","_hoverData","createHoverData","operationData","getOperationData","applyActiveStrategyCallback","OnInteractionStart","mouseMoveCallback","mode","ToolModes","Active","updateCursor","startPoint","timer","time","clearTimeout","rejectPreview","previewCallback","strategyData","strategy","segmentationVoxelManager","Preview","_dragCallback","applyActiveStrategy","OnInteractionEnd","acceptPreview","centerCanvas","_calculateCursor","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","brushCursor","computeInnerCircleRadius","getStatistics","segmentIndices","GetStatistics","interpolate","invalidateBrushCursor","segmentColor","getActiveSegmentationData","toolMetadata","brushCursorUID","bottom","drawCircle","centerSegmentIndexInfo","dynamicRadiusInCanvas","threshold","circleUID1","initializeCircle","Initialize","segmentationImageData","centerWorld","centerIJK","topLeftCanvas","getCanvasEllipseCorners","circleCornersIJK","getBoundingBoxAroundShapeIJK","isInObject","createPointInEllipse","isInObjectBoundsIJK","worldInfo","xRadius","yRadius","zRadius","sphereObj","radius2","ellipseObj","precalculated","precalculatePointInEllipse","CIRCLE_STRATEGY","regionFill","setValue","determineSegmentIndex","labelmapStatistics","CIRCLE_THRESHOLD_STRATEGY","dynamicThreshold","islandRemoval","fillInsideCircle","strategyFunction","thresholdInsideCircle","initializeRectangle","imageVoxelManager","rectangleCornersIJK","coord","isStackViewport","isAligned","getSpacing","EPS","pointsBoundsLPS","getBoundingBoxAroundShapeWorld","xMin","xMax","yMin","yMax","zMin","zMax","createPointInRectangle","RECTANGLE_STRATEGY","RECTANGLE_THRESHOLD_STRATEGY","getClosestImageIdForStackViewport","ImagePositionPatient","calculateDistanceToImage","findNextLink","lines","contourPoints","cell","nextLine","remainingLines","findContours","firstCell","shift","extraContours","findContoursFromReducedSet","getDeduplicatedVTKPolyDataPoints","polyData","bypass","getPoints","getLines","pointsArray","getNumberOfPoints","linesArray","getNumberOfCells","getCell","newIndex","CalibrationTypes","Enums","PIXEL_UNITS","VOXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","UNIT_MAPPING","SQUARE","getCalibratedLengthUnitsAndScale","hasPixelSpacing","volumeUnit","areaUnit","calibrationType","sequenceOfUltrasoundRegions","UNCALIBRATED","imageIndex1","imageIndex2","regions","region","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","regionDataType","physicalUnitsXDirection","physicalUnitsYDirection","physicalDeltaX","physicalDeltaY","ERMF","USER","ERROR","PROJECTION","_getSphereBoundsInfo","circlePoints","directionVectors","radiusWorld","rowCosine","column","columnCosine","vecNormal","topLeftIJK","bottomRightIJK","pointsIJK","_computeBoundsIJK","getSphereBoundsInfoFromViewport","getToolsWithModesForElement","modesFilter","toolGroup","getToolGroupForViewport","enabledTools","toolGroupToolNames","toolOptions","toolInstance","getToolInstance","Calculator","InstanceCalculator","storePointData","ellipse","inverts","invXRadiusSq","invYRadiusSq","invZRadiusSq","centerL","centerP","centerS","inside","distanceToPointSquared","lineStart","lineEnd","distanceSquared","distanceToPointSquaredInfo","closestPoint","dotProduct","ORIENTATION_TOLERANCE","isPointOnLineSegment","p2","z2","mirror","mirrorPoint","staticPoint","canvasPoints","newCanvasPoint","commonData","xDir","yDir","lastWorldPos","newWorldPos","worldPosDiff","xDist","yDist","numPointsToAdd","lastCanvasPoint","canvasDist","canvasDir","distPerPoint","areLineSegmentsIntersecting","q1","q2","line1MinX","line1MinY","line1MaxX","line1MaxY","line2MinX","line2MinY","line2MaxX","line2MaxY","orient","onSegment","q","orientationValue","PolylinePointType","PolylinePointPosition","PolylinePointDirection","ensuresNextPointers","polylinePoints","len","currentPoint","next","getSourceAndTargetPointsList","targetPolyline","sourcePolyline","targetPolylinePoints","sourcePolylinePoints","sourceIntersectionsCache","intersectionPointDirection","Exiting","Entering","pointInside","vertexPoint","Vertex","coordinates","Inside","Outside","visited","intersectionsInfo","intersectedLineSegment","sourceLineSegmentId","intersectionCoordinate","coordinate","targetStartPointDistSquared","right","intersectionInfo","targetEdgePoint","Intersection","Edge","sourceEdgePoint","Unknown","cloned","sourceIntersectionPoints","lineSegmentId","intersectionPoint","lineSegStartDistSquared","getUnvisitedOutsidePoint","mergePolylines","targetNormal","sourceNormal","dotNormals","mergedPolyline","subtractPolylines","subtractedPolylines","subtractedPolyline","containsPoint","numPolylinePoints","numIntersections","holes","hole","shouldClose","maxSegmentIndex","intersects","xIntersection","containsPoints","numPoint","DEFAULT_EPSILON","epsilon","epsilonSquared","partitionQueue","polylinePointFlags","numDecimatedPoints","startIndex","endIndex","endPoint","maxDistSquared","maxDistIndex","distSquared","decimatedPolyline","srcIndex","dstIndex","getAABB","polylineToUse","numDimensions","is3D","currentPolyline","totalPoints","getArea","area","getClosestLineSegmentIntersection","initialQ2Index","p2Index","intersections","q2Index","distances","intersection","intersectionPoints","midpoint","minDistance","getFirstLineSegmentIntersectionIndexes","initialI","getLineSegmentIntersectionsCoordinates","polylineIndexes","getLineSegmentIntersectionsIndexes","maxI","PARALLEL_LINES_TOLERANCE","getLinesIntersection","diffQ1P1","diffQ2P2","denominator","line1AABB","line2AABB","numerator2","getNormal2","getNormal3","vecArea","refPoint","aX","aY","aZ","bX","bY","bZ","_getAreaVector","getSignedArea","subPixelResolution","volumeSpacing","absViewRightDotI","absViewRightDotJ","absViewRightDotK","absViewUpDotI","absViewUpDotJ","absViewUpDotK","getWindingDirection","intersectPolyline","sourceLen","sourceP1","sourceP2","intersectionPointIndexes","isClosed","firstPoint","lastPoint","distFirstToLastPoints","isPointInsidePolyline3D","sharedDimensionIndex","projectedHoles","hole2D","point2D","p1p","p1p2","p1p2Mag","projectionVectorMag","p1p2UnitVector","projectionVector","projectionPoint","closeContourProximity","projectTo2D","testPoints","points2D","firstDim","secondDim","createBidirectionalForSlice","sliceContour","isInSegment","currentMax","maxMajor","maxMinor","currentMaxMinor","currentMaxMajor","maxMajorPoints","point1","point2","distance2","testCenter","handle0","handle1","unitMajor","maxMinorPoints","isLineInSegment","ijk1","ijk2","testPoint","testIJK","testSize","unitDelta","createIsInSegmentMetadata","containedSegmentIndices","pixelsPerSlice","ijk","triggerAnnotationRenderForToolGroupIds","toolGroupIds","getToolGroup","getViewportsInfo","viewportInfo","SegmentStatsCalculator","calculators","indices","statsInit","statsCallback","statsData","calculator","renderers","labelmapDisplay","Contour","contourDisplay","Surface","surfaceDisplay","planarContourToolName","PlanarFreehandContourSegmentationTool","_needsRender","_animationFrameSet","_animationFrameHandle","_getAllViewports","getRenderingEngines","_renderFlaggedSegmentations","_throwIfDestroyed","_triggerRender","renderSegmentationsForViewport","_getViewportIdsForSegmentation","_setViewportsToBeRenderedNextFrame","renderSegmentation","segmentationRepresentations","_render","requestAnimationFrame","viewportRenderList","segmentationRenderList","_addPlanarFreeHandToolIfAbsent","display","allSettled","results","segmentationDetails","status","onSegmentationRender","SEGMENTATION_RENDERED","tools","addTool","hasTool","setToolPassive","VoxelManager","computeWorker","createVoxelManager","createScalarVolumeVoxelManager","createDataStructure","info","createVTKImageData","setDimensions","setOrigin","setDirection","setSpacing","scalarArray","setScalars","processSegmentStatistics","segVoxelManager","imageValue","getDefaultBounds","performMarchingSquares","slicingMode","mSquares","setInputData","setContourValues","setMergePoints","getOutputData","createContoursFromPolyData","msOutput","reducedSet","contours","createSegmentsFromIndices","getArgsFromInfo","args","segmentationInfo","imageInfo","calculateSegmentsStatisticsVolume","segmentationSpacing","computeMetabolicStats","imageSpacing","imageDimensions","imageDirection","imageOrigin","refVoxelManager","suv","scalarDataLength","getScalarDataLength","tmtv","tlg","calculateSegmentsStatisticsStack","segInfo","imgInfo","segDimensions","getSegmentLargestBidirectionalInternal","isStack","calculateBidirectionalStack","calculateVolumetricBidirectional","findLargestBidirectionalFromContours","maxBidirectional","bidirectional","bidirectionalResults","segScalarData","segIndex","isSliceEmptyForSegmentVolume","sliceContours","filteredData","contourData","bidirectionalResult","contourSets","generateContourSetsFromLabelmapVolume","contourSet","ContourSets","numSegments","frameStart","imageDataCopy","shallowCopy","ContourSet","segData","startIdx","endIdx","VtkDataTypes","VOID","CHAR","SIGNED_CHAR","UNSIGNED_CHAR","UNSIGNED_CHAR_CLAMPED","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DOUBLE","Constants","DefaultDataType","DataTypeByteSize","Int8Array","Int32Array","Uint32Array","Float64Array","AttributeCopyOperations","COPYTUPLE","INTERPOLATE","PASSDATA","ALLCOPY","AttributeLimitTypes","MAX","EXACT","NOLIMIT","AttributeTypes","SCALARS","VECTORS","NORMALS","TCOORDS","TENSORS","GLOBALIDS","PEDIGREEIDS","EDGEFLAG","NUM_ATTRIBUTES","CellGhostTypes","DUPLICATECELL","HIGHCONNECTIVITYCELL","LOWCONNECTIVITYCELL","REFINEDCELL","EXTERIORCELL","HIDDENCELL","DesiredOutputPrecision","DEFAULT","SINGLE","PointGhostTypes","DUPLICATEPOINT","HIDDENPOINT","ghostArrayName","vtkErrorMacro","vtkDebugMacro","m","vtkImageMarchingSquares","publicAPI","model","classHierarchy","getContourValues","contourValues","cValues","ids","pixelScalars","pixelPts","edgeLocator","newInstance","getPixelScalars","dims","increments","kernelX","kernelY","ii","getPixelPoints","produceLines","cVal","CASE_MASK","pId","idx","pixelLines","getCase","eid","edgeVerts","getEdge","mergePoints","isInsertedEdge","insertEdge","requestData","inData","outData","getOrigin","extent","computeIncrements","getKernels","cv","initialize","polydata","setData","timeEnd","DEFAULT_VALUES","initialValues","arguments","algo","setGet","vtkImageMarchingSquares$1","out","hypot","fromValues","copy","subtract","multiply","divide","ceil","scaleAndAdd","squaredDistance","squaredLength","negate","inverse","normalize","cross","ax","ay","az","bx","by","bz","lerp","hermite","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","w","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","rotateY","rotateZ","mag","cosine","acos","zero","exactEquals","equals","a0","a1","a2","b0","b1","b2","vec","mul","div","dist","sqrDist","sqrLen","stride","fn","arg","l","zip","interpolator","samples"],"sourceRoot":""}